// Generated from grammars/SqlBase.g4 by ANTLR 4.9.2
// jshint ignore: start
const antlr4 = require("antlr4");
const { SqlBaseVisitor } = require("./SqlBaseVisitor.js");

const serializedATN = ["\u0003\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786",
    "\u5964\u0003\u0138\u0cab\u0004\u0002\t\u0002\u0004\u0003\t\u0003\u0004",
    "\u0004\t\u0004\u0004\u0005\t\u0005\u0004\u0006\t\u0006\u0004\u0007\t",
    "\u0007\u0004\b\t\b\u0004\t\t\t\u0004\n\t\n\u0004\u000b\t\u000b\u0004",
    "\f\t\f\u0004\r\t\r\u0004\u000e\t\u000e\u0004\u000f\t\u000f\u0004\u0010",
    "\t\u0010\u0004\u0011\t\u0011\u0004\u0012\t\u0012\u0004\u0013\t\u0013",
    "\u0004\u0014\t\u0014\u0004\u0015\t\u0015\u0004\u0016\t\u0016\u0004\u0017",
    "\t\u0017\u0004\u0018\t\u0018\u0004\u0019\t\u0019\u0004\u001a\t\u001a",
    "\u0004\u001b\t\u001b\u0004\u001c\t\u001c\u0004\u001d\t\u001d\u0004\u001e",
    "\t\u001e\u0004\u001f\t\u001f\u0004 \t \u0004!\t!\u0004\"\t\"\u0004#",
    "\t#\u0004$\t$\u0004%\t%\u0004&\t&\u0004\'\t\'\u0004(\t(\u0004)\t)\u0004",
    "*\t*\u0004+\t+\u0004,\t,\u0004-\t-\u0004.\t.\u0004/\t/\u00040\t0\u0004",
    "1\t1\u00042\t2\u00043\t3\u00044\t4\u00045\t5\u00046\t6\u00047\t7\u0004",
    "8\t8\u00049\t9\u0004:\t:\u0004;\t;\u0004<\t<\u0004=\t=\u0004>\t>\u0004",
    "?\t?\u0004@\t@\u0004A\tA\u0004B\tB\u0004C\tC\u0004D\tD\u0004E\tE\u0004",
    "F\tF\u0004G\tG\u0004H\tH\u0004I\tI\u0004J\tJ\u0004K\tK\u0004L\tL\u0004",
    "M\tM\u0004N\tN\u0004O\tO\u0004P\tP\u0004Q\tQ\u0004R\tR\u0004S\tS\u0004",
    "T\tT\u0004U\tU\u0004V\tV\u0004W\tW\u0004X\tX\u0004Y\tY\u0004Z\tZ\u0004",
    "[\t[\u0004\\\t\\\u0004]\t]\u0004^\t^\u0004_\t_\u0004`\t`\u0004a\ta\u0004",
    "b\tb\u0004c\tc\u0004d\td\u0004e\te\u0004f\tf\u0004g\tg\u0004h\th\u0004",
    "i\ti\u0004j\tj\u0004k\tk\u0004l\tl\u0004m\tm\u0004n\tn\u0004o\to\u0004",
    "p\tp\u0004q\tq\u0004r\tr\u0004s\ts\u0004t\tt\u0004u\tu\u0004v\tv\u0004",
    "w\tw\u0004x\tx\u0004y\ty\u0004z\tz\u0004{\t{\u0004|\t|\u0004}\t}\u0004",
    "~\t~\u0004\u007f\t\u007f\u0004\u0080\t\u0080\u0004\u0081\t\u0081\u0004",
    "\u0082\t\u0082\u0004\u0083\t\u0083\u0004\u0084\t\u0084\u0004\u0085\t",
    "\u0085\u0004\u0086\t\u0086\u0004\u0087\t\u0087\u0004\u0088\t\u0088\u0004",
    "\u0089\t\u0089\u0004\u008a\t\u008a\u0004\u008b\t\u008b\u0004\u008c\t",
    "\u008c\u0004\u008d\t\u008d\u0004\u008e\t\u008e\u0004\u008f\t\u008f\u0004",
    "\u0090\t\u0090\u0004\u0091\t\u0091\u0004\u0092\t\u0092\u0004\u0093\t",
    "\u0093\u0004\u0094\t\u0094\u0004\u0095\t\u0095\u0004\u0096\t\u0096\u0004",
    "\u0097\t\u0097\u0004\u0098\t\u0098\u0004\u0099\t\u0099\u0004\u009a\t",
    "\u009a\u0004\u009b\t\u009b\u0004\u009c\t\u009c\u0004\u009d\t\u009d\u0003",
    "\u0002\u0003\u0002\u0007\u0002\u013d\n\u0002\f\u0002\u000e\u0002\u0140",
    "\u000b\u0002\u0003\u0002\u0003\u0002\u0003\u0003\u0003\u0003\u0003\u0003",
    "\u0003\u0004\u0003\u0004\u0003\u0004\u0003\u0005\u0003\u0005\u0003\u0005",
    "\u0003\u0006\u0003\u0006\u0003\u0006\u0003\u0007\u0003\u0007\u0003\u0007",
    "\u0003\b\u0003\b\u0003\b\u0003\t\u0003\t\u0005\t\u0158\n\t\u0003\t\u0003",
    "\t\u0003\t\u0005\t\u015d\n\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t",
    "\u0003\t\u0005\t\u0165\n\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003",
    "\t\u0007\t\u016d\n\t\f\t\u000e\t\u0170\u000b\t\u0003\t\u0003\t\u0003",
    "\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003",
    "\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t\u0005\t\u0183\n\t\u0003\t",
    "\u0003\t\u0005\t\u0187\n\t\u0003\t\u0003\t\u0003\t\u0003\t\u0005\t\u018d",
    "\n\t\u0003\t\u0005\t\u0190\n\t\u0003\t\u0005\t\u0193\n\t\u0003\t\u0003",
    "\t\u0003\t\u0003\t\u0003\t\u0007\t\u019a\n\t\f\t\u000e\t\u019d\u000b",
    "\t\u0003\t\u0003\t\u0005\t\u01a1\n\t\u0003\t\u0005\t\u01a4\n\t\u0003",
    "\t\u0003\t\u0005\t\u01a8\n\t\u0003\t\u0005\t\u01ab\n\t\u0003\t\u0003",
    "\t\u0003\t\u0003\t\u0003\t\u0005\t\u01b2\n\t\u0003\t\u0003\t\u0003\t",
    "\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t\u0007\t\u01bd\n\t\f",
    "\t\u000e\t\u01c0\u000b\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t\u0007",
    "\t\u01c7\n\t\f\t\u000e\t\u01ca\u000b\t\u0003\t\u0003\t\u0005\t\u01ce",
    "\n\t\u0003\t\u0005\t\u01d1\n\t\u0003\t\u0003\t\u0005\t\u01d5\n\t\u0003",
    "\t\u0005\t\u01d8\n\t\u0003\t\u0003\t\u0003\t\u0003\t\u0005\t\u01de\n",
    "\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003",
    "\t\u0005\t\u01e9\n\t\u0003\t\u0003\t\u0003\t\u0003\t\u0005\t\u01ef\n",
    "\t\u0003\t\u0003\t\u0003\t\u0005\t\u01f4\n\t\u0003\t\u0003\t\u0003\t",
    "\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003",
    "\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003",
    "\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003",
    "\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003",
    "\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003",
    "\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003",
    "\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t\u0005\t\u0234\n\t\u0003\t",
    "\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t\u0005\t\u023d\n\t\u0003",
    "\t\u0003\t\u0005\t\u0241\n\t\u0003\t\u0003\t\u0003\t\u0003\t\u0005\t",
    "\u0247\n\t\u0003\t\u0003\t\u0005\t\u024b\n\t\u0003\t\u0003\t\u0003\t",
    "\u0005\t\u0250\n\t\u0003\t\u0003\t\u0003\t\u0003\t\u0005\t\u0256\n\t",
    "\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003",
    "\t\u0003\t\u0005\t\u0262\n\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t",
    "\u0003\t\u0005\t\u026a\n\t\u0003\t\u0003\t\u0003\t\u0003\t\u0005\t\u0270",
    "\n\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t",
    "\u0003\t\u0003\t\u0003\t\u0005\t\u027d\n\t\u0003\t\u0006\t\u0280\n\t",
    "\r\t\u000e\t\u0281\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003",
    "\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t\u0005\t\u0292",
    "\n\t\u0003\t\u0003\t\u0003\t\u0007\t\u0297\n\t\f\t\u000e\t\u029a\u000b",
    "\t\u0003\t\u0005\t\u029d\n\t\u0003\t\u0003\t\u0003\t\u0003\t\u0005\t",
    "\u02a3\n\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003",
    "\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t\u0005\t\u02b2\n\t\u0003\t",
    "\u0003\t\u0005\t\u02b6\n\t\u0003\t\u0003\t\u0003\t\u0003\t\u0005\t\u02bc",
    "\n\t\u0003\t\u0003\t\u0003\t\u0003\t\u0005\t\u02c2\n\t\u0003\t\u0005",
    "\t\u02c5\n\t\u0003\t\u0005\t\u02c8\n\t\u0003\t\u0003\t\u0003\t\u0003",
    "\t\u0005\t\u02ce\n\t\u0003\t\u0003\t\u0005\t\u02d2\n\t\u0003\t\u0003",
    "\t\u0003\t\u0003\t\u0003\t\u0003\t\u0007\t\u02da\n\t\f\t\u000e\t\u02dd",
    "\u000b\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t\u0005\t\u02e5",
    "\n\t\u0003\t\u0005\t\u02e8\n\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003",
    "\t\u0003\t\u0003\t\u0005\t\u02f1\n\t\u0003\t\u0003\t\u0003\t\u0005\t",
    "\u02f6\n\t\u0003\t\u0003\t\u0003\t\u0003\t\u0005\t\u02fc\n\t\u0003\t",
    "\u0003\t\u0003\t\u0003\t\u0003\t\u0005\t\u0303\n\t\u0003\t\u0005\t\u0306",
    "\n\t\u0003\t\u0003\t\u0003\t\u0003\t\u0005\t\u030c\n\t\u0003\t\u0003",
    "\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t\u0007\t\u0315\n\t\f\t\u000e",
    "\t\u0318\u000b\t\u0005\t\u031a\n\t\u0003\t\u0003\t\u0005\t\u031e\n\t",
    "\u0003\t\u0003\t\u0003\t\u0005\t\u0323\n\t\u0003\t\u0003\t\u0003\t\u0005",
    "\t\u0328\n\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t\u0005\t\u032f\n",
    "\t\u0003\t\u0005\t\u0332\n\t\u0003\t\u0005\t\u0335\n\t\u0003\t\u0003",
    "\t\u0003\t\u0003\t\u0003\t\u0005\t\u033c\n\t\u0003\t\u0003\t\u0003\t",
    "\u0005\t\u0341\n\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003",
    "\t\u0005\t\u034a\n\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t",
    "\u0005\t\u0352\n\t\u0003\t\u0003\t\u0003\t\u0003\t\u0005\t\u0358\n\t",
    "\u0003\t\u0005\t\u035b\n\t\u0003\t\u0005\t\u035e\n\t\u0003\t\u0003\t",
    "\u0003\t\u0003\t\u0005\t\u0364\n\t\u0003\t\u0003\t\u0005\t\u0368\n\t",
    "\u0003\t\u0003\t\u0005\t\u036c\n\t\u0003\t\u0003\t\u0005\t\u0370\n\t",
    "\u0005\t\u0372\n\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t\u0005",
    "\t\u037a\n\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t\u0005\t",
    "\u0382\n\t\u0003\t\u0003\t\u0003\t\u0003\t\u0005\t\u0388\n\t\u0003\t",
    "\u0003\t\u0003\t\u0003\t\u0005\t\u038e\n\t\u0003\t\u0005\t\u0391\n\t",
    "\u0003\t\u0003\t\u0005\t\u0395\n\t\u0003\t\u0005\t\u0398\n\t\u0003\t",
    "\u0003\t\u0005\t\u039c\n\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003",
    "\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003",
    "\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003",
    "\t\u0007\t\u03b6\n\t\f\t\u000e\t\u03b9\u000b\t\u0005\t\u03bb\n\t\u0003",
    "\t\u0003\t\u0005\t\u03bf\n\t\u0003\t\u0003\t\u0003\t\u0003\t\u0005\t",
    "\u03c5\n\t\u0003\t\u0005\t\u03c8\n\t\u0003\t\u0005\t\u03cb\n\t\u0003",
    "\t\u0003\t\u0003\t\u0003\t\u0005\t\u03d1\n\t\u0003\t\u0003\t\u0003\t",
    "\u0003\t\u0003\t\u0003\t\u0005\t\u03d9\n\t\u0003\t\u0003\t\u0003\t\u0005",
    "\t\u03de\n\t\u0003\t\u0003\t\u0003\t\u0003\t\u0005\t\u03e4\n\t\u0003",
    "\t\u0003\t\u0003\t\u0003\t\u0005\t\u03ea\n\t\u0003\t\u0003\t\u0003\t",
    "\u0003\t\u0003\t\u0003\t\u0005\t\u03f2\n\t\u0003\t\u0003\t\u0003\t\u0003",
    "\t\u0007\t\u03f8\n\t\f\t\u000e\t\u03fb\u000b\t\u0005\t\u03fd\n\t\u0003",
    "\t\u0003\t\u0003\t\u0007\t\u0402\n\t\f\t\u000e\t\u0405\u000b\t\u0003",
    "\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003",
    "\t\u0003\t\u0003\t\u0007\t\u0413\n\t\f\t\u000e\t\u0416\u000b\t\u0003",
    "\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t\u0007",
    "\t\u0421\n\t\f\t\u000e\t\u0424\u000b\t\u0005\t\u0426\n\t\u0003\t\u0003",
    "\t\u0007\t\u042a\n\t\f\t\u000e\t\u042d\u000b\t\u0003\t\u0003\t\u0003",
    "\t\u0003\t\u0007\t\u0433\n\t\f\t\u000e\t\u0436\u000b\t\u0003\t\u0003",
    "\t\u0003\t\u0003\t\u0007\t\u043c\n\t\f\t\u000e\t\u043f\u000b\t\u0003",
    "\t\u0003\t\u0007\t\u0443\n\t\f\t\u000e\t\u0446\u000b\t\u0005\t\u0448",
    "\n\t\u0003\n\u0003\n\u0003\u000b\u0003\u000b\u0003\f\u0003\f\u0003\f",
    "\u0003\f\u0003\f\u0003\f\u0005\f\u0454\n\f\u0003\f\u0003\f\u0005\f\u0458",
    "\n\f\u0003\f\u0003\f\u0003\f\u0003\f\u0003\f\u0005\f\u045f\n\f\u0003",
    "\f\u0003\f\u0003\f\u0003\f\u0003\f\u0003\f\u0003\f\u0003\f\u0003\f\u0003",
    "\f\u0003\f\u0003\f\u0003\f\u0003\f\u0003\f\u0003\f\u0003\f\u0003\f\u0003",
    "\f\u0003\f\u0003\f\u0003\f\u0003\f\u0003\f\u0003\f\u0003\f\u0003\f\u0003",
    "\f\u0003\f\u0003\f\u0003\f\u0003\f\u0003\f\u0003\f\u0003\f\u0003\f\u0003",
    "\f\u0003\f\u0003\f\u0003\f\u0003\f\u0003\f\u0003\f\u0003\f\u0003\f\u0003",
    "\f\u0003\f\u0003\f\u0003\f\u0003\f\u0003\f\u0003\f\u0003\f\u0003\f\u0003",
    "\f\u0003\f\u0003\f\u0003\f\u0003\f\u0003\f\u0003\f\u0003\f\u0003\f\u0003",
    "\f\u0003\f\u0003\f\u0003\f\u0003\f\u0003\f\u0003\f\u0003\f\u0003\f\u0003",
    "\f\u0003\f\u0003\f\u0003\f\u0003\f\u0003\f\u0003\f\u0003\f\u0003\f\u0003",
    "\f\u0003\f\u0003\f\u0003\f\u0003\f\u0003\f\u0003\f\u0003\f\u0003\f\u0003",
    "\f\u0003\f\u0003\f\u0003\f\u0003\f\u0003\f\u0003\f\u0003\f\u0003\f\u0003",
    "\f\u0003\f\u0003\f\u0003\f\u0003\f\u0003\f\u0003\f\u0003\f\u0003\f\u0003",
    "\f\u0003\f\u0003\f\u0003\f\u0003\f\u0003\f\u0005\f\u04d3\n\f\u0003\f",
    "\u0003\f\u0003\f\u0003\f\u0003\f\u0003\f\u0005\f\u04db\n\f\u0003\f\u0003",
    "\f\u0003\f\u0003\f\u0003\f\u0003\f\u0005\f\u04e3\n\f\u0003\f\u0003\f",
    "\u0003\f\u0003\f\u0003\f\u0003\f\u0003\f\u0005\f\u04ec\n\f\u0003\f\u0003",
    "\f\u0003\f\u0003\f\u0003\f\u0003\f\u0003\f\u0003\f\u0005\f\u04f6\n\f",
    "\u0003\r\u0003\r\u0005\r\u04fa\n\r\u0003\r\u0005\r\u04fd\n\r\u0003\r",
    "\u0003\r\u0003\r\u0003\r\u0005\r\u0503\n\r\u0003\r\u0003\r\u0003\u000e",
    "\u0003\u000e\u0005\u000e\u0509\n\u000e\u0003\u000e\u0003\u000e\u0003",
    "\u000e\u0003\u000e\u0003\u000f\u0003\u000f\u0003\u000f\u0003\u000f\u0003",
    "\u000f\u0003\u000f\u0005\u000f\u0515\n\u000f\u0003\u000f\u0003\u000f",
    "\u0003\u000f\u0003\u000f\u0003\u0010\u0003\u0010\u0003\u0010\u0003\u0010",
    "\u0003\u0010\u0003\u0010\u0005\u0010\u0521\n\u0010\u0003\u0010\u0003",
    "\u0010\u0003\u0010\u0005\u0010\u0526\n\u0010\u0003\u0011\u0003\u0011",
    "\u0003\u0011\u0003\u0012\u0003\u0012\u0003\u0012\u0003\u0013\u0005\u0013",
    "\u052f\n\u0013\u0003\u0013\u0003\u0013\u0003\u0013\u0003\u0014\u0003",
    "\u0014\u0003\u0014\u0005\u0014\u0537\n\u0014\u0003\u0014\u0003\u0014",
    "\u0003\u0014\u0003\u0014\u0003\u0014\u0005\u0014\u053e\n\u0014\u0005",
    "\u0014\u0540\n\u0014\u0003\u0014\u0005\u0014\u0543\n\u0014\u0003\u0014",
    "\u0003\u0014\u0003\u0014\u0005\u0014\u0548\n\u0014\u0003\u0014\u0003",
    "\u0014\u0005\u0014\u054c\n\u0014\u0003\u0014\u0003\u0014\u0003\u0014",
    "\u0005\u0014\u0551\n\u0014\u0003\u0014\u0005\u0014\u0554\n\u0014\u0003",
    "\u0014\u0003\u0014\u0003\u0014\u0005\u0014\u0559\n\u0014\u0003\u0014",
    "\u0003\u0014\u0003\u0014\u0005\u0014\u055e\n\u0014\u0003\u0014\u0005",
    "\u0014\u0561\n\u0014\u0003\u0014\u0003\u0014\u0003\u0014\u0005\u0014",
    "\u0566\n\u0014\u0003\u0014\u0003\u0014\u0005\u0014\u056a\n\u0014\u0003",
    "\u0014\u0003\u0014\u0003\u0014\u0005\u0014\u056f\n\u0014\u0005\u0014",
    "\u0571\n\u0014\u0003\u0015\u0003\u0015\u0005\u0015\u0575\n\u0015\u0003",
    "\u0016\u0003\u0016\u0003\u0016\u0003\u0016\u0003\u0016\u0007\u0016\u057c",
    "\n\u0016\f\u0016\u000e\u0016\u057f\u000b\u0016\u0003\u0016\u0003\u0016",
    "\u0003\u0017\u0003\u0017\u0003\u0017\u0005\u0017\u0586\n\u0017\u0003",
    "\u0018\u0003\u0018\u0003\u0019\u0003\u0019\u0003\u0019\u0003\u0019\u0003",
    "\u0019\u0005\u0019\u058f\n\u0019\u0003\u001a\u0003\u001a\u0003\u001a",
    "\u0007\u001a\u0594\n\u001a\f\u001a\u000e\u001a\u0597\u000b\u001a\u0003",
    "\u001b\u0003\u001b\u0003\u001b\u0003\u001b\u0007\u001b\u059d\n\u001b",
    "\f\u001b\u000e\u001b\u05a0\u000b\u001b\u0003\u001c\u0003\u001c\u0005",
    "\u001c\u05a4\n\u001c\u0003\u001c\u0005\u001c\u05a7\n\u001c\u0003\u001c",
    "\u0003\u001c\u0003\u001c\u0003\u001c\u0003\u001d\u0003\u001d\u0003\u001d",
    "\u0003\u001e\u0003\u001e\u0003\u001e\u0003\u001e\u0003\u001e\u0003\u001e",
    "\u0003\u001e\u0003\u001e\u0003\u001e\u0003\u001e\u0003\u001e\u0007\u001e",
    "\u05bb\n\u001e\f\u001e\u000e\u001e\u05be\u000b\u001e\u0003\u001f\u0003",
    "\u001f\u0003\u001f\u0003 \u0003 \u0003 \u0003!\u0003!\u0003!\u0003!",
    "\u0007!\u05ca\n!\f!\u000e!\u05cd\u000b!\u0003!\u0003!\u0003\"\u0003",
    "\"\u0005\"\u05d3\n\"\u0003\"\u0005\"\u05d6\n\"\u0003#\u0003#\u0003#",
    "\u0007#\u05db\n#\f#\u000e#\u05de\u000b#\u0003#\u0005#\u05e1\n#\u0003",
    "$\u0003$\u0003$\u0003$\u0005$\u05e7\n$\u0003%\u0003%\u0003%\u0003%\u0007",
    "%\u05ed\n%\f%\u000e%\u05f0\u000b%\u0003%\u0003%\u0003&\u0003&\u0003",
    "&\u0003&\u0007&\u05f8\n&\f&\u000e&\u05fb\u000b&\u0003&\u0003&\u0003",
    "\'\u0003\'\u0003\'\u0003\'\u0003\'\u0003\'\u0005\'\u0605\n\'\u0003(",
    "\u0003(\u0003(\u0003(\u0003(\u0005(\u060c\n(\u0003)\u0003)\u0003)\u0003",
    ")\u0005)\u0612\n)\u0003*\u0003*\u0003*\u0003+\u0003+\u0003+\u0003+\u0003",
    "+\u0003+\u0006+\u061d\n+\r+\u000e+\u061e\u0003+\u0003+\u0003+\u0003",
    "+\u0003+\u0005+\u0626\n+\u0003+\u0003+\u0003+\u0003+\u0003+\u0005+\u062d",
    "\n+\u0003+\u0003+\u0003+\u0003+\u0003+\u0003+\u0003+\u0003+\u0003+\u0003",
    "+\u0005+\u0639\n+\u0003+\u0003+\u0003+\u0003+\u0007+\u063f\n+\f+\u000e",
    "+\u0642\u000b+\u0003+\u0007+\u0645\n+\f+\u000e+\u0648\u000b+\u0005+",
    "\u064a\n+\u0003,\u0003,\u0003,\u0003,\u0003,\u0007,\u0651\n,\f,\u000e",
    ",\u0654\u000b,\u0005,\u0656\n,\u0003,\u0003,\u0003,\u0003,\u0003,\u0007",
    ",\u065d\n,\f,\u000e,\u0660\u000b,\u0005,\u0662\n,\u0003,\u0003,\u0003",
    ",\u0003,\u0003,\u0007,\u0669\n,\f,\u000e,\u066c\u000b,\u0005,\u066e",
    "\n,\u0003,\u0003,\u0003,\u0003,\u0003,\u0007,\u0675\n,\f,\u000e,\u0678",
    "\u000b,\u0005,\u067a\n,\u0003,\u0005,\u067d\n,\u0003,\u0003,\u0003,",
    "\u0005,\u0682\n,\u0005,\u0684\n,\u0003-\u0003-\u0003-\u0003.\u0003.",
    "\u0003.\u0003.\u0003.\u0003.\u0003.\u0005.\u0690\n.\u0003.\u0003.\u0003",
    ".\u0003.\u0003.\u0005.\u0697\n.\u0003.\u0003.\u0003.\u0003.\u0003.\u0005",
    ".\u069e\n.\u0003.\u0007.\u06a1\n.\f.\u000e.\u06a4\u000b.\u0003/\u0003",
    "/\u0003/\u0003/\u0003/\u0003/\u0003/\u0003/\u0003/\u0005/\u06af\n/\u0003",
    "0\u00030\u00050\u06b3\n0\u00030\u00030\u00050\u06b7\n0\u00031\u0003",
    "1\u00061\u06bb\n1\r1\u000e1\u06bc\u00032\u00032\u00052\u06c1\n2\u0003",
    "2\u00032\u00032\u00032\u00072\u06c7\n2\f2\u000e2\u06ca\u000b2\u0003",
    "2\u00052\u06cd\n2\u00032\u00052\u06d0\n2\u00032\u00052\u06d3\n2\u0003",
    "2\u00052\u06d6\n2\u00032\u00032\u00052\u06da\n2\u00033\u00033\u0005",
    "3\u06de\n3\u00033\u00053\u06e1\n3\u00033\u00033\u00053\u06e5\n3\u0003",
    "3\u00073\u06e8\n3\f3\u000e3\u06eb\u000b3\u00033\u00053\u06ee\n3\u0003",
    "3\u00053\u06f1\n3\u00033\u00053\u06f4\n3\u00033\u00053\u06f7\n3\u0005",
    "3\u06f9\n3\u00034\u00034\u00034\u00034\u00034\u00034\u00034\u00034\u0003",
    "4\u00034\u00054\u0705\n4\u00034\u00054\u0708\n4\u00034\u00034\u0005",
    "4\u070c\n4\u00034\u00034\u00034\u00034\u00034\u00034\u00034\u00034\u0005",
    "4\u0716\n4\u00034\u00034\u00054\u071a\n4\u00054\u071c\n4\u00034\u0005",
    "4\u071f\n4\u00034\u00034\u00054\u0723\n4\u00035\u00035\u00075\u0727",
    "\n5\f5\u000e5\u072a\u000b5\u00035\u00055\u072d\n5\u00035\u00035\u0003",
    "6\u00036\u00036\u00037\u00037\u00037\u00037\u00057\u0738\n7\u00037\u0003",
    "7\u00037\u00038\u00038\u00038\u00038\u00038\u00058\u0742\n8\u00038\u0003",
    "8\u00038\u00039\u00039\u00039\u00039\u00039\u00039\u00039\u00059\u074e",
    "\n9\u0003:\u0003:\u0003:\u0003:\u0003:\u0003:\u0003:\u0003:\u0003:\u0003",
    ":\u0003:\u0007:\u075b\n:\f:\u000e:\u075e\u000b:\u0003:\u0003:\u0005",
    ":\u0762\n:\u0003;\u0003;\u0003;\u0007;\u0767\n;\f;\u000e;\u076a\u000b",
    ";\u0003<\u0003<\u0003<\u0003<\u0003=\u0003=\u0003=\u0003>\u0003>\u0003",
    ">\u0003?\u0003?\u0003?\u0005?\u0779\n?\u0003?\u0007?\u077c\n?\f?\u000e",
    "?\u077f\u000b?\u0003?\u0003?\u0003@\u0003@\u0003@\u0003@\u0003@\u0003",
    "@\u0007@\u0789\n@\f@\u000e@\u078c\u000b@\u0003@\u0003@\u0005@\u0790",
    "\n@\u0003A\u0003A\u0003A\u0003A\u0007A\u0796\nA\fA\u000eA\u0799\u000b",
    "A\u0003A\u0007A\u079c\nA\fA\u000eA\u079f\u000bA\u0003A\u0005A\u07a2",
    "\nA\u0003B\u0003B\u0003B\u0003B\u0003B\u0007B\u07a9\nB\fB\u000eB\u07ac",
    "\u000bB\u0003B\u0003B\u0003B\u0003B\u0003B\u0007B\u07b3\nB\fB\u000e",
    "B\u07b6\u000bB\u0003B\u0003B\u0003B\u0003B\u0003B\u0003B\u0003B\u0003",
    "B\u0003B\u0003B\u0007B\u07c2\nB\fB\u000eB\u07c5\u000bB\u0003B\u0003",
    "B\u0005B\u07c9\nB\u0005B\u07cb\nB\u0003C\u0003C\u0005C\u07cf\nC\u0003",
    "D\u0003D\u0003D\u0003D\u0005D\u07d5\nD\u0003D\u0003D\u0003D\u0003D\u0007",
    "D\u07db\nD\fD\u000eD\u07de\u000bD\u0003D\u0003D\u0003E\u0003E\u0003",
    "E\u0003E\u0007E\u07e6\nE\fE\u000eE\u07e9\u000bE\u0005E\u07eb\nE\u0003",
    "E\u0003E\u0005E\u07ef\nE\u0003F\u0003F\u0003F\u0003F\u0003F\u0003F\u0003",
    "F\u0003F\u0003F\u0003F\u0007F\u07fb\nF\fF\u000eF\u07fe\u000bF\u0003",
    "F\u0003F\u0003F\u0003G\u0003G\u0003G\u0003G\u0003G\u0007G\u0808\nG\f",
    "G\u000eG\u080b\u000bG\u0003G\u0003G\u0005G\u080f\nG\u0003H\u0003H\u0005",
    "H\u0813\nH\u0003H\u0005H\u0816\nH\u0003I\u0003I\u0003I\u0005I\u081b",
    "\nI\u0003I\u0003I\u0003I\u0003I\u0003I\u0007I\u0822\nI\fI\u000eI\u0825",
    "\u000bI\u0005I\u0827\nI\u0003I\u0003I\u0003I\u0005I\u082c\nI\u0003I",
    "\u0003I\u0003I\u0007I\u0831\nI\fI\u000eI\u0834\u000bI\u0005I\u0836\n",
    "I\u0003J\u0003J\u0003K\u0003K\u0007K\u083c\nK\fK\u000eK\u083f\u000b",
    "K\u0003L\u0003L\u0003L\u0003L\u0005L\u0845\nL\u0003L\u0003L\u0003L\u0003",
    "L\u0003L\u0005L\u084c\nL\u0003M\u0005M\u084f\nM\u0003M\u0003M\u0003",
    "M\u0005M\u0854\nM\u0003M\u0005M\u0857\nM\u0003M\u0003M\u0003M\u0005",
    "M\u085c\nM\u0003M\u0003M\u0005M\u0860\nM\u0003M\u0005M\u0863\nM\u0003",
    "M\u0005M\u0866\nM\u0003N\u0003N\u0003N\u0003N\u0005N\u086c\nN\u0003",
    "O\u0003O\u0003O\u0005O\u0871\nO\u0003O\u0003O\u0003P\u0005P\u0876\n",
    "P\u0003P\u0003P\u0003P\u0003P\u0003P\u0003P\u0003P\u0003P\u0003P\u0003",
    "P\u0003P\u0003P\u0003P\u0003P\u0003P\u0003P\u0005P\u0888\nP\u0005P\u088a",
    "\nP\u0003P\u0005P\u088d\nP\u0003Q\u0003Q\u0003Q\u0003Q\u0003R\u0003",
    "R\u0003R\u0007R\u0896\nR\fR\u000eR\u0899\u000bR\u0003S\u0003S\u0003",
    "S\u0003S\u0007S\u089f\nS\fS\u000eS\u08a2\u000bS\u0003S\u0003S\u0003",
    "T\u0003T\u0005T\u08a8\nT\u0003U\u0003U\u0003U\u0003U\u0007U\u08ae\n",
    "U\fU\u000eU\u08b1\u000bU\u0003U\u0003U\u0003V\u0003V\u0005V\u08b7\n",
    "V\u0003W\u0003W\u0005W\u08bb\nW\u0003W\u0003W\u0003W\u0003W\u0003W\u0003",
    "W\u0005W\u08c3\nW\u0003W\u0003W\u0003W\u0003W\u0003W\u0003W\u0005W\u08cb",
    "\nW\u0003W\u0003W\u0003W\u0003W\u0005W\u08d1\nW\u0003X\u0003X\u0003",
    "X\u0003X\u0007X\u08d7\nX\fX\u000eX\u08da\u000bX\u0003X\u0003X\u0003",
    "Y\u0003Y\u0003Y\u0003Y\u0003Y\u0007Y\u08e3\nY\fY\u000eY\u08e6\u000b",
    "Y\u0005Y\u08e8\nY\u0003Y\u0003Y\u0003Y\u0003Z\u0005Z\u08ee\nZ\u0003",
    "Z\u0003Z\u0005Z\u08f2\nZ\u0005Z\u08f4\nZ\u0003[\u0003[\u0003[\u0003",
    "[\u0003[\u0003[\u0003[\u0005[\u08fd\n[\u0003[\u0003[\u0003[\u0003[\u0003",
    "[\u0003[\u0003[\u0003[\u0003[\u0003[\u0005[\u0909\n[\u0005[\u090b\n",
    "[\u0003[\u0003[\u0003[\u0003[\u0003[\u0005[\u0912\n[\u0003[\u0003[\u0003",
    "[\u0003[\u0003[\u0005[\u0919\n[\u0003[\u0003[\u0003[\u0003[\u0005[\u091f",
    "\n[\u0003[\u0003[\u0003[\u0003[\u0005[\u0925\n[\u0005[\u0927\n[\u0003",
    "\\\u0003\\\u0003\\\u0007\\\u092c\n\\\f\\\u000e\\\u092f\u000b\\\u0003",
    "]\u0003]\u0003]\u0007]\u0934\n]\f]\u000e]\u0937\u000b]\u0003^\u0003",
    "^\u0003^\u0005^\u093c\n^\u0003^\u0003^\u0003_\u0003_\u0003_\u0005_\u0943",
    "\n_\u0003_\u0003_\u0003`\u0003`\u0005`\u0949\n`\u0003`\u0003`\u0005",
    "`\u094d\n`\u0005`\u094f\n`\u0003a\u0003a\u0003a\u0007a\u0954\na\fa\u000e",
    "a\u0957\u000ba\u0003b\u0003b\u0003b\u0003b\u0007b\u095d\nb\fb\u000e",
    "b\u0960\u000bb\u0003b\u0003b\u0003c\u0003c\u0005c\u0966\nc\u0003d\u0003",
    "d\u0003d\u0003d\u0003d\u0003d\u0007d\u096e\nd\fd\u000ed\u0971\u000b",
    "d\u0003d\u0003d\u0005d\u0975\nd\u0003e\u0003e\u0005e\u0979\ne\u0003",
    "f\u0003f\u0003g\u0003g\u0003g\u0003g\u0003g\u0003g\u0003g\u0003g\u0003",
    "g\u0003g\u0005g\u0987\ng\u0005g\u0989\ng\u0003g\u0003g\u0003g\u0003",
    "g\u0003g\u0003g\u0007g\u0991\ng\fg\u000eg\u0994\u000bg\u0003h\u0005",
    "h\u0997\nh\u0003h\u0003h\u0003h\u0003h\u0003h\u0003h\u0005h\u099f\n",
    "h\u0003h\u0003h\u0003h\u0003h\u0003h\u0007h\u09a6\nh\fh\u000eh\u09a9",
    "\u000bh\u0003h\u0003h\u0003h\u0005h\u09ae\nh\u0003h\u0003h\u0003h\u0003",
    "h\u0003h\u0003h\u0005h\u09b6\nh\u0003h\u0003h\u0003h\u0005h\u09bb\n",
    "h\u0003h\u0003h\u0003h\u0003h\u0003h\u0003h\u0003h\u0003h\u0007h\u09c5",
    "\nh\fh\u000eh\u09c8\u000bh\u0003h\u0003h\u0005h\u09cc\nh\u0003h\u0005",
    "h\u09cf\nh\u0003h\u0003h\u0003h\u0003h\u0005h\u09d5\nh\u0003h\u0003",
    "h\u0005h\u09d9\nh\u0003h\u0003h\u0003h\u0005h\u09de\nh\u0003h\u0003",
    "h\u0003h\u0005h\u09e3\nh\u0003h\u0003h\u0003h\u0005h\u09e8\nh\u0003",
    "i\u0003i\u0003i\u0003i\u0005i\u09ee\ni\u0003i\u0003i\u0003i\u0003i\u0003",
    "i\u0003i\u0003i\u0003i\u0003i\u0003i\u0003i\u0003i\u0003i\u0003i\u0003",
    "i\u0003i\u0003i\u0003i\u0003i\u0007i\u0a03\ni\fi\u000ei\u0a06\u000b",
    "i\u0003j\u0003j\u0003j\u0003j\u0006j\u0a0c\nj\rj\u000ej\u0a0d\u0003",
    "j\u0003j\u0005j\u0a12\nj\u0003j\u0003j\u0003j\u0003j\u0003j\u0006j\u0a19",
    "\nj\rj\u000ej\u0a1a\u0003j\u0003j\u0005j\u0a1f\nj\u0003j\u0003j\u0003",
    "j\u0003j\u0003j\u0003j\u0003j\u0003j\u0003j\u0003j\u0003j\u0003j\u0003",
    "j\u0003j\u0007j\u0a2f\nj\fj\u000ej\u0a32\u000bj\u0005j\u0a34\nj\u0003",
    "j\u0003j\u0003j\u0003j\u0003j\u0003j\u0005j\u0a3c\nj\u0003j\u0003j\u0003",
    "j\u0003j\u0003j\u0003j\u0003j\u0005j\u0a45\nj\u0003j\u0003j\u0003j\u0003",
    "j\u0003j\u0003j\u0003j\u0003j\u0003j\u0003j\u0003j\u0003j\u0003j\u0003",
    "j\u0003j\u0003j\u0003j\u0003j\u0003j\u0006j\u0a5a\nj\rj\u000ej\u0a5b",
    "\u0003j\u0003j\u0003j\u0003j\u0003j\u0003j\u0003j\u0003j\u0003j\u0005",
    "j\u0a67\nj\u0003j\u0003j\u0003j\u0007j\u0a6c\nj\fj\u000ej\u0a6f\u000b",
    "j\u0005j\u0a71\nj\u0003j\u0003j\u0003j\u0003j\u0003j\u0003j\u0003j\u0005",
    "j\u0a7a\nj\u0003j\u0003j\u0005j\u0a7e\nj\u0003j\u0003j\u0005j\u0a82",
    "\nj\u0003j\u0003j\u0003j\u0003j\u0003j\u0003j\u0003j\u0003j\u0006j\u0a8c",
    "\nj\rj\u000ej\u0a8d\u0003j\u0003j\u0003j\u0003j\u0003j\u0003j\u0003",
    "j\u0003j\u0003j\u0003j\u0003j\u0003j\u0003j\u0003j\u0003j\u0003j\u0003",
    "j\u0003j\u0003j\u0003j\u0003j\u0003j\u0003j\u0005j\u0aa7\nj\u0003j\u0003",
    "j\u0003j\u0003j\u0003j\u0005j\u0aae\nj\u0003j\u0005j\u0ab1\nj\u0003",
    "j\u0003j\u0003j\u0003j\u0003j\u0003j\u0003j\u0003j\u0003j\u0003j\u0003",
    "j\u0003j\u0003j\u0005j\u0ac0\nj\u0003j\u0003j\u0005j\u0ac4\nj\u0003",
    "j\u0003j\u0003j\u0003j\u0003j\u0003j\u0003j\u0003j\u0007j\u0ace\nj\f",
    "j\u000ej\u0ad1\u000bj\u0003k\u0003k\u0003k\u0003k\u0003k\u0003k\u0003",
    "k\u0003k\u0006k\u0adb\nk\rk\u000ek\u0adc\u0005k\u0adf\nk\u0003l\u0003",
    "l\u0003m\u0003m\u0003n\u0003n\u0003o\u0003o\u0003p\u0003p\u0003p\u0005",
    "p\u0aec\np\u0003q\u0003q\u0005q\u0af0\nq\u0003r\u0003r\u0003r\u0006",
    "r\u0af5\nr\rr\u000er\u0af6\u0003s\u0003s\u0003s\u0005s\u0afc\ns\u0003",
    "t\u0003t\u0003t\u0003t\u0003t\u0003u\u0005u\u0b04\nu\u0003u\u0003u\u0005",
    "u\u0b08\nu\u0003v\u0003v\u0003v\u0005v\u0b0d\nv\u0003w\u0003w\u0003",
    "w\u0003w\u0003w\u0003w\u0003w\u0003w\u0003w\u0003w\u0003w\u0003w\u0003",
    "w\u0003w\u0003w\u0005w\u0b1e\nw\u0003w\u0003w\u0005w\u0b22\nw\u0003",
    "w\u0003w\u0003w\u0003w\u0003w\u0007w\u0b29\nw\fw\u000ew\u0b2c\u000b",
    "w\u0003w\u0005w\u0b2f\nw\u0005w\u0b31\nw\u0003x\u0003x\u0003x\u0007",
    "x\u0b36\nx\fx\u000ex\u0b39\u000bx\u0003y\u0003y\u0003y\u0005y\u0b3e",
    "\ny\u0003y\u0005y\u0b41\ny\u0003y\u0005y\u0b44\ny\u0003z\u0003z\u0003",
    "z\u0007z\u0b49\nz\fz\u000ez\u0b4c\u000bz\u0003{\u0003{\u0003{\u0005",
    "{\u0b51\n{\u0003{\u0005{\u0b54\n{\u0003|\u0003|\u0005|\u0b58\n|\u0003",
    "}\u0005}\u0b5b\n}\u0003}\u0003}\u0003}\u0003}\u0003}\u0003}\u0007}\u0b63",
    "\n}\f}\u000e}\u0b66\u000b}\u0003~\u0005~\u0b69\n~\u0003~\u0003~\u0003",
    "~\u0003~\u0003~\u0003~\u0003~\u0003~\u0003~\u0003~\u0003~\u0005~\u0b76",
    "\n~\u0003~\u0007~\u0b79\n~\f~\u000e~\u0b7c\u000b~\u0003\u007f\u0003",
    "\u007f\u0003\u007f\u0003\u0080\u0003\u0080\u0003\u0080\u0007\u0080\u0b84",
    "\n\u0080\f\u0080\u000e\u0080\u0b87\u000b\u0080\u0003\u0081\u0003\u0081",
    "\u0005\u0081\u0b8b\n\u0081\u0003\u0082\u0003\u0082\u0003\u0082\u0003",
    "\u0082\u0003\u0082\u0003\u0082\u0003\u0082\u0003\u0082\u0003\u0082\u0003",
    "\u0082\u0005\u0082\u0b97\n\u0082\u0003\u0083\u0003\u0083\u0003\u0083",
    "\u0003\u0083\u0003\u0083\u0003\u0083\u0005\u0083\u0b9f\n\u0083\u0003",
    "\u0084\u0003\u0084\u0007\u0084\u0ba3\n\u0084\f\u0084\u000e\u0084\u0ba6",
    "\u000b\u0084\u0003\u0085\u0003\u0085\u0003\u0085\u0003\u0085\u0003\u0085",
    "\u0005\u0085\u0bad\n\u0085\u0003\u0086\u0003\u0086\u0003\u0086\u0005",
    "\u0086\u0bb2\n\u0086\u0003\u0087\u0003\u0087\u0003\u0087\u0003\u0087",
    "\u0003\u0087\u0003\u0087\u0003\u0088\u0003\u0088\u0003\u0088\u0005\u0088",
    "\u0bbd\n\u0088\u0003\u0088\u0003\u0088\u0003\u0088\u0003\u0088\u0003",
    "\u0088\u0003\u0088\u0005\u0088\u0bc5\n\u0088\u0003\u0088\u0003\u0088",
    "\u0003\u0088\u0005\u0088\u0bca\n\u0088\u0003\u0088\u0005\u0088\u0bcd",
    "\n\u0088\u0003\u0089\u0003\u0089\u0003\u0089\u0007\u0089\u0bd2\n\u0089",
    "\f\u0089\u000e\u0089\u0bd5\u000b\u0089\u0003\u008a\u0003\u008a\u0003",
    "\u008a\u0003\u008a\u0003\u008a\u0005\u008a\u0bdc\n\u008a\u0003\u008a",
    "\u0005\u008a\u0bdf\n\u008a\u0003\u008b\u0003\u008b\u0003\u008b\u0003",
    "\u008b\u0003\u008b\u0003\u008c\u0003\u008c\u0003\u008c\u0003\u008c\u0007",
    "\u008c\u0bea\n\u008c\f\u008c\u000e\u008c\u0bed\u000b\u008c\u0003\u008d",
    "\u0003\u008d\u0003\u008d\u0003\u008d\u0003\u008e\u0003\u008e\u0003\u008e",
    "\u0003\u008e\u0003\u008e\u0003\u008e\u0003\u008e\u0003\u008e\u0003\u008e",
    "\u0003\u008e\u0003\u008e\u0007\u008e\u0bfe\n\u008e\f\u008e\u000e\u008e",
    "\u0c01\u000b\u008e\u0003\u008e\u0003\u008e\u0003\u008e\u0003\u008e\u0003",
    "\u008e\u0007\u008e\u0c08\n\u008e\f\u008e\u000e\u008e\u0c0b\u000b\u008e",
    "\u0005\u008e\u0c0d\n\u008e\u0003\u008e\u0003\u008e\u0003\u008e\u0003",
    "\u008e\u0003\u008e\u0007\u008e\u0c14\n\u008e\f\u008e\u000e\u008e\u0c17",
    "\u000b\u008e\u0005\u008e\u0c19\n\u008e\u0005\u008e\u0c1b\n\u008e\u0003",
    "\u008e\u0005\u008e\u0c1e\n\u008e\u0003\u008e\u0005\u008e\u0c21\n\u008e",
    "\u0003\u008f\u0003\u008f\u0003\u008f\u0003\u008f\u0003\u008f\u0003\u008f",
    "\u0003\u008f\u0003\u008f\u0003\u008f\u0003\u008f\u0003\u008f\u0003\u008f",
    "\u0003\u008f\u0003\u008f\u0003\u008f\u0003\u008f\u0005\u008f\u0c33\n",
    "\u008f\u0003\u0090\u0003\u0090\u0003\u0090\u0003\u0090\u0003\u0090\u0003",
    "\u0090\u0003\u0090\u0005\u0090\u0c3c\n\u0090\u0003\u0091\u0003\u0091",
    "\u0003\u0091\u0007\u0091\u0c41\n\u0091\f\u0091\u000e\u0091\u0c44\u000b",
    "\u0091\u0003\u0092\u0003\u0092\u0003\u0092\u0003\u0092\u0005\u0092\u0c4a",
    "\n\u0092\u0003\u0093\u0003\u0093\u0003\u0093\u0007\u0093\u0c4f\n\u0093",
    "\f\u0093\u000e\u0093\u0c52\u000b\u0093\u0003\u0094\u0003\u0094\u0003",
    "\u0094\u0003\u0095\u0003\u0095\u0006\u0095\u0c59\n\u0095\r\u0095\u000e",
    "\u0095\u0c5a\u0003\u0095\u0005\u0095\u0c5e\n\u0095\u0003\u0096\u0003",
    "\u0096\u0003\u0096\u0005\u0096\u0c63\n\u0096\u0003\u0097\u0003\u0097",
    "\u0003\u0097\u0003\u0097\u0003\u0097\u0003\u0097\u0005\u0097\u0c6b\n",
    "\u0097\u0003\u0098\u0003\u0098\u0003\u0099\u0003\u0099\u0005\u0099\u0c71",
    "\n\u0099\u0003\u0099\u0003\u0099\u0003\u0099\u0005\u0099\u0c76\n\u0099",
    "\u0003\u0099\u0003\u0099\u0003\u0099\u0005\u0099\u0c7b\n\u0099\u0003",
    "\u0099\u0003\u0099\u0005\u0099\u0c7f\n\u0099\u0003\u0099\u0003\u0099",
    "\u0005\u0099\u0c83\n\u0099\u0003\u0099\u0003\u0099\u0005\u0099\u0c87",
    "\n\u0099\u0003\u0099\u0003\u0099\u0005\u0099\u0c8b\n\u0099\u0003\u0099",
    "\u0003\u0099\u0005\u0099\u0c8f\n\u0099\u0003\u0099\u0003\u0099\u0005",
    "\u0099\u0c93\n\u0099\u0003\u0099\u0003\u0099\u0005\u0099\u0c97\n\u0099",
    "\u0003\u0099\u0005\u0099\u0c9a\n\u0099\u0003\u009a\u0003\u009a\u0003",
    "\u009a\u0003\u009a\u0003\u009a\u0003\u009a\u0003\u009a\u0005\u009a\u0ca3",
    "\n\u009a\u0003\u009b\u0003\u009b\u0003\u009c\u0003\u009c\u0003\u009d",
    "\u0003\u009d\u0003\u009d\u000b\u03b7\u03f9\u0403\u0414\u0422\u042b\u0434",
    "\u043d\u0444\u0006Z\u00cc\u00d0\u00d2\u009e\u0002\u0004\u0006\b\n\f",
    "\u000e\u0010\u0012\u0014\u0016\u0018\u001a\u001c\u001e \"$&(*,.0246",
    "8:<>@BDFHJLNPRTVXZ\\^`bdfhjlnprtvxz|~\u0080\u0082\u0084\u0086\u0088",
    "\u008a\u008c\u008e\u0090\u0092\u0094\u0096\u0098\u009a\u009c\u009e\u00a0",
    "\u00a2\u00a4\u00a6\u00a8\u00aa\u00ac\u00ae\u00b0\u00b2\u00b4\u00b6\u00b8",
    "\u00ba\u00bc\u00be\u00c0\u00c2\u00c4\u00c6\u00c8\u00ca\u00cc\u00ce\u00d0",
    "\u00d2\u00d4\u00d6\u00d8\u00da\u00dc\u00de\u00e0\u00e2\u00e4\u00e6\u00e8",
    "\u00ea\u00ec\u00ee\u00f0\u00f2\u00f4\u00f6\u00f8\u00fa\u00fc\u00fe\u0100",
    "\u0102\u0104\u0106\u0108\u010a\u010c\u010e\u0110\u0112\u0114\u0116\u0118",
    "\u011a\u011c\u011e\u0120\u0122\u0124\u0126\u0128\u012a\u012c\u012e\u0130",
    "\u0132\u0134\u0136\u0138\u00020\u0004\u0002BB\u00b3\u00b3\u0004\u0002",
    "\"\"\u00c2\u00c2\u0004\u0002AA\u0095\u0095\u0004\u0002ffrr\u0003\u0002",
    "-.\u0004\u0002\u00e3\u00e3\u0103\u0103\u0004\u0002\u0011\u0011%%\u0007",
    "\u0002**66XXee\u008e\u008e\u0003\u0002FG\u0004\u0002XXee\u0004\u0002",
    "\u0099\u0099\u0129\u0129\u0005\u0002\u000e\u000eNN\u00e2\u00e2\u0004",
    "\u0002\u000e\u000e\u0088\u0088\u0004\u0002\u008a\u008a\u0129\u0129\u0005",
    "\u0002@@\u0094\u0094\u00cc\u00cc\u0006\u0002SSyy\u00d4\u00d4\u00f9\u00f9",
    "\u0005\u0002SS\u00d4\u00d4\u00f9\u00f9\u0004\u0002\u0019\u0019FF\u0004",
    "\u0002``\u0080\u0080\u0004\u0002\u0010\u0010KK\u0004\u0002\u012d\u012d",
    "\u012f\u012f\u0005\u0002\u0010\u0010\u0015\u0015\u00d8\u00d8\u0005\u0002",
    "[[\u00f2\u00f2\u00fb\u00fb\u0004\u0002\u011f\u0120\u0124\u0124\u0004",
    "\u0002MM\u0121\u0123\u0004\u0002\u011f\u0120\u0127\u0127\u0004\u0002",
    ";;==\u0004\u0002$$\u00f4\u00f4\u0004\u0002pp\u00c1\u00c1\u0003\u0002",
    "\u00e0\u00e1\u0004\u0002\u0005\u0005ff\u0004\u0002\u0005\u0005bb\u0005",
    "\u0002\u001d\u001d\u0083\u0083\u00ed\u00ed\u0003\u0002\u0117\u011e\u0004",
    "\u0002MM\u011f\u0128\u0006\u0002\u0013\u0013rr\u0098\u0098\u00a0\u00a0",
    "\u0004\u0002[[\u00f2\u00f2\u0003\u0002\u011f\u0120\u0004\u0002LL\u00a9",
    "\u00a9\u0004\u0002\u00a1\u00a1\u00d9\u00d9\u0004\u0002aa\u00b0\u00b0",
    "\u0003\u0002\u012e\u012f\u0004\u0002NN\u00d3\u00d32\u0002\u000e\u000f",
    "\u0011\u0012\u0014\u0014\u0016\u0017\u0019\u001a\u001c\u001c\u001e\"",
    "%%\'*,,.4669:?JLNRRTZ]]_adehjmmoqstvxzz}}\u007f\u0082\u0085\u0095\u0097",
    "\u0097\u009a\u009b\u009e\u009f\u00a2\u00a2\u00a4\u00a5\u00a7\u00b0\u00b2",
    "\u00ba\u00bc\u00c3\u00c5\u00cc\u00ce\u00d1\u00d3\u00d7\u00d9\u00e2\u00e4",
    "\u00e8\u00ec\u00ec\u00ee\u00f8\u00fc\u00ff\u0102\u0104\u0107\u0107\u0109",
    "\u0109\u0011\u0002\u0014\u001488SSgguuyy~~\u0084\u0084\u0096\u0096\u009c",
    "\u009c\u00c4\u00c4\u00ce\u00ce\u00d4\u00d4\u00f9\u00f9\u0101\u0101\u0013",
    "\u0002\u000e\u0013\u001579RTfhtvxz}\u007f\u0083\u0085\u0095\u0097\u009b",
    "\u009d\u00c3\u00c5\u00cd\u00cf\u00d3\u00d5\u00f8\u00fa\u0100\u0102\u0109",
    "\u0114\u0114\u0002\u0e8f\u0002\u013a\u0003\u0002\u0002\u0002\u0004\u0143",
    "\u0003\u0002\u0002\u0002\u0006\u0146\u0003\u0002\u0002\u0002\b\u0149",
    "\u0003\u0002\u0002\u0002\n\u014c\u0003\u0002\u0002\u0002\f\u014f\u0003",
    "\u0002\u0002\u0002\u000e\u0152\u0003\u0002\u0002\u0002\u0010\u0447\u0003",
    "\u0002\u0002\u0002\u0012\u0449\u0003\u0002\u0002\u0002\u0014\u044b\u0003",
    "\u0002\u0002\u0002\u0016\u04f5\u0003\u0002\u0002\u0002\u0018\u04f7\u0003",
    "\u0002\u0002\u0002\u001a\u0508\u0003\u0002\u0002\u0002\u001c\u050e\u0003",
    "\u0002\u0002\u0002\u001e\u051a\u0003\u0002\u0002\u0002 \u0527\u0003",
    "\u0002\u0002\u0002\"\u052a\u0003\u0002\u0002\u0002$\u052e\u0003\u0002",
    "\u0002\u0002&\u0570\u0003\u0002\u0002\u0002(\u0572\u0003\u0002\u0002",
    "\u0002*\u0576\u0003\u0002\u0002\u0002,\u0582\u0003\u0002\u0002\u0002",
    ".\u0587\u0003\u0002\u0002\u00020\u058e\u0003\u0002\u0002\u00022\u0590",
    "\u0003\u0002\u0002\u00024\u0598\u0003\u0002\u0002\u00026\u05a1\u0003",
    "\u0002\u0002\u00028\u05ac\u0003\u0002\u0002\u0002:\u05bc\u0003\u0002",
    "\u0002\u0002<\u05bf\u0003\u0002\u0002\u0002>\u05c2\u0003\u0002\u0002",
    "\u0002@\u05c5\u0003\u0002\u0002\u0002B\u05d0\u0003\u0002\u0002\u0002",
    "D\u05e0\u0003\u0002\u0002\u0002F\u05e6\u0003\u0002\u0002\u0002H\u05e8",
    "\u0003\u0002\u0002\u0002J\u05f3\u0003\u0002\u0002\u0002L\u0604\u0003",
    "\u0002\u0002\u0002N\u060b\u0003\u0002\u0002\u0002P\u060d\u0003\u0002",
    "\u0002\u0002R\u0613\u0003\u0002\u0002\u0002T\u0649\u0003\u0002\u0002",
    "\u0002V\u0655\u0003\u0002\u0002\u0002X\u0685\u0003\u0002\u0002\u0002",
    "Z\u0688\u0003\u0002\u0002\u0002\\\u06ae\u0003\u0002\u0002\u0002^\u06b0",
    "\u0003\u0002\u0002\u0002`\u06b8\u0003\u0002\u0002\u0002b\u06d9\u0003",
    "\u0002\u0002\u0002d\u06f8\u0003\u0002\u0002\u0002f\u0704\u0003\u0002",
    "\u0002\u0002h\u0724\u0003\u0002\u0002\u0002j\u0730\u0003\u0002\u0002",
    "\u0002l\u0733\u0003\u0002\u0002\u0002n\u073c\u0003\u0002\u0002\u0002",
    "p\u074d\u0003\u0002\u0002\u0002r\u0761\u0003\u0002\u0002\u0002t\u0763",
    "\u0003\u0002\u0002\u0002v\u076b\u0003\u0002\u0002\u0002x\u076f\u0003",
    "\u0002\u0002\u0002z\u0772\u0003\u0002\u0002\u0002|\u0775\u0003\u0002",
    "\u0002\u0002~\u078f\u0003\u0002\u0002\u0002\u0080\u0791\u0003\u0002",
    "\u0002\u0002\u0082\u07ca\u0003\u0002\u0002\u0002\u0084\u07ce\u0003\u0002",
    "\u0002\u0002\u0086\u07d4\u0003\u0002\u0002\u0002\u0088\u07ee\u0003\u0002",
    "\u0002\u0002\u008a\u07f0\u0003\u0002\u0002\u0002\u008c\u080e\u0003\u0002",
    "\u0002\u0002\u008e\u0810\u0003\u0002\u0002\u0002\u0090\u0817\u0003\u0002",
    "\u0002\u0002\u0092\u0837\u0003\u0002\u0002\u0002\u0094\u0839\u0003\u0002",
    "\u0002\u0002\u0096\u084b\u0003\u0002\u0002\u0002\u0098\u0865\u0003\u0002",
    "\u0002\u0002\u009a\u086b\u0003\u0002\u0002\u0002\u009c\u086d\u0003\u0002",
    "\u0002\u0002\u009e\u088c\u0003\u0002\u0002\u0002\u00a0\u088e\u0003\u0002",
    "\u0002\u0002\u00a2\u0892\u0003\u0002\u0002\u0002\u00a4\u089a\u0003\u0002",
    "\u0002\u0002\u00a6\u08a5\u0003\u0002\u0002\u0002\u00a8\u08a9\u0003\u0002",
    "\u0002\u0002\u00aa\u08b4\u0003\u0002\u0002\u0002\u00ac\u08d0\u0003\u0002",
    "\u0002\u0002\u00ae\u08d2\u0003\u0002\u0002\u0002\u00b0\u08dd\u0003\u0002",
    "\u0002\u0002\u00b2\u08f3\u0003\u0002\u0002\u0002\u00b4\u0926\u0003\u0002",
    "\u0002\u0002\u00b6\u0928\u0003\u0002\u0002\u0002\u00b8\u0930\u0003\u0002",
    "\u0002\u0002\u00ba\u093b\u0003\u0002\u0002\u0002\u00bc\u0942\u0003\u0002",
    "\u0002\u0002\u00be\u0946\u0003\u0002\u0002\u0002\u00c0\u0950\u0003\u0002",
    "\u0002\u0002\u00c2\u0958\u0003\u0002\u0002\u0002\u00c4\u0965\u0003\u0002",
    "\u0002\u0002\u00c6\u0974\u0003\u0002\u0002\u0002\u00c8\u0978\u0003\u0002",
    "\u0002\u0002\u00ca\u097a\u0003\u0002\u0002\u0002\u00cc\u0988\u0003\u0002",
    "\u0002\u0002\u00ce\u09e7\u0003\u0002\u0002\u0002\u00d0\u09ed\u0003\u0002",
    "\u0002\u0002\u00d2\u0ac3\u0003\u0002\u0002\u0002\u00d4\u0ade\u0003\u0002",
    "\u0002\u0002\u00d6\u0ae0\u0003\u0002\u0002\u0002\u00d8\u0ae2\u0003\u0002",
    "\u0002\u0002\u00da\u0ae4\u0003\u0002\u0002\u0002\u00dc\u0ae6\u0003\u0002",
    "\u0002\u0002\u00de\u0ae8\u0003\u0002\u0002\u0002\u00e0\u0aed\u0003\u0002",
    "\u0002\u0002\u00e2\u0af4\u0003\u0002\u0002\u0002\u00e4\u0af8\u0003\u0002",
    "\u0002\u0002\u00e6\u0afd\u0003\u0002\u0002\u0002\u00e8\u0b07\u0003\u0002",
    "\u0002\u0002\u00ea\u0b0c\u0003\u0002\u0002\u0002\u00ec\u0b30\u0003\u0002",
    "\u0002\u0002\u00ee\u0b32\u0003\u0002\u0002\u0002\u00f0\u0b3a\u0003\u0002",
    "\u0002\u0002\u00f2\u0b45\u0003\u0002\u0002\u0002\u00f4\u0b4d\u0003\u0002",
    "\u0002\u0002\u00f6\u0b57\u0003\u0002\u0002\u0002\u00f8\u0b5a\u0003\u0002",
    "\u0002\u0002\u00fa\u0b68\u0003\u0002\u0002\u0002\u00fc\u0b7d\u0003\u0002",
    "\u0002\u0002\u00fe\u0b80\u0003\u0002\u0002\u0002\u0100\u0b8a\u0003\u0002",
    "\u0002\u0002\u0102\u0b96\u0003\u0002\u0002\u0002\u0104\u0b9e\u0003\u0002",
    "\u0002\u0002\u0106\u0ba0\u0003\u0002\u0002\u0002\u0108\u0bac\u0003\u0002",
    "\u0002\u0002\u010a\u0bae\u0003\u0002\u0002\u0002\u010c\u0bb3\u0003\u0002",
    "\u0002\u0002\u010e\u0bbc\u0003\u0002\u0002\u0002\u0110\u0bce\u0003\u0002",
    "\u0002\u0002\u0112\u0bd6\u0003\u0002\u0002\u0002\u0114\u0be0\u0003\u0002",
    "\u0002\u0002\u0116\u0be5\u0003\u0002\u0002\u0002\u0118\u0bee\u0003\u0002",
    "\u0002\u0002\u011a\u0c20\u0003\u0002\u0002\u0002\u011c\u0c32\u0003\u0002",
    "\u0002\u0002\u011e\u0c3b\u0003\u0002\u0002\u0002\u0120\u0c3d\u0003\u0002",
    "\u0002\u0002\u0122\u0c49\u0003\u0002\u0002\u0002\u0124\u0c4b\u0003\u0002",
    "\u0002\u0002\u0126\u0c53\u0003\u0002\u0002\u0002\u0128\u0c5d\u0003\u0002",
    "\u0002\u0002\u012a\u0c62\u0003\u0002\u0002\u0002\u012c\u0c6a\u0003\u0002",
    "\u0002\u0002\u012e\u0c6c\u0003\u0002\u0002\u0002\u0130\u0c99\u0003\u0002",
    "\u0002\u0002\u0132\u0ca2\u0003\u0002\u0002\u0002\u0134\u0ca4\u0003\u0002",
    "\u0002\u0002\u0136\u0ca6\u0003\u0002\u0002\u0002\u0138\u0ca8\u0003\u0002",
    "\u0002\u0002\u013a\u013e\u0005\u0010\t\u0002\u013b\u013d\u0007\u0003",
    "\u0002\u0002\u013c\u013b\u0003\u0002\u0002\u0002\u013d\u0140\u0003\u0002",
    "\u0002\u0002\u013e\u013c\u0003\u0002\u0002\u0002\u013e\u013f\u0003\u0002",
    "\u0002\u0002\u013f\u0141\u0003\u0002\u0002\u0002\u0140\u013e\u0003\u0002",
    "\u0002\u0002\u0141\u0142\u0007\u0002\u0002\u0003\u0142\u0003\u0003\u0002",
    "\u0002\u0002\u0143\u0144\u0005\u00be`\u0002\u0144\u0145\u0007\u0002",
    "\u0002\u0003\u0145\u0005\u0003\u0002\u0002\u0002\u0146\u0147\u0005\u00ba",
    "^\u0002\u0147\u0148\u0007\u0002\u0002\u0003\u0148\u0007\u0003\u0002",
    "\u0002\u0002\u0149\u014a\u0005\u00b8]\u0002\u014a\u014b\u0007\u0002",
    "\u0002\u0003\u014b\t\u0003\u0002\u0002\u0002\u014c\u014d\u0005\u00bc",
    "_\u0002\u014d\u014e\u0007\u0002\u0002\u0003\u014e\u000b\u0003\u0002",
    "\u0002\u0002\u014f\u0150\u0005\u00ecw\u0002\u0150\u0151\u0007\u0002",
    "\u0002\u0003\u0151\r\u0003\u0002\u0002\u0002\u0152\u0153\u0005\u00f2",
    "z\u0002\u0153\u0154\u0007\u0002\u0002\u0003\u0154\u000f\u0003\u0002",
    "\u0002\u0002\u0155\u0448\u0005$\u0013\u0002\u0156\u0158\u00054\u001b",
    "\u0002\u0157\u0156\u0003\u0002\u0002\u0002\u0157\u0158\u0003\u0002\u0002",
    "\u0002\u0158\u0159\u0003\u0002\u0002\u0002\u0159\u0448\u0005T+\u0002",
    "\u015a\u015c\u0007\u00ff\u0002\u0002\u015b\u015d\u0007\u0094\u0002\u0002",
    "\u015c\u015b\u0003\u0002\u0002\u0002\u015c\u015d\u0003\u0002\u0002\u0002",
    "\u015d\u015e\u0003\u0002\u0002\u0002\u015e\u0448\u0005\u00b8]\u0002",
    "\u015f\u0160\u00077\u0002\u0002\u0160\u0164\u0005.\u0018\u0002\u0161",
    "\u0162\u0007o\u0002\u0002\u0162\u0163\u0007\u0098\u0002\u0002\u0163",
    "\u0165\u0007U\u0002\u0002\u0164\u0161\u0003\u0002\u0002\u0002\u0164",
    "\u0165\u0003\u0002\u0002\u0002\u0165\u0166\u0003\u0002\u0002\u0002\u0166",
    "\u016e\u0005\u00b8]\u0002\u0167\u016d\u0005\"\u0012\u0002\u0168\u016d",
    "\u0005 \u0011\u0002\u0169\u016a\u0007\u0108\u0002\u0002\u016a\u016b",
    "\t\u0002\u0002\u0002\u016b\u016d\u0005@!\u0002\u016c\u0167\u0003\u0002",
    "\u0002\u0002\u016c\u0168\u0003\u0002\u0002\u0002\u016c\u0169\u0003\u0002",
    "\u0002\u0002\u016d\u0170\u0003\u0002\u0002\u0002\u016e\u016c\u0003\u0002",
    "\u0002\u0002\u016e\u016f\u0003\u0002\u0002\u0002\u016f\u0448\u0003\u0002",
    "\u0002\u0002\u0170\u016e\u0003\u0002\u0002\u0002\u0171\u0172\u0007\u0011",
    "\u0002\u0002\u0172\u0173\u0005.\u0018\u0002\u0173\u0174\u0005\u00b8",
    "]\u0002\u0174\u0175\u0007\u00d3\u0002\u0002\u0175\u0176\t\u0002\u0002",
    "\u0002\u0176\u0177\u0005@!\u0002\u0177\u0448\u0003\u0002\u0002\u0002",
    "\u0178\u0179\u0007\u0011\u0002\u0002\u0179\u017a\u0005.\u0018\u0002",
    "\u017a\u017b\u0005\u00b8]\u0002\u017b\u017c\u0007\u00d3\u0002\u0002",
    "\u017c\u017d\u0005 \u0011\u0002\u017d\u0448\u0003\u0002\u0002\u0002",
    "\u017e\u017f\u0007N\u0002\u0002\u017f\u0182\u0005.\u0018\u0002\u0180",
    "\u0181\u0007o\u0002\u0002\u0181\u0183\u0007U\u0002\u0002\u0182\u0180",
    "\u0003\u0002\u0002\u0002\u0182\u0183\u0003\u0002\u0002\u0002\u0183\u0184",
    "\u0003\u0002\u0002\u0002\u0184\u0186\u0005\u00b8]\u0002\u0185\u0187",
    "\t\u0003\u0002\u0002\u0186\u0185\u0003\u0002\u0002\u0002\u0186\u0187",
    "\u0003\u0002\u0002\u0002\u0187\u0448\u0003\u0002\u0002\u0002\u0188\u0189",
    "\u0007\u00d6\u0002\u0002\u0189\u018c\t\u0004\u0002\u0002\u018a\u018b",
    "\t\u0005\u0002\u0002\u018b\u018d\u0005\u00b8]\u0002\u018c\u018a\u0003",
    "\u0002\u0002\u0002\u018c\u018d\u0003\u0002\u0002\u0002\u018d\u0192\u0003",
    "\u0002\u0002\u0002\u018e\u0190\u0007\u0085\u0002\u0002\u018f\u018e\u0003",
    "\u0002\u0002\u0002\u018f\u0190\u0003\u0002\u0002\u0002\u0190\u0191\u0003",
    "\u0002\u0002\u0002\u0191\u0193\u0007\u0129\u0002\u0002\u0192\u018f\u0003",
    "\u0002\u0002\u0002\u0192\u0193\u0003\u0002\u0002\u0002\u0193\u0448\u0003",
    "\u0002\u0002\u0002\u0194\u01a0\u0005\u0018\r\u0002\u0195\u0196\u0007",
    "\u0004\u0002\u0002\u0196\u019b\u0005\u00f2z\u0002\u0197\u0198\u0007",
    "\u0005\u0002\u0002\u0198\u019a\u0005\u00f6|\u0002\u0199\u0197\u0003",
    "\u0002\u0002\u0002\u019a\u019d\u0003\u0002\u0002\u0002\u019b\u0199\u0003",
    "\u0002\u0002\u0002\u019b\u019c\u0003\u0002\u0002\u0002\u019c\u019e\u0003",
    "\u0002\u0002\u0002\u019d\u019b\u0003\u0002\u0002\u0002\u019e\u019f\u0007",
    "\u0006\u0002\u0002\u019f\u01a1\u0003\u0002\u0002\u0002\u01a0\u0195\u0003",
    "\u0002\u0002\u0002\u01a0\u01a1\u0003\u0002\u0002\u0002\u01a1\u01a3\u0003",
    "\u0002\u0002\u0002\u01a2\u01a4\u00058\u001d\u0002\u01a3\u01a2\u0003",
    "\u0002\u0002\u0002\u01a3\u01a4\u0003\u0002\u0002\u0002\u01a4\u01a5\u0003",
    "\u0002\u0002\u0002\u01a5\u01aa\u0005:\u001e\u0002\u01a6\u01a8\u0007",
    "\u0018\u0002\u0002\u01a7\u01a6\u0003\u0002\u0002\u0002\u01a7\u01a8\u0003",
    "\u0002\u0002\u0002\u01a8\u01a9\u0003\u0002\u0002\u0002\u01a9\u01ab\u0005",
    "$\u0013\u0002\u01aa\u01a7\u0003\u0002\u0002\u0002\u01aa\u01ab\u0003",
    "\u0002\u0002\u0002\u01ab\u0448\u0003\u0002\u0002\u0002\u01ac\u01ad\u0007",
    "7\u0002\u0002\u01ad\u01b1\u0007\u00e3\u0002\u0002\u01ae\u01af\u0007",
    "o\u0002\u0002\u01af\u01b0\u0007\u0098\u0002\u0002\u01b0\u01b2\u0007",
    "U\u0002\u0002\u01b1\u01ae\u0003\u0002\u0002\u0002\u01b1\u01b2\u0003",
    "\u0002\u0002\u0002\u01b2\u01b3\u0003\u0002\u0002\u0002\u01b3\u01b4\u0005",
    "\u00ba^\u0002\u01b4\u01b5\u0007\u0085\u0002\u0002\u01b5\u01be\u0005",
    "\u00ba^\u0002\u01b6\u01bd\u00058\u001d\u0002\u01b7\u01bd\u0005\u00b4",
    "[\u0002\u01b8\u01bd\u0005L\'\u0002\u01b9\u01bd\u0005 \u0011\u0002\u01ba",
    "\u01bb\u0007\u00e6\u0002\u0002\u01bb\u01bd\u0005@!\u0002\u01bc\u01b6",
    "\u0003\u0002\u0002\u0002\u01bc\u01b7\u0003\u0002\u0002\u0002\u01bc\u01b8",
    "\u0003\u0002\u0002\u0002\u01bc\u01b9\u0003\u0002\u0002\u0002\u01bc\u01ba",
    "\u0003\u0002\u0002\u0002\u01bd\u01c0\u0003\u0002\u0002\u0002\u01be\u01bc",
    "\u0003\u0002\u0002\u0002\u01be\u01bf\u0003\u0002\u0002\u0002\u01bf\u0448",
    "\u0003\u0002\u0002\u0002\u01c0\u01be\u0003\u0002\u0002\u0002\u01c1\u01cd",
    "\u0005\u001a\u000e\u0002\u01c2\u01c3\u0007\u0004\u0002\u0002\u01c3\u01c8",
    "\u0005\u00f2z\u0002\u01c4\u01c5\u0007\u0005\u0002\u0002\u01c5\u01c7",
    "\u0005\u00f6|\u0002\u01c6\u01c4\u0003\u0002\u0002\u0002\u01c7\u01ca",
    "\u0003\u0002\u0002\u0002\u01c8\u01c6\u0003\u0002\u0002\u0002\u01c8\u01c9",
    "\u0003\u0002\u0002\u0002\u01c9\u01cb\u0003\u0002\u0002\u0002\u01ca\u01c8",
    "\u0003\u0002\u0002\u0002\u01cb\u01cc\u0007\u0006\u0002\u0002\u01cc\u01ce",
    "\u0003\u0002\u0002\u0002\u01cd\u01c2\u0003\u0002\u0002\u0002\u01cd\u01ce",
    "\u0003\u0002\u0002\u0002\u01ce\u01d0\u0003\u0002\u0002\u0002\u01cf\u01d1",
    "\u00058\u001d\u0002\u01d0\u01cf\u0003\u0002\u0002\u0002\u01d0\u01d1",
    "\u0003\u0002\u0002\u0002\u01d1\u01d2\u0003\u0002\u0002\u0002\u01d2\u01d7",
    "\u0005:\u001e\u0002\u01d3\u01d5\u0007\u0018\u0002\u0002\u01d4\u01d3",
    "\u0003\u0002\u0002\u0002\u01d4\u01d5\u0003\u0002\u0002\u0002\u01d5\u01d6",
    "\u0003\u0002\u0002\u0002\u01d6\u01d8\u0005$\u0013\u0002\u01d7\u01d4",
    "\u0003\u0002\u0002\u0002\u01d7\u01d8\u0003\u0002\u0002\u0002\u01d8\u0448",
    "\u0003\u0002\u0002\u0002\u01d9\u01da\u0007\u0012\u0002\u0002\u01da\u01db",
    "\u0007\u00e3\u0002\u0002\u01db\u01dd\u0005\u00b8]\u0002\u01dc\u01de",
    "\u0005*\u0016\u0002\u01dd\u01dc\u0003\u0002\u0002\u0002\u01dd\u01de",
    "\u0003\u0002\u0002\u0002\u01de\u01df\u0003\u0002\u0002\u0002\u01df\u01e0",
    "\u00073\u0002\u0002\u01e0\u01e8\u0007\u00dc\u0002\u0002\u01e1\u01e9",
    "\u0005\u012a\u0096\u0002\u01e2\u01e3\u0007b\u0002\u0002\u01e3\u01e4",
    "\u0007.\u0002\u0002\u01e4\u01e9\u0005\u00a2R\u0002\u01e5\u01e6\u0007",
    "b\u0002\u0002\u01e6\u01e7\u0007\u0010\u0002\u0002\u01e7\u01e9\u0007",
    ".\u0002\u0002\u01e8\u01e1\u0003\u0002\u0002\u0002\u01e8\u01e2\u0003",
    "\u0002\u0002\u0002\u01e8\u01e5\u0003\u0002\u0002\u0002\u01e8\u01e9\u0003",
    "\u0002\u0002\u0002\u01e9\u0448\u0003\u0002\u0002\u0002\u01ea\u01eb\u0007",
    "\u0012\u0002\u0002\u01eb\u01ee\u0007\u00e4\u0002\u0002\u01ec\u01ed\t",
    "\u0005\u0002\u0002\u01ed\u01ef\u0005\u00b8]\u0002\u01ee\u01ec\u0003",
    "\u0002\u0002\u0002\u01ee\u01ef\u0003\u0002\u0002\u0002\u01ef\u01f0\u0003",
    "\u0002\u0002\u0002\u01f0\u01f1\u00073\u0002\u0002\u01f1\u01f3\u0007",
    "\u00dc\u0002\u0002\u01f2\u01f4\u0005\u012a\u0096\u0002\u01f3\u01f2\u0003",
    "\u0002\u0002\u0002\u01f3\u01f4\u0003\u0002\u0002\u0002\u01f4\u0448\u0003",
    "\u0002\u0002\u0002\u01f5\u01f6\u0007\u0011\u0002\u0002\u01f6\u01f7\u0007",
    "\u00e3\u0002\u0002\u01f7\u01f8\u0005\u00b8]\u0002\u01f8\u01f9\u0007",
    "\u000e\u0002\u0002\u01f9\u01fa\t\u0006\u0002\u0002\u01fa\u01fb\u0005",
    "\u00eex\u0002\u01fb\u0448\u0003\u0002\u0002\u0002\u01fc\u01fd\u0007",
    "\u0011\u0002\u0002\u01fd\u01fe\u0007\u00e3\u0002\u0002\u01fe\u01ff\u0005",
    "\u00b8]\u0002\u01ff\u0200\u0007\u000e\u0002\u0002\u0200\u0201\t\u0006",
    "\u0002\u0002\u0201\u0202\u0007\u0004\u0002\u0002\u0202\u0203\u0005\u00ee",
    "x\u0002\u0203\u0204\u0007\u0006\u0002\u0002\u0204\u0448\u0003\u0002",
    "\u0002\u0002\u0205\u0206\u0007\u0011\u0002\u0002\u0206\u0207\u0007\u00e3",
    "\u0002\u0002\u0207\u0208\u0005\u00b8]\u0002\u0208\u0209\u0007\u00bd",
    "\u0002\u0002\u0209\u020a\u0007-\u0002\u0002\u020a\u020b\u0005\u00b8",
    "]\u0002\u020b\u020c\u0007\u00eb\u0002\u0002\u020c\u020d\u0005\u0126",
    "\u0094\u0002\u020d\u0448\u0003\u0002\u0002\u0002\u020e\u020f\u0007\u0011",
    "\u0002\u0002\u020f\u0210\u0007\u00e3\u0002\u0002\u0210\u0211\u0005\u00b8",
    "]\u0002\u0211\u0212\u0007N\u0002\u0002\u0212\u0213\t\u0006\u0002\u0002",
    "\u0213\u0214\u0007\u0004\u0002\u0002\u0214\u0215\u0005\u00b6\\\u0002",
    "\u0215\u0216\u0007\u0006\u0002\u0002\u0216\u0448\u0003\u0002\u0002\u0002",
    "\u0217\u0218\u0007\u0011\u0002\u0002\u0218\u0219\u0007\u00e3\u0002\u0002",
    "\u0219\u021a\u0005\u00b8]\u0002\u021a\u021b\u0007N\u0002\u0002\u021b",
    "\u021c\t\u0006\u0002\u0002\u021c\u021d\u0005\u00b6\\\u0002\u021d\u0448",
    "\u0003\u0002\u0002\u0002\u021e\u021f\u0007\u0011\u0002\u0002\u021f\u0220",
    "\t\u0007\u0002\u0002\u0220\u0221\u0005\u00b8]\u0002\u0221\u0222\u0007",
    "\u00bd\u0002\u0002\u0222\u0223\u0007\u00eb\u0002\u0002\u0223\u0224\u0005",
    "\u00b8]\u0002\u0224\u0448\u0003\u0002\u0002\u0002\u0225\u0226\u0007",
    "\u0011\u0002\u0002\u0226\u0227\t\u0007\u0002\u0002\u0227\u0228\u0005",
    "\u00b8]\u0002\u0228\u0229\u0007\u00d3\u0002\u0002\u0229\u022a\u0007",
    "\u00e6\u0002\u0002\u022a\u022b\u0005@!\u0002\u022b\u0448\u0003\u0002",
    "\u0002\u0002\u022c\u022d\u0007\u0011\u0002\u0002\u022d\u022e\t\u0007",
    "\u0002\u0002\u022e\u022f\u0005\u00b8]\u0002\u022f\u0230\u0007\u00fd",
    "\u0002\u0002\u0230\u0233\u0007\u00e6\u0002\u0002\u0231\u0232\u0007o",
    "\u0002\u0002\u0232\u0234\u0007U\u0002\u0002\u0233\u0231\u0003\u0002",
    "\u0002\u0002\u0233\u0234\u0003\u0002\u0002\u0002\u0234\u0235\u0003\u0002",
    "\u0002\u0002\u0235\u0236\u0005@!\u0002\u0236\u0448\u0003\u0002\u0002",
    "\u0002\u0237\u0238\u0007\u0011\u0002\u0002\u0238\u0239\u0007\u00e3\u0002",
    "\u0002\u0239\u023a\u0005\u00b8]\u0002\u023a\u023c\t\b\u0002\u0002\u023b",
    "\u023d\u0007-\u0002\u0002\u023c\u023b\u0003\u0002\u0002\u0002\u023c",
    "\u023d\u0003\u0002\u0002\u0002\u023d\u023e\u0003\u0002\u0002\u0002\u023e",
    "\u0240\u0005\u00b8]\u0002\u023f\u0241\u0005\u0132\u009a\u0002\u0240",
    "\u023f\u0003\u0002\u0002\u0002\u0240\u0241\u0003\u0002\u0002\u0002\u0241",
    "\u0448\u0003\u0002\u0002\u0002\u0242\u0243\u0007\u0011\u0002\u0002\u0243",
    "\u0244\u0007\u00e3\u0002\u0002\u0244\u0246\u0005\u00b8]\u0002\u0245",
    "\u0247\u0005*\u0016\u0002\u0246\u0245\u0003\u0002\u0002\u0002\u0246",
    "\u0247\u0003\u0002\u0002\u0002\u0247\u0248\u0003\u0002\u0002\u0002\u0248",
    "\u024a\u0007%\u0002\u0002\u0249\u024b\u0007-\u0002\u0002\u024a\u0249",
    "\u0003\u0002\u0002\u0002\u024a\u024b\u0003\u0002\u0002\u0002\u024b\u024c",
    "\u0003\u0002\u0002\u0002\u024c\u024d\u0005\u00b8]\u0002\u024d\u024f",
    "\u0005\u00f4{\u0002\u024e\u0250\u0005\u00eav\u0002\u024f\u024e\u0003",
    "\u0002\u0002\u0002\u024f\u0250\u0003\u0002\u0002\u0002\u0250\u0448\u0003",
    "\u0002\u0002\u0002\u0251\u0252\u0007\u0011\u0002\u0002\u0252\u0253\u0007",
    "\u00e3\u0002\u0002\u0253\u0255\u0005\u00b8]\u0002\u0254\u0256\u0005",
    "*\u0016\u0002\u0255\u0254\u0003\u0002\u0002\u0002\u0255\u0256\u0003",
    "\u0002\u0002\u0002\u0256\u0257\u0003\u0002\u0002\u0002\u0257\u0258\u0007",
    "\u00bf\u0002\u0002\u0258\u0259\u0007.\u0002\u0002\u0259\u025a\u0007",
    "\u0004\u0002\u0002\u025a\u025b\u0005\u00eex\u0002\u025b\u025c\u0007",
    "\u0006\u0002\u0002\u025c\u0448\u0003\u0002\u0002\u0002\u025d\u025e\u0007",
    "\u0011\u0002\u0002\u025e\u025f\u0007\u00e3\u0002\u0002\u025f\u0261\u0005",
    "\u00b8]\u0002\u0260\u0262\u0005*\u0016\u0002\u0261\u0260\u0003\u0002",
    "\u0002\u0002\u0261\u0262\u0003\u0002\u0002\u0002\u0262\u0263\u0003\u0002",
    "\u0002\u0002\u0263\u0264\u0007\u00d3\u0002\u0002\u0264\u0265\u0007\u00d0",
    "\u0002\u0002\u0265\u0269\u0007\u0129\u0002\u0002\u0266\u0267\u0007\u0108",
    "\u0002\u0002\u0267\u0268\u0007\u00d1\u0002\u0002\u0268\u026a\u0005@",
    "!\u0002\u0269\u0266\u0003\u0002\u0002\u0002\u0269\u026a\u0003\u0002",
    "\u0002\u0002\u026a\u0448\u0003\u0002\u0002\u0002\u026b\u026c\u0007\u0011",
    "\u0002\u0002\u026c\u026d\u0007\u00e3\u0002\u0002\u026d\u026f\u0005\u00b8",
    "]\u0002\u026e\u0270\u0005*\u0016\u0002\u026f\u026e\u0003\u0002\u0002",
    "\u0002\u026f\u0270\u0003\u0002\u0002\u0002\u0270\u0271\u0003\u0002\u0002",
    "\u0002\u0271\u0272\u0007\u00d3\u0002\u0002\u0272\u0273\u0007\u00d1\u0002",
    "\u0002\u0273\u0274\u0005@!\u0002\u0274\u0448\u0003\u0002\u0002\u0002",
    "\u0275\u0276\u0007\u0011\u0002\u0002\u0276\u0277\t\u0007\u0002\u0002",
    "\u0277\u0278\u0005\u00b8]\u0002\u0278\u027c\u0007\u000e\u0002\u0002",
    "\u0279\u027a\u0007o\u0002\u0002\u027a\u027b\u0007\u0098\u0002\u0002",
    "\u027b\u027d\u0007U\u0002\u0002\u027c\u0279\u0003\u0002\u0002\u0002",
    "\u027c\u027d\u0003\u0002\u0002\u0002\u027d\u027f\u0003\u0002\u0002\u0002",
    "\u027e\u0280\u0005(\u0015\u0002\u027f\u027e\u0003\u0002\u0002\u0002",
    "\u0280\u0281\u0003\u0002\u0002\u0002\u0281\u027f\u0003\u0002\u0002\u0002",
    "\u0281\u0282\u0003\u0002\u0002\u0002\u0282\u0448\u0003\u0002\u0002\u0002",
    "\u0283\u0284\u0007\u0011\u0002\u0002\u0284\u0285\u0007\u00e3\u0002\u0002",
    "\u0285\u0286\u0005\u00b8]\u0002\u0286\u0287\u0005*\u0016\u0002\u0287",
    "\u0288\u0007\u00bd\u0002\u0002\u0288\u0289\u0007\u00eb\u0002\u0002\u0289",
    "\u028a\u0005*\u0016\u0002\u028a\u0448\u0003\u0002\u0002\u0002\u028b",
    "\u028c\u0007\u0011\u0002\u0002\u028c\u028d\t\u0007\u0002\u0002\u028d",
    "\u028e\u0005\u00b8]\u0002\u028e\u0291\u0007N\u0002\u0002\u028f\u0290",
    "\u0007o\u0002\u0002\u0290\u0292\u0007U\u0002\u0002\u0291\u028f\u0003",
    "\u0002\u0002\u0002\u0291\u0292\u0003\u0002\u0002\u0002\u0292\u0293\u0003",
    "\u0002\u0002\u0002\u0293\u0298\u0005*\u0016\u0002\u0294\u0295\u0007",
    "\u0005\u0002\u0002\u0295\u0297\u0005*\u0016\u0002\u0296\u0294\u0003",
    "\u0002\u0002\u0002\u0297\u029a\u0003\u0002\u0002\u0002\u0298\u0296\u0003",
    "\u0002\u0002\u0002\u0298\u0299\u0003\u0002\u0002\u0002\u0299\u029c\u0003",
    "\u0002\u0002\u0002\u029a\u0298\u0003\u0002\u0002\u0002\u029b\u029d\u0007",
    "\u00b4\u0002\u0002\u029c\u029b\u0003\u0002\u0002\u0002\u029c\u029d\u0003",
    "\u0002\u0002\u0002\u029d\u0448\u0003\u0002\u0002\u0002\u029e\u029f\u0007",
    "\u0011\u0002\u0002\u029f\u02a0\u0007\u00e3\u0002\u0002\u02a0\u02a2\u0005",
    "\u00b8]\u0002\u02a1\u02a3\u0005*\u0016\u0002\u02a2\u02a1\u0003\u0002",
    "\u0002\u0002\u02a2\u02a3\u0003\u0002\u0002\u0002\u02a3\u02a4\u0003\u0002",
    "\u0002\u0002\u02a4\u02a5\u0007\u00d3\u0002\u0002\u02a5\u02a6\u0005 ",
    "\u0011\u0002\u02a6\u0448\u0003\u0002\u0002\u0002\u02a7\u02a8\u0007\u0011",
    "\u0002\u0002\u02a8\u02a9\u0007\u00e3\u0002\u0002\u02a9\u02aa\u0005\u00b8",
    "]\u0002\u02aa\u02ab\u0007\u00b9\u0002\u0002\u02ab\u02ac\u0007\u00ab",
    "\u0002\u0002\u02ac\u0448\u0003\u0002\u0002\u0002\u02ad\u02ae\u0007N",
    "\u0002\u0002\u02ae\u02b1\u0007\u00e3\u0002\u0002\u02af\u02b0\u0007o",
    "\u0002\u0002\u02b0\u02b2\u0007U\u0002\u0002\u02b1\u02af\u0003\u0002",
    "\u0002\u0002\u02b1\u02b2\u0003\u0002\u0002\u0002\u02b2\u02b3\u0003\u0002",
    "\u0002\u0002\u02b3\u02b5\u0005\u00b8]\u0002\u02b4\u02b6\u0007\u00b4",
    "\u0002\u0002\u02b5\u02b4\u0003\u0002\u0002\u0002\u02b5\u02b6\u0003\u0002",
    "\u0002\u0002\u02b6\u0448\u0003\u0002\u0002\u0002\u02b7\u02b8\u0007N",
    "\u0002\u0002\u02b8\u02bb\u0007\u0103\u0002\u0002\u02b9\u02ba\u0007o",
    "\u0002\u0002\u02ba\u02bc\u0007U\u0002\u0002\u02bb\u02b9\u0003\u0002",
    "\u0002\u0002\u02bb\u02bc\u0003\u0002\u0002\u0002\u02bc\u02bd\u0003\u0002",
    "\u0002\u0002\u02bd\u0448\u0005\u00b8]\u0002\u02be\u02c1\u00077\u0002",
    "\u0002\u02bf\u02c0\u0007\u00a0\u0002\u0002\u02c0\u02c2\u0007\u00bf\u0002",
    "\u0002\u02c1\u02bf\u0003\u0002\u0002\u0002\u02c1\u02c2\u0003\u0002\u0002",
    "\u0002\u02c2\u02c7\u0003\u0002\u0002\u0002\u02c3\u02c5\u0007j\u0002",
    "\u0002\u02c4\u02c3\u0003\u0002\u0002\u0002\u02c4\u02c5\u0003\u0002\u0002",
    "\u0002\u02c5\u02c6\u0003\u0002\u0002\u0002\u02c6\u02c8\u0007\u00e7\u0002",
    "\u0002\u02c7\u02c4\u0003\u0002\u0002\u0002\u02c7\u02c8\u0003\u0002\u0002",
    "\u0002\u02c8\u02c9\u0003\u0002\u0002\u0002\u02c9\u02cd\u0007\u0103\u0002",
    "\u0002\u02ca\u02cb\u0007o\u0002\u0002\u02cb\u02cc\u0007\u0098\u0002",
    "\u0002\u02cc\u02ce\u0007U\u0002\u0002\u02cd\u02ca\u0003\u0002\u0002",
    "\u0002\u02cd\u02ce\u0003\u0002\u0002\u0002\u02ce\u02cf\u0003\u0002\u0002",
    "\u0002\u02cf\u02d1\u0005\u00b8]\u0002\u02d0\u02d2\u0005\u00a8U\u0002",
    "\u02d1\u02d0\u0003\u0002\u0002\u0002\u02d1\u02d2\u0003\u0002\u0002\u0002",
    "\u02d2\u02db\u0003\u0002\u0002\u0002\u02d3\u02da\u0005\"\u0012\u0002",
    "\u02d4\u02d5\u0007\u00aa\u0002\u0002\u02d5\u02d6\u0007\u009c\u0002\u0002",
    "\u02d6\u02da\u0005\u00a0Q\u0002\u02d7\u02d8\u0007\u00e6\u0002\u0002",
    "\u02d8\u02da\u0005@!\u0002\u02d9\u02d3\u0003\u0002\u0002\u0002\u02d9",
    "\u02d4\u0003\u0002\u0002\u0002\u02d9\u02d7\u0003\u0002\u0002\u0002\u02da",
    "\u02dd\u0003\u0002\u0002\u0002\u02db\u02d9\u0003\u0002\u0002\u0002\u02db",
    "\u02dc\u0003\u0002\u0002\u0002\u02dc\u02de\u0003\u0002\u0002\u0002\u02dd",
    "\u02db\u0003\u0002\u0002\u0002\u02de\u02df\u0007\u0018\u0002\u0002\u02df",
    "\u02e0\u0005$\u0013\u0002\u02e0\u0448\u0003\u0002\u0002\u0002\u02e1",
    "\u02e4\u00077\u0002\u0002\u02e2\u02e3\u0007\u00a0\u0002\u0002\u02e3",
    "\u02e5\u0007\u00bf\u0002\u0002\u02e4\u02e2\u0003\u0002\u0002\u0002\u02e4",
    "\u02e5\u0003\u0002\u0002\u0002\u02e5\u02e7\u0003\u0002\u0002\u0002\u02e6",
    "\u02e8\u0007j\u0002\u0002\u02e7\u02e6\u0003\u0002\u0002\u0002\u02e7",
    "\u02e8\u0003\u0002\u0002\u0002\u02e8\u02e9\u0003\u0002\u0002\u0002\u02e9",
    "\u02ea\u0007\u00e7\u0002\u0002\u02ea\u02eb\u0007\u0103\u0002\u0002\u02eb",
    "\u02f0\u0005\u00ba^\u0002\u02ec\u02ed\u0007\u0004\u0002\u0002\u02ed",
    "\u02ee\u0005\u00f2z\u0002\u02ee\u02ef\u0007\u0006\u0002\u0002\u02ef",
    "\u02f1\u0003\u0002\u0002\u0002\u02f0\u02ec\u0003\u0002\u0002\u0002\u02f0",
    "\u02f1\u0003\u0002\u0002\u0002\u02f1\u02f2\u0003\u0002\u0002\u0002\u02f2",
    "\u02f5\u00058\u001d\u0002\u02f3\u02f4\u0007\u009f\u0002\u0002\u02f4",
    "\u02f6\u0005@!\u0002\u02f5\u02f3\u0003\u0002\u0002\u0002\u02f5\u02f6",
    "\u0003\u0002\u0002\u0002\u02f6\u0448\u0003\u0002\u0002\u0002\u02f7\u02f8",
    "\u0007\u0011\u0002\u0002\u02f8\u02f9\u0007\u0103\u0002\u0002\u02f9\u02fb",
    "\u0005\u00b8]\u0002\u02fa\u02fc\u0007\u0018\u0002\u0002\u02fb\u02fa",
    "\u0003\u0002\u0002\u0002\u02fb\u02fc\u0003\u0002\u0002\u0002\u02fc\u02fd",
    "\u0003\u0002\u0002\u0002\u02fd\u02fe\u0005$\u0013\u0002\u02fe\u0448",
    "\u0003\u0002\u0002\u0002\u02ff\u0302\u00077\u0002\u0002\u0300\u0301",
    "\u0007\u00a0\u0002\u0002\u0301\u0303\u0007\u00bf\u0002\u0002\u0302\u0300",
    "\u0003\u0002\u0002\u0002\u0302\u0303\u0003\u0002\u0002\u0002\u0303\u0305",
    "\u0003\u0002\u0002\u0002\u0304\u0306\u0007\u00e7\u0002\u0002\u0305\u0304",
    "\u0003\u0002\u0002\u0002\u0305\u0306\u0003\u0002\u0002\u0002\u0306\u0307",
    "\u0003\u0002\u0002\u0002\u0307\u030b\u0007h\u0002\u0002\u0308\u0309",
    "\u0007o\u0002\u0002\u0309\u030a\u0007\u0098\u0002\u0002\u030a\u030c",
    "\u0007U\u0002\u0002\u030b\u0308\u0003\u0002\u0002\u0002\u030b\u030c",
    "\u0003\u0002\u0002\u0002\u030c\u030d\u0003\u0002\u0002\u0002\u030d\u030e",
    "\u0005\u00b8]\u0002\u030e\u030f\u0007\u0018\u0002\u0002\u030f\u0319",
    "\u0007\u0129\u0002\u0002\u0310\u0311\u0007\u0101\u0002\u0002\u0311\u0316",
    "\u0005R*\u0002\u0312\u0313\u0007\u0005\u0002\u0002\u0313\u0315\u0005",
    "R*\u0002\u0314\u0312\u0003\u0002\u0002\u0002\u0315\u0318\u0003\u0002",
    "\u0002\u0002\u0316\u0314\u0003\u0002\u0002\u0002\u0316\u0317\u0003\u0002",
    "\u0002\u0002\u0317\u031a\u0003\u0002\u0002\u0002\u0318\u0316\u0003\u0002",
    "\u0002\u0002\u0319\u0310\u0003\u0002\u0002\u0002\u0319\u031a\u0003\u0002",
    "\u0002\u0002\u031a\u0448\u0003\u0002\u0002\u0002\u031b\u031d\u0007N",
    "\u0002\u0002\u031c\u031e\u0007\u00e7\u0002\u0002\u031d\u031c\u0003\u0002",
    "\u0002\u0002\u031d\u031e\u0003\u0002\u0002\u0002\u031e\u031f\u0003\u0002",
    "\u0002\u0002\u031f\u0322\u0007h\u0002\u0002\u0320\u0321\u0007o\u0002",
    "\u0002\u0321\u0323\u0007U\u0002\u0002\u0322\u0320\u0003\u0002\u0002",
    "\u0002\u0322\u0323\u0003\u0002\u0002\u0002\u0323\u0324\u0003\u0002\u0002",
    "\u0002\u0324\u0448\u0005\u00b8]\u0002\u0325\u0327\u0007V\u0002\u0002",
    "\u0326\u0328\t\t\u0002\u0002\u0327\u0326\u0003\u0002\u0002\u0002\u0327",
    "\u0328\u0003\u0002\u0002\u0002\u0328\u0329\u0003\u0002\u0002\u0002\u0329",
    "\u0448\u0005\u0010\t\u0002\u032a\u032b\u0007\u00d6\u0002\u0002\u032b",
    "\u032e\u0007\u00e4\u0002\u0002\u032c\u032d\t\u0005\u0002\u0002\u032d",
    "\u032f\u0005\u00b8]\u0002\u032e\u032c\u0003\u0002\u0002\u0002\u032e",
    "\u032f\u0003\u0002\u0002\u0002\u032f\u0334\u0003\u0002\u0002\u0002\u0330",
    "\u0332\u0007\u0085\u0002\u0002\u0331\u0330\u0003\u0002\u0002\u0002\u0331",
    "\u0332\u0003\u0002\u0002\u0002\u0332\u0333\u0003\u0002\u0002\u0002\u0333",
    "\u0335\u0007\u0129\u0002\u0002\u0334\u0331\u0003\u0002\u0002\u0002\u0334",
    "\u0335\u0003\u0002\u0002\u0002\u0335\u0448\u0003\u0002\u0002\u0002\u0336",
    "\u0337\u0007\u00d6\u0002\u0002\u0337\u0338\u0007\u00e3\u0002\u0002\u0338",
    "\u033b\u0007X\u0002\u0002\u0339\u033a\t\u0005\u0002\u0002\u033a\u033c",
    "\u0005\u00b8]\u0002\u033b\u0339\u0003\u0002\u0002\u0002\u033b\u033c",
    "\u0003\u0002\u0002\u0002\u033c\u033d\u0003\u0002\u0002\u0002\u033d\u033e",
    "\u0007\u0085\u0002\u0002\u033e\u0340\u0007\u0129\u0002\u0002\u033f\u0341",
    "\u0005*\u0016\u0002\u0340\u033f\u0003\u0002\u0002\u0002\u0340\u0341",
    "\u0003\u0002\u0002\u0002\u0341\u0448\u0003\u0002\u0002\u0002\u0342\u0343",
    "\u0007\u00d6\u0002\u0002\u0343\u0344\u0007\u00e6\u0002\u0002\u0344\u0349",
    "\u0005\u00b8]\u0002\u0345\u0346\u0007\u0004\u0002\u0002\u0346\u0347",
    "\u0005D#\u0002\u0347\u0348\u0007\u0006\u0002\u0002\u0348\u034a\u0003",
    "\u0002\u0002\u0002\u0349\u0345\u0003\u0002\u0002\u0002\u0349\u034a\u0003",
    "\u0002\u0002\u0002\u034a\u0448\u0003\u0002\u0002\u0002\u034b\u034c\u0007",
    "\u00d6\u0002\u0002\u034c\u034d\u0007.\u0002\u0002\u034d\u034e\t\u0005",
    "\u0002\u0002\u034e\u0351\u0005\u00b8]\u0002\u034f\u0350\t\u0005\u0002",
    "\u0002\u0350\u0352\u0005\u00b8]\u0002\u0351\u034f\u0003\u0002\u0002",
    "\u0002\u0351\u0352\u0003\u0002\u0002\u0002\u0352\u0448\u0003\u0002\u0002",
    "\u0002\u0353\u0354\u0007\u00d6\u0002\u0002\u0354\u0357\u0007\u0104\u0002",
    "\u0002\u0355\u0356\t\u0005\u0002\u0002\u0356\u0358\u0005\u00b8]\u0002",
    "\u0357\u0355\u0003\u0002\u0002\u0002\u0357\u0358\u0003\u0002\u0002\u0002",
    "\u0358\u035d\u0003\u0002\u0002\u0002\u0359\u035b\u0007\u0085\u0002\u0002",
    "\u035a\u0359\u0003\u0002\u0002\u0002\u035a\u035b\u0003\u0002\u0002\u0002",
    "\u035b\u035c\u0003\u0002\u0002\u0002\u035c\u035e\u0007\u0129\u0002\u0002",
    "\u035d\u035a\u0003\u0002\u0002\u0002\u035d\u035e\u0003\u0002\u0002\u0002",
    "\u035e\u0448\u0003\u0002\u0002\u0002\u035f\u0360\u0007\u00d6\u0002\u0002",
    "\u0360\u0361\u0007\u00ab\u0002\u0002\u0361\u0363\u0005\u00b8]\u0002",
    "\u0362\u0364\u0005*\u0016\u0002\u0363\u0362\u0003\u0002\u0002\u0002",
    "\u0363\u0364\u0003\u0002\u0002\u0002\u0364\u0448\u0003\u0002\u0002\u0002",
    "\u0365\u0367\u0007\u00d6\u0002\u0002\u0366\u0368\u0005\u012a\u0096\u0002",
    "\u0367\u0366\u0003\u0002\u0002\u0002\u0367\u0368\u0003\u0002\u0002\u0002",
    "\u0368\u0369\u0003\u0002\u0002\u0002\u0369\u0371\u0007i\u0002\u0002",
    "\u036a\u036c\u0007\u0085\u0002\u0002\u036b\u036a\u0003\u0002\u0002\u0002",
    "\u036b\u036c\u0003\u0002\u0002\u0002\u036c\u036f\u0003\u0002\u0002\u0002",
    "\u036d\u0370\u0005\u00b8]\u0002\u036e\u0370\u0007\u0129\u0002\u0002",
    "\u036f\u036d\u0003\u0002\u0002\u0002\u036f\u036e\u0003\u0002\u0002\u0002",
    "\u0370\u0372\u0003\u0002\u0002\u0002\u0371\u036b\u0003\u0002\u0002\u0002",
    "\u0371\u0372\u0003\u0002\u0002\u0002\u0372\u0448\u0003\u0002\u0002\u0002",
    "\u0373\u0374\u0007\u00d6\u0002\u0002\u0374\u0375\u00077\u0002\u0002",
    "\u0375\u0376\u0007\u00e3\u0002\u0002\u0376\u0379\u0005\u00b8]\u0002",
    "\u0377\u0378\u0007\u0018\u0002\u0002\u0378\u037a\u0007\u00d0\u0002\u0002",
    "\u0379\u0377\u0003\u0002\u0002\u0002\u0379\u037a\u0003\u0002\u0002\u0002",
    "\u037a\u0448\u0003\u0002\u0002\u0002\u037b\u037c\u0007\u00d6\u0002\u0002",
    "\u037c\u037d\u0007:\u0002\u0002\u037d\u0448\u0007\u0094\u0002\u0002",
    "\u037e\u037f\t\n\u0002\u0002\u037f\u0381\u0007h\u0002\u0002\u0380\u0382",
    "\u0007X\u0002\u0002\u0381\u0380\u0003\u0002\u0002\u0002\u0381\u0382",
    "\u0003\u0002\u0002\u0002\u0382\u0383\u0003\u0002\u0002\u0002\u0383\u0448",
    "\u00050\u0019\u0002\u0384\u0385\t\n\u0002\u0002\u0385\u0387\u0005.\u0018",
    "\u0002\u0386\u0388\u0007X\u0002\u0002\u0387\u0386\u0003\u0002\u0002",
    "\u0002\u0387\u0388\u0003\u0002\u0002\u0002\u0388\u0389\u0003\u0002\u0002",
    "\u0002\u0389\u038a\u0005\u00b8]\u0002\u038a\u0448\u0003\u0002\u0002",
    "\u0002\u038b\u038d\t\n\u0002\u0002\u038c\u038e\u0007\u00e3\u0002\u0002",
    "\u038d\u038c\u0003\u0002\u0002\u0002\u038d\u038e\u0003\u0002\u0002\u0002",
    "\u038e\u0390\u0003\u0002\u0002\u0002\u038f\u0391\t\u000b\u0002\u0002",
    "\u0390\u038f\u0003\u0002\u0002\u0002\u0390\u0391\u0003\u0002\u0002\u0002",
    "\u0391\u0392\u0003\u0002\u0002\u0002\u0392\u0394\u0005\u00b8]\u0002",
    "\u0393\u0395\u0005*\u0016\u0002\u0394\u0393\u0003\u0002\u0002\u0002",
    "\u0394\u0395\u0003\u0002\u0002\u0002\u0395\u0397\u0003\u0002\u0002\u0002",
    "\u0396\u0398\u00052\u001a\u0002\u0397\u0396\u0003\u0002\u0002\u0002",
    "\u0397\u0398\u0003\u0002\u0002\u0002\u0398\u0448\u0003\u0002\u0002\u0002",
    "\u0399\u039b\t\n\u0002\u0002\u039a\u039c\u0007\u00b5\u0002\u0002\u039b",
    "\u039a\u0003\u0002\u0002\u0002\u039b\u039c\u0003\u0002\u0002\u0002\u039c",
    "\u039d\u0003\u0002\u0002\u0002\u039d\u0448\u0005$\u0013\u0002\u039e",
    "\u039f\u0007/\u0002\u0002\u039f\u03a0\u0007\u009c\u0002\u0002\u03a0",
    "\u03a1\u0005.\u0018\u0002\u03a1\u03a2\u0005\u00b8]\u0002\u03a2\u03a3",
    "\u0007|\u0002\u0002\u03a3\u03a4\t\f\u0002\u0002\u03a4\u0448\u0003\u0002",
    "\u0002\u0002\u03a5\u03a6\u0007/\u0002\u0002\u03a6\u03a7\u0007\u009c",
    "\u0002\u0002\u03a7\u03a8\u0007\u00e3\u0002\u0002\u03a8\u03a9\u0005\u00b8",
    "]\u0002\u03a9\u03aa\u0007|\u0002\u0002\u03aa\u03ab\t\f\u0002\u0002\u03ab",
    "\u0448\u0003\u0002\u0002\u0002\u03ac\u03ad\u0007\u00bc\u0002\u0002\u03ad",
    "\u03ae\u0007\u00e3\u0002\u0002\u03ae\u0448\u0005\u00b8]\u0002\u03af",
    "\u03b0\u0007\u00bc\u0002\u0002\u03b0\u03b1\u0007h\u0002\u0002\u03b1",
    "\u0448\u0005\u00b8]\u0002\u03b2\u03ba\u0007\u00bc\u0002\u0002\u03b3",
    "\u03bb\u0007\u0129\u0002\u0002\u03b4\u03b6\u000b\u0002\u0002\u0002\u03b5",
    "\u03b4\u0003\u0002\u0002\u0002\u03b6\u03b9\u0003\u0002\u0002\u0002\u03b7",
    "\u03b8\u0003\u0002\u0002\u0002\u03b7\u03b5\u0003\u0002\u0002\u0002\u03b8",
    "\u03bb\u0003\u0002\u0002\u0002\u03b9\u03b7\u0003\u0002\u0002\u0002\u03ba",
    "\u03b3\u0003\u0002\u0002\u0002\u03ba\u03b7\u0003\u0002\u0002\u0002\u03bb",
    "\u0448\u0003\u0002\u0002\u0002\u03bc\u03be\u0007!\u0002\u0002\u03bd",
    "\u03bf\u0007\u0082\u0002\u0002\u03be\u03bd\u0003\u0002\u0002\u0002\u03be",
    "\u03bf\u0003\u0002\u0002\u0002\u03bf\u03c0\u0003\u0002\u0002\u0002\u03c0",
    "\u03c1\u0007\u00e3\u0002\u0002\u03c1\u03c4\u0005\u00b8]\u0002\u03c2",
    "\u03c3\u0007\u009f\u0002\u0002\u03c3\u03c5\u0005@!\u0002\u03c4\u03c2",
    "\u0003\u0002\u0002\u0002\u03c4\u03c5\u0003\u0002\u0002\u0002\u03c5\u03ca",
    "\u0003\u0002\u0002\u0002\u03c6\u03c8\u0007\u0018\u0002\u0002\u03c7\u03c6",
    "\u0003\u0002\u0002\u0002\u03c7\u03c8\u0003\u0002\u0002\u0002\u03c8\u03c9",
    "\u0003\u0002\u0002\u0002\u03c9\u03cb\u0005$\u0013\u0002\u03ca\u03c7",
    "\u0003\u0002\u0002\u0002\u03ca\u03cb\u0003\u0002\u0002\u0002\u03cb\u0448",
    "\u0003\u0002\u0002\u0002\u03cc\u03cd\u0007\u00f8\u0002\u0002\u03cd\u03d0",
    "\u0007\u00e3\u0002\u0002\u03ce\u03cf\u0007o\u0002\u0002\u03cf\u03d1",
    "\u0007U\u0002\u0002\u03d0\u03ce\u0003\u0002\u0002\u0002\u03d0\u03d1",
    "\u0003\u0002\u0002\u0002\u03d1\u03d2\u0003\u0002\u0002\u0002\u03d2\u0448",
    "\u0005\u00b8]\u0002\u03d3\u03d4\u0007\'\u0002\u0002\u03d4\u0448\u0007",
    "!\u0002\u0002\u03d5\u03d6\u0007\u0089\u0002\u0002\u03d6\u03d8\u0007",
    "?\u0002\u0002\u03d7\u03d9\u0007\u008a\u0002\u0002\u03d8\u03d7\u0003",
    "\u0002\u0002\u0002\u03d8\u03d9\u0003\u0002\u0002\u0002\u03d9\u03da\u0003",
    "\u0002\u0002\u0002\u03da\u03db\u0007v\u0002\u0002\u03db\u03dd\u0007",
    "\u0129\u0002\u0002\u03dc\u03de\u0007\u00a8\u0002\u0002\u03dd\u03dc\u0003",
    "\u0002\u0002\u0002\u03dd\u03de\u0003\u0002\u0002\u0002\u03de\u03df\u0003",
    "\u0002\u0002\u0002\u03df\u03e0\u0007{\u0002\u0002\u03e0\u03e1\u0007",
    "\u00e3\u0002\u0002\u03e1\u03e3\u0005\u00b8]\u0002\u03e2\u03e4\u0005",
    "*\u0016\u0002\u03e3\u03e2\u0003\u0002\u0002\u0002\u03e3\u03e4\u0003",
    "\u0002\u0002\u0002\u03e4\u0448\u0003\u0002\u0002\u0002\u03e5\u03e6\u0007",
    "\u00f3\u0002\u0002\u03e6\u03e7\u0007\u00e3\u0002\u0002\u03e7\u03e9\u0005",
    "\u00b8]\u0002\u03e8\u03ea\u0005*\u0016\u0002\u03e9\u03e8\u0003\u0002",
    "\u0002\u0002\u03e9\u03ea\u0003\u0002\u0002\u0002\u03ea\u0448\u0003\u0002",
    "\u0002\u0002\u03eb\u03ec\u0007\u0093\u0002\u0002\u03ec\u03ed\u0007\u00be",
    "\u0002\u0002\u03ed\u03ee\u0007\u00e3\u0002\u0002\u03ee\u03f1\u0005\u00b8",
    "]\u0002\u03ef\u03f0\t\r\u0002\u0002\u03f0\u03f2\u0007\u00ab\u0002\u0002",
    "\u03f1\u03ef\u0003\u0002\u0002\u0002\u03f1\u03f2\u0003\u0002\u0002\u0002",
    "\u03f2\u0448\u0003\u0002\u0002\u0002\u03f3\u03f4\t\u000e\u0002\u0002",
    "\u03f4\u03fc\u0005\u012a\u0096\u0002\u03f5\u03fd\u0007\u0129\u0002\u0002",
    "\u03f6\u03f8\u000b\u0002\u0002\u0002\u03f7\u03f6\u0003\u0002\u0002\u0002",
    "\u03f8\u03fb\u0003\u0002\u0002\u0002\u03f9\u03fa\u0003\u0002\u0002\u0002",
    "\u03f9\u03f7\u0003\u0002\u0002\u0002\u03fa\u03fd\u0003\u0002\u0002\u0002",
    "\u03fb\u03f9\u0003\u0002\u0002\u0002\u03fc\u03f5\u0003\u0002\u0002\u0002",
    "\u03fc\u03f9\u0003\u0002\u0002\u0002\u03fd\u0448\u0003\u0002\u0002\u0002",
    "\u03fe\u03ff\u0007\u00d3\u0002\u0002\u03ff\u0403\u0007\u00c6\u0002\u0002",
    "\u0400\u0402\u000b\u0002\u0002\u0002\u0401\u0400\u0003\u0002\u0002\u0002",
    "\u0402\u0405\u0003\u0002\u0002\u0002\u0403\u0404\u0003\u0002\u0002\u0002",
    "\u0403\u0401\u0003\u0002\u0002\u0002\u0404\u0448\u0003\u0002\u0002\u0002",
    "\u0405\u0403\u0003\u0002\u0002\u0002\u0406\u0407\u0007\u00d3\u0002\u0002",
    "\u0407\u0408\u0007\u00ea\u0002\u0002\u0408\u0409\u0007\u0109\u0002\u0002",
    "\u0409\u0448\u0005\u00dep\u0002\u040a\u040b\u0007\u00d3\u0002\u0002",
    "\u040b\u040c\u0007\u00ea\u0002\u0002\u040c\u040d\u0007\u0109\u0002\u0002",
    "\u040d\u0448\t\u000f\u0002\u0002\u040e\u040f\u0007\u00d3\u0002\u0002",
    "\u040f\u0410\u0007\u00ea\u0002\u0002\u0410\u0414\u0007\u0109\u0002\u0002",
    "\u0411\u0413\u000b\u0002\u0002\u0002\u0412\u0411\u0003\u0002\u0002\u0002",
    "\u0413\u0416\u0003\u0002\u0002\u0002\u0414\u0415\u0003\u0002\u0002\u0002",
    "\u0414\u0412\u0003\u0002\u0002\u0002\u0415\u0448\u0003\u0002\u0002\u0002",
    "\u0416\u0414\u0003\u0002\u0002\u0002\u0417\u0418\u0007\u00d3\u0002\u0002",
    "\u0418\u0419\u0005\u0012\n\u0002\u0419\u041a\u0007\u0117\u0002\u0002",
    "\u041a\u041b\u0005\u0014\u000b\u0002\u041b\u0448\u0003\u0002\u0002\u0002",
    "\u041c\u041d\u0007\u00d3\u0002\u0002\u041d\u0425\u0005\u0012\n\u0002",
    "\u041e\u0422\u0007\u0117\u0002\u0002\u041f\u0421\u000b\u0002\u0002\u0002",
    "\u0420\u041f\u0003\u0002\u0002\u0002\u0421\u0424\u0003\u0002\u0002\u0002",
    "\u0422\u0423\u0003\u0002\u0002\u0002\u0422\u0420\u0003\u0002\u0002\u0002",
    "\u0423\u0426\u0003\u0002\u0002\u0002\u0424\u0422\u0003\u0002\u0002\u0002",
    "\u0425\u041e\u0003\u0002\u0002\u0002\u0425\u0426\u0003\u0002\u0002\u0002",
    "\u0426\u0448\u0003\u0002\u0002\u0002\u0427\u042b\u0007\u00d3\u0002\u0002",
    "\u0428\u042a\u000b\u0002\u0002\u0002\u0429\u0428\u0003\u0002\u0002\u0002",
    "\u042a\u042d\u0003\u0002\u0002\u0002\u042b\u042c\u0003\u0002\u0002\u0002",
    "\u042b\u0429\u0003\u0002\u0002\u0002\u042c\u042e\u0003\u0002\u0002\u0002",
    "\u042d\u042b\u0003\u0002\u0002\u0002\u042e\u042f\u0007\u0117\u0002\u0002",
    "\u042f\u0448\u0005\u0014\u000b\u0002\u0430\u0434\u0007\u00d3\u0002\u0002",
    "\u0431\u0433\u000b\u0002\u0002\u0002\u0432\u0431\u0003\u0002\u0002\u0002",
    "\u0433\u0436\u0003\u0002\u0002\u0002\u0434\u0435\u0003\u0002\u0002\u0002",
    "\u0434\u0432\u0003\u0002\u0002\u0002\u0435\u0448\u0003\u0002\u0002\u0002",
    "\u0436\u0434\u0003\u0002\u0002\u0002\u0437\u0438\u0007\u00c0\u0002\u0002",
    "\u0438\u0448\u0005\u0012\n\u0002\u0439\u043d\u0007\u00c0\u0002\u0002",
    "\u043a\u043c\u000b\u0002\u0002\u0002\u043b\u043a\u0003\u0002\u0002\u0002",
    "\u043c\u043f\u0003\u0002\u0002\u0002\u043d\u043e\u0003\u0002\u0002\u0002",
    "\u043d\u043b\u0003\u0002\u0002\u0002\u043e\u0448\u0003\u0002\u0002\u0002",
    "\u043f\u043d\u0003\u0002\u0002\u0002\u0440\u0444\u0005\u0016\f\u0002",
    "\u0441\u0443\u000b\u0002\u0002\u0002\u0442\u0441\u0003\u0002\u0002\u0002",
    "\u0443\u0446\u0003\u0002\u0002\u0002\u0444\u0445\u0003\u0002\u0002\u0002",
    "\u0444\u0442\u0003\u0002\u0002\u0002\u0445\u0448\u0003\u0002\u0002\u0002",
    "\u0446\u0444\u0003\u0002\u0002\u0002\u0447\u0155\u0003\u0002\u0002\u0002",
    "\u0447\u0157\u0003\u0002\u0002\u0002\u0447\u015a\u0003\u0002\u0002\u0002",
    "\u0447\u015f\u0003\u0002\u0002\u0002\u0447\u0171\u0003\u0002\u0002\u0002",
    "\u0447\u0178\u0003\u0002\u0002\u0002\u0447\u017e\u0003\u0002\u0002\u0002",
    "\u0447\u0188\u0003\u0002\u0002\u0002\u0447\u0194\u0003\u0002\u0002\u0002",
    "\u0447\u01ac\u0003\u0002\u0002\u0002\u0447\u01c1\u0003\u0002\u0002\u0002",
    "\u0447\u01d9\u0003\u0002\u0002\u0002\u0447\u01ea\u0003\u0002\u0002\u0002",
    "\u0447\u01f5\u0003\u0002\u0002\u0002\u0447\u01fc\u0003\u0002\u0002\u0002",
    "\u0447\u0205\u0003\u0002\u0002\u0002\u0447\u020e\u0003\u0002\u0002\u0002",
    "\u0447\u0217\u0003\u0002\u0002\u0002\u0447\u021e\u0003\u0002\u0002\u0002",
    "\u0447\u0225\u0003\u0002\u0002\u0002\u0447\u022c\u0003\u0002\u0002\u0002",
    "\u0447\u0237\u0003\u0002\u0002\u0002\u0447\u0242\u0003\u0002\u0002\u0002",
    "\u0447\u0251\u0003\u0002\u0002\u0002\u0447\u025d\u0003\u0002\u0002\u0002",
    "\u0447\u026b\u0003\u0002\u0002\u0002\u0447\u0275\u0003\u0002\u0002\u0002",
    "\u0447\u0283\u0003\u0002\u0002\u0002\u0447\u028b\u0003\u0002\u0002\u0002",
    "\u0447\u029e\u0003\u0002\u0002\u0002\u0447\u02a7\u0003\u0002\u0002\u0002",
    "\u0447\u02ad\u0003\u0002\u0002\u0002\u0447\u02b7\u0003\u0002\u0002\u0002",
    "\u0447\u02be\u0003\u0002\u0002\u0002\u0447\u02e1\u0003\u0002\u0002\u0002",
    "\u0447\u02f7\u0003\u0002\u0002\u0002\u0447\u02ff\u0003\u0002\u0002\u0002",
    "\u0447\u031b\u0003\u0002\u0002\u0002\u0447\u0325\u0003\u0002\u0002\u0002",
    "\u0447\u032a\u0003\u0002\u0002\u0002\u0447\u0336\u0003\u0002\u0002\u0002",
    "\u0447\u0342\u0003\u0002\u0002\u0002\u0447\u034b\u0003\u0002\u0002\u0002",
    "\u0447\u0353\u0003\u0002\u0002\u0002\u0447\u035f\u0003\u0002\u0002\u0002",
    "\u0447\u0365\u0003\u0002\u0002\u0002\u0447\u0373\u0003\u0002\u0002\u0002",
    "\u0447\u037b\u0003\u0002\u0002\u0002\u0447\u037e\u0003\u0002\u0002\u0002",
    "\u0447\u0384\u0003\u0002\u0002\u0002\u0447\u038b\u0003\u0002\u0002\u0002",
    "\u0447\u0399\u0003\u0002\u0002\u0002\u0447\u039e\u0003\u0002\u0002\u0002",
    "\u0447\u03a5\u0003\u0002\u0002\u0002\u0447\u03ac\u0003\u0002\u0002\u0002",
    "\u0447\u03af\u0003\u0002\u0002\u0002\u0447\u03b2\u0003\u0002\u0002\u0002",
    "\u0447\u03bc\u0003\u0002\u0002\u0002\u0447\u03cc\u0003\u0002\u0002\u0002",
    "\u0447\u03d3\u0003\u0002\u0002\u0002\u0447\u03d5\u0003\u0002\u0002\u0002",
    "\u0447\u03e5\u0003\u0002\u0002\u0002\u0447\u03eb\u0003\u0002\u0002\u0002",
    "\u0447\u03f3\u0003\u0002\u0002\u0002\u0447\u03fe\u0003\u0002\u0002\u0002",
    "\u0447\u0406\u0003\u0002\u0002\u0002\u0447\u040a\u0003\u0002\u0002\u0002",
    "\u0447\u040e\u0003\u0002\u0002\u0002\u0447\u0417\u0003\u0002\u0002\u0002",
    "\u0447\u041c\u0003\u0002\u0002\u0002\u0447\u0427\u0003\u0002\u0002\u0002",
    "\u0447\u0430\u0003\u0002\u0002\u0002\u0447\u0437\u0003\u0002\u0002\u0002",
    "\u0447\u0439\u0003\u0002\u0002\u0002\u0447\u0440\u0003\u0002\u0002\u0002",
    "\u0448\u0011\u0003\u0002\u0002\u0002\u0449\u044a\u0005\u012e\u0098\u0002",
    "\u044a\u0013\u0003\u0002\u0002\u0002\u044b\u044c\u0005\u012e\u0098\u0002",
    "\u044c\u0015\u0003\u0002\u0002\u0002\u044d\u044e\u00077\u0002\u0002",
    "\u044e\u04f6\u0007\u00c6\u0002\u0002\u044f\u0450\u0007N\u0002\u0002",
    "\u0450\u04f6\u0007\u00c6\u0002\u0002\u0451\u0453\u0007k\u0002\u0002",
    "\u0452\u0454\u0007\u00c6\u0002\u0002\u0453\u0452\u0003\u0002\u0002\u0002",
    "\u0453\u0454\u0003\u0002\u0002\u0002\u0454\u04f6\u0003\u0002\u0002\u0002",
    "\u0455\u0457\u0007\u00c3\u0002\u0002\u0456\u0458\u0007\u00c6\u0002\u0002",
    "\u0457\u0456\u0003\u0002\u0002\u0002\u0457\u0458\u0003\u0002\u0002\u0002",
    "\u0458\u04f6\u0003\u0002\u0002\u0002\u0459\u045a\u0007\u00d6\u0002\u0002",
    "\u045a\u04f6\u0007k\u0002\u0002\u045b\u045c\u0007\u00d6\u0002\u0002",
    "\u045c\u045e\u0007\u00c6\u0002\u0002\u045d\u045f\u0007k\u0002\u0002",
    "\u045e\u045d\u0003\u0002\u0002\u0002\u045e\u045f\u0003\u0002\u0002\u0002",
    "\u045f\u04f6\u0003\u0002\u0002\u0002\u0460\u0461\u0007\u00d6\u0002\u0002",
    "\u0461\u04f6\u0007\u00b2\u0002\u0002\u0462\u0463\u0007\u00d6\u0002\u0002",
    "\u0463\u04f6\u0007\u00c7\u0002\u0002\u0464\u0465\u0007\u00d6\u0002\u0002",
    "\u0465\u0466\u0007:\u0002\u0002\u0466\u04f6\u0007\u00c7\u0002\u0002",
    "\u0467\u0468\u0007W\u0002\u0002\u0468\u04f6\u0007\u00e3\u0002\u0002",
    "\u0469\u046a\u0007q\u0002\u0002\u046a\u04f6\u0007\u00e3\u0002\u0002",
    "\u046b\u046c\u0007\u00d6\u0002\u0002\u046c\u04f6\u00072\u0002\u0002",
    "\u046d\u046e\u0007\u00d6\u0002\u0002\u046e\u046f\u00077\u0002\u0002",
    "\u046f\u04f6\u0007\u00e3\u0002\u0002\u0470\u0471\u0007\u00d6\u0002\u0002",
    "\u0471\u04f6\u0007\u00ef\u0002\u0002\u0472\u0473\u0007\u00d6\u0002\u0002",
    "\u0473\u04f6\u0007t\u0002\u0002\u0474\u0475\u0007\u00d6\u0002\u0002",
    "\u0475\u04f6\u0007\u008d\u0002\u0002\u0476\u0477\u00077\u0002\u0002",
    "\u0477\u04f6\u0007s\u0002\u0002\u0478\u0479\u0007N\u0002\u0002\u0479",
    "\u04f6\u0007s\u0002\u0002\u047a\u047b\u0007\u0011\u0002\u0002\u047b",
    "\u04f6\u0007s\u0002\u0002\u047c\u047d\u0007\u008c\u0002\u0002\u047d",
    "\u04f6\u0007\u00e3\u0002\u0002\u047e\u047f\u0007\u008c\u0002\u0002\u047f",
    "\u04f6\u0007@\u0002\u0002\u0480\u0481\u0007\u00fc\u0002\u0002\u0481",
    "\u04f6\u0007\u00e3\u0002\u0002\u0482\u0483\u0007\u00fc\u0002\u0002\u0483",
    "\u04f6\u0007@\u0002\u0002\u0484\u0485\u00077\u0002\u0002\u0485\u0486",
    "\u0007\u00e7\u0002\u0002\u0486\u04f6\u0007\u008f\u0002\u0002\u0487\u0488",
    "\u0007N\u0002\u0002\u0488\u0489\u0007\u00e7\u0002\u0002\u0489\u04f6",
    "\u0007\u008f\u0002\u0002\u048a\u048b\u0007\u0011\u0002\u0002\u048b\u048c",
    "\u0007\u00e3\u0002\u0002\u048c\u048d\u0005\u00ba^\u0002\u048d\u048e",
    "\u0007\u0098\u0002\u0002\u048e\u048f\u0007)\u0002\u0002\u048f\u04f6",
    "\u0003\u0002\u0002\u0002\u0490\u0491\u0007\u0011\u0002\u0002\u0491\u0492",
    "\u0007\u00e3\u0002\u0002\u0492\u0493\u0005\u00ba^\u0002\u0493\u0494",
    "\u0007)\u0002\u0002\u0494\u0495\u0007 \u0002\u0002\u0495\u04f6\u0003",
    "\u0002\u0002\u0002\u0496\u0497\u0007\u0011\u0002\u0002\u0497\u0498\u0007",
    "\u00e3\u0002\u0002\u0498\u0499\u0005\u00ba^\u0002\u0499\u049a\u0007",
    "\u0098\u0002\u0002\u049a\u049b\u0007\u00da\u0002\u0002\u049b\u04f6\u0003",
    "\u0002\u0002\u0002\u049c\u049d\u0007\u0011\u0002\u0002\u049d\u049e\u0007",
    "\u00e3\u0002\u0002\u049e\u049f\u0005\u00ba^\u0002\u049f\u04a0\u0007",
    "\u00d7\u0002\u0002\u04a0\u04a1\u0007 \u0002\u0002\u04a1\u04f6\u0003",
    "\u0002\u0002\u0002\u04a2\u04a3\u0007\u0011\u0002\u0002\u04a3\u04a4\u0007",
    "\u00e3\u0002\u0002\u04a4\u04a5\u0005\u00ba^\u0002\u04a5\u04a6\u0007",
    "\u0098\u0002\u0002\u04a6\u04a7\u0007\u00d7\u0002\u0002\u04a7\u04f6\u0003",
    "\u0002\u0002\u0002\u04a8\u04a9\u0007\u0011\u0002\u0002\u04a9\u04aa\u0007",
    "\u00e3\u0002\u0002\u04aa\u04ab\u0005\u00ba^\u0002\u04ab\u04ac\u0007",
    "\u0098\u0002\u0002\u04ac\u04ad\u0007\u00dd\u0002\u0002\u04ad\u04ae\u0007",
    "\u0018\u0002\u0002\u04ae\u04af\u0007I\u0002\u0002\u04af\u04f6\u0003",
    "\u0002\u0002\u0002\u04b0\u04b1\u0007\u0011\u0002\u0002\u04b1\u04b2\u0007",
    "\u00e3\u0002\u0002\u04b2\u04b3\u0005\u00ba^\u0002\u04b3\u04b4\u0007",
    "\u00d3\u0002\u0002\u04b4\u04b5\u0007\u00d7\u0002\u0002\u04b5\u04b6\u0007",
    "\u008b\u0002\u0002\u04b6\u04f6\u0003\u0002\u0002\u0002\u04b7\u04b8\u0007",
    "\u0011\u0002\u0002\u04b8\u04b9\u0007\u00e3\u0002\u0002\u04b9\u04ba\u0005",
    "\u00ba^\u0002\u04ba\u04bb\u0007T\u0002\u0002\u04bb\u04bc\u0007\u00a9",
    "\u0002\u0002\u04bc\u04f6\u0003\u0002\u0002\u0002\u04bd\u04be\u0007\u0011",
    "\u0002\u0002\u04be\u04bf\u0007\u00e3\u0002\u0002\u04bf\u04c0\u0005\u00ba",
    "^\u0002\u04c0\u04c1\u0007\u0016\u0002\u0002\u04c1\u04c2\u0007\u00a9",
    "\u0002\u0002\u04c2\u04f6\u0003\u0002\u0002\u0002\u04c3\u04c4\u0007\u0011",
    "\u0002\u0002\u04c4\u04c5\u0007\u00e3\u0002\u0002\u04c5\u04c6\u0005\u00ba",
    "^\u0002\u04c6\u04c7\u0007\u00f6\u0002\u0002\u04c7\u04c8\u0007\u00a9",
    "\u0002\u0002\u04c8\u04f6\u0003\u0002\u0002\u0002\u04c9\u04ca\u0007\u0011",
    "\u0002\u0002\u04ca\u04cb\u0007\u00e3\u0002\u0002\u04cb\u04cc\u0005\u00ba",
    "^\u0002\u04cc\u04cd\u0007\u00ec\u0002\u0002\u04cd\u04f6\u0003\u0002",
    "\u0002\u0002\u04ce\u04cf\u0007\u0011\u0002\u0002\u04cf\u04d0\u0007\u00e3",
    "\u0002\u0002\u04d0\u04d2\u0005\u00ba^\u0002\u04d1\u04d3\u0005*\u0016",
    "\u0002\u04d2\u04d1\u0003\u0002\u0002\u0002\u04d2\u04d3\u0003\u0002\u0002",
    "\u0002\u04d3\u04d4\u0003\u0002\u0002\u0002\u04d4\u04d5\u00071\u0002",
    "\u0002\u04d5\u04f6\u0003\u0002\u0002\u0002\u04d6\u04d7\u0007\u0011\u0002",
    "\u0002\u04d7\u04d8\u0007\u00e3\u0002\u0002\u04d8\u04da\u0005\u00ba^",
    "\u0002\u04d9\u04db\u0005*\u0016\u0002\u04da\u04d9\u0003\u0002\u0002",
    "\u0002\u04da\u04db\u0003\u0002\u0002\u0002\u04db\u04dc\u0003\u0002\u0002",
    "\u0002\u04dc\u04dd\u00074\u0002\u0002\u04dd\u04f6\u0003\u0002\u0002",
    "\u0002\u04de\u04df\u0007\u0011\u0002\u0002\u04df\u04e0\u0007\u00e3\u0002",
    "\u0002\u04e0\u04e2\u0005\u00ba^\u0002\u04e1\u04e3\u0005*\u0016\u0002",
    "\u04e2\u04e1\u0003\u0002\u0002\u0002\u04e2\u04e3\u0003\u0002\u0002\u0002",
    "\u04e3\u04e4\u0003\u0002\u0002\u0002\u04e4\u04e5\u0007\u00d3\u0002\u0002",
    "\u04e5\u04e6\u0007_\u0002\u0002\u04e6\u04f6\u0003\u0002\u0002\u0002",
    "\u04e7\u04e8\u0007\u0011\u0002\u0002\u04e8\u04e9\u0007\u00e3\u0002\u0002",
    "\u04e9\u04eb\u0005\u00ba^\u0002\u04ea\u04ec\u0005*\u0016\u0002\u04eb",
    "\u04ea\u0003\u0002\u0002\u0002\u04eb\u04ec\u0003\u0002\u0002\u0002\u04ec",
    "\u04ed\u0003\u0002\u0002\u0002\u04ed\u04ee\u0007\u00bf\u0002\u0002\u04ee",
    "\u04ef\u0007.\u0002\u0002\u04ef\u04f6\u0003\u0002\u0002\u0002\u04f0",
    "\u04f1\u0007\u00db\u0002\u0002\u04f1\u04f6\u0007\u00ee\u0002\u0002\u04f2",
    "\u04f6\u00070\u0002\u0002\u04f3\u04f6\u0007\u00c8\u0002\u0002\u04f4",
    "\u04f6\u0007H\u0002\u0002\u04f5\u044d\u0003\u0002\u0002\u0002\u04f5",
    "\u044f\u0003\u0002\u0002\u0002\u04f5\u0451\u0003\u0002\u0002\u0002\u04f5",
    "\u0455\u0003\u0002\u0002\u0002\u04f5\u0459\u0003\u0002\u0002\u0002\u04f5",
    "\u045b\u0003\u0002\u0002\u0002\u04f5\u0460\u0003\u0002\u0002\u0002\u04f5",
    "\u0462\u0003\u0002\u0002\u0002\u04f5\u0464\u0003\u0002\u0002\u0002\u04f5",
    "\u0467\u0003\u0002\u0002\u0002\u04f5\u0469\u0003\u0002\u0002\u0002\u04f5",
    "\u046b\u0003\u0002\u0002\u0002\u04f5\u046d\u0003\u0002\u0002\u0002\u04f5",
    "\u0470\u0003\u0002\u0002\u0002\u04f5\u0472\u0003\u0002\u0002\u0002\u04f5",
    "\u0474\u0003\u0002\u0002\u0002\u04f5\u0476\u0003\u0002\u0002\u0002\u04f5",
    "\u0478\u0003\u0002\u0002\u0002\u04f5\u047a\u0003\u0002\u0002\u0002\u04f5",
    "\u047c\u0003\u0002\u0002\u0002\u04f5\u047e\u0003\u0002\u0002\u0002\u04f5",
    "\u0480\u0003\u0002\u0002\u0002\u04f5\u0482\u0003\u0002\u0002\u0002\u04f5",
    "\u0484\u0003\u0002\u0002\u0002\u04f5\u0487\u0003\u0002\u0002\u0002\u04f5",
    "\u048a\u0003\u0002\u0002\u0002\u04f5\u0490\u0003\u0002\u0002\u0002\u04f5",
    "\u0496\u0003\u0002\u0002\u0002\u04f5\u049c\u0003\u0002\u0002\u0002\u04f5",
    "\u04a2\u0003\u0002\u0002\u0002\u04f5\u04a8\u0003\u0002\u0002\u0002\u04f5",
    "\u04b0\u0003\u0002\u0002\u0002\u04f5\u04b7\u0003\u0002\u0002\u0002\u04f5",
    "\u04bd\u0003\u0002\u0002\u0002\u04f5\u04c3\u0003\u0002\u0002\u0002\u04f5",
    "\u04c9\u0003\u0002\u0002\u0002\u04f5\u04ce\u0003\u0002\u0002\u0002\u04f5",
    "\u04d6\u0003\u0002\u0002\u0002\u04f5\u04de\u0003\u0002\u0002\u0002\u04f5",
    "\u04e7\u0003\u0002\u0002\u0002\u04f5\u04f0\u0003\u0002\u0002\u0002\u04f5",
    "\u04f2\u0003\u0002\u0002\u0002\u04f5\u04f3\u0003\u0002\u0002\u0002\u04f5",
    "\u04f4\u0003\u0002\u0002\u0002\u04f6\u0017\u0003\u0002\u0002\u0002\u04f7",
    "\u04f9\u00077\u0002\u0002\u04f8\u04fa\u0007\u00e7\u0002\u0002\u04f9",
    "\u04f8\u0003\u0002\u0002\u0002\u04f9\u04fa\u0003\u0002\u0002\u0002\u04fa",
    "\u04fc\u0003\u0002\u0002\u0002\u04fb\u04fd\u0007Y\u0002\u0002\u04fc",
    "\u04fb\u0003\u0002\u0002\u0002\u04fc\u04fd\u0003\u0002\u0002\u0002\u04fd",
    "\u04fe\u0003\u0002\u0002\u0002\u04fe\u0502\u0007\u00e3\u0002\u0002\u04ff",
    "\u0500\u0007o\u0002\u0002\u0500\u0501\u0007\u0098\u0002\u0002\u0501",
    "\u0503\u0007U\u0002\u0002\u0502\u04ff\u0003\u0002\u0002\u0002\u0502",
    "\u0503\u0003\u0002\u0002\u0002\u0503\u0504\u0003\u0002\u0002\u0002\u0504",
    "\u0505\u0005\u00b8]\u0002\u0505\u0019\u0003\u0002\u0002\u0002\u0506",
    "\u0507\u00077\u0002\u0002\u0507\u0509\u0007\u00a0\u0002\u0002\u0508",
    "\u0506\u0003\u0002\u0002\u0002\u0508\u0509\u0003\u0002\u0002\u0002\u0509",
    "\u050a\u0003\u0002\u0002\u0002\u050a\u050b\u0007\u00bf\u0002\u0002\u050b",
    "\u050c\u0007\u00e3\u0002\u0002\u050c\u050d\u0005\u00b8]\u0002\u050d",
    "\u001b\u0003\u0002\u0002\u0002\u050e\u050f\u0007)\u0002\u0002\u050f",
    "\u0510\u0007 \u0002\u0002\u0510\u0514\u0005\u00a0Q\u0002\u0511\u0512",
    "\u0007\u00da\u0002\u0002\u0512\u0513\u0007 \u0002\u0002\u0513\u0515",
    "\u0005\u00a4S\u0002\u0514\u0511\u0003\u0002\u0002\u0002\u0514\u0515",
    "\u0003\u0002\u0002\u0002\u0515\u0516\u0003\u0002\u0002\u0002\u0516\u0517",
    "\u0007{\u0002\u0002\u0517\u0518\u0007\u012d\u0002\u0002\u0518\u0519",
    "\u0007\u001f\u0002\u0002\u0519\u001d\u0003\u0002\u0002\u0002\u051a\u051b",
    "\u0007\u00d7\u0002\u0002\u051b\u051c\u0007 \u0002\u0002\u051c\u051d",
    "\u0005\u00a0Q\u0002\u051d\u0520\u0007\u009c\u0002\u0002\u051e\u0521",
    "\u0005H%\u0002\u051f\u0521\u0005J&\u0002\u0520\u051e\u0003\u0002\u0002",
    "\u0002\u0520\u051f\u0003\u0002\u0002\u0002\u0521\u0525\u0003\u0002\u0002",
    "\u0002\u0522\u0523\u0007\u00dd\u0002\u0002\u0523\u0524\u0007\u0018\u0002",
    "\u0002\u0524\u0526\u0007I\u0002\u0002\u0525\u0522\u0003\u0002\u0002",
    "\u0002\u0525\u0526\u0003\u0002\u0002\u0002\u0526\u001f\u0003\u0002\u0002",
    "\u0002\u0527\u0528\u0007\u008b\u0002\u0002\u0528\u0529\u0007\u0129\u0002",
    "\u0002\u0529!\u0003\u0002\u0002\u0002\u052a\u052b\u0007/\u0002\u0002",
    "\u052b\u052c\u0007\u0129\u0002\u0002\u052c#\u0003\u0002\u0002\u0002",
    "\u052d\u052f\u00054\u001b\u0002\u052e\u052d\u0003\u0002\u0002\u0002",
    "\u052e\u052f\u0003\u0002\u0002\u0002\u052f\u0530\u0003\u0002\u0002\u0002",
    "\u0530\u0531\u0005Z.\u0002\u0531\u0532\u0005V,\u0002\u0532%\u0003\u0002",
    "\u0002\u0002\u0533\u0534\u0007x\u0002\u0002\u0534\u0536\u0007\u00a8",
    "\u0002\u0002\u0535\u0537\u0007\u00e3\u0002\u0002\u0536\u0535\u0003\u0002",
    "\u0002\u0002\u0536\u0537\u0003\u0002\u0002\u0002\u0537\u0538\u0003\u0002",
    "\u0002\u0002\u0538\u053f\u0005\u00b8]\u0002\u0539\u053d\u0005*\u0016",
    "\u0002\u053a\u053b\u0007o\u0002\u0002\u053b\u053c\u0007\u0098\u0002",
    "\u0002\u053c\u053e\u0007U\u0002\u0002\u053d\u053a\u0003\u0002\u0002",
    "\u0002\u053d\u053e\u0003\u0002\u0002\u0002\u053e\u0540\u0003\u0002\u0002",
    "\u0002\u053f\u0539\u0003\u0002\u0002\u0002\u053f\u0540\u0003\u0002\u0002",
    "\u0002\u0540\u0542\u0003\u0002\u0002\u0002\u0541\u0543\u0005\u00a0Q",
    "\u0002\u0542\u0541\u0003\u0002\u0002\u0002\u0542\u0543\u0003\u0002\u0002",
    "\u0002\u0543\u0571\u0003\u0002\u0002\u0002\u0544\u0545\u0007x\u0002",
    "\u0002\u0545\u0547\u0007{\u0002\u0002\u0546\u0548\u0007\u00e3\u0002",
    "\u0002\u0547\u0546\u0003\u0002\u0002\u0002\u0547\u0548\u0003\u0002\u0002",
    "\u0002\u0548\u0549\u0003\u0002\u0002\u0002\u0549\u054b\u0005\u00b8]",
    "\u0002\u054a\u054c\u0005*\u0016\u0002\u054b\u054a\u0003\u0002\u0002",
    "\u0002\u054b\u054c\u0003\u0002\u0002\u0002\u054c\u0550\u0003\u0002\u0002",
    "\u0002\u054d\u054e\u0007o\u0002\u0002\u054e\u054f\u0007\u0098\u0002",
    "\u0002\u054f\u0551\u0007U\u0002\u0002\u0550\u054d\u0003\u0002\u0002",
    "\u0002\u0550\u0551\u0003\u0002\u0002\u0002\u0551\u0553\u0003\u0002\u0002",
    "\u0002\u0552\u0554\u0005\u00a0Q\u0002\u0553\u0552\u0003\u0002\u0002",
    "\u0002\u0553\u0554\u0003\u0002\u0002\u0002\u0554\u0571\u0003\u0002\u0002",
    "\u0002\u0555\u0556\u0007x\u0002\u0002\u0556\u0558\u0007\u00a8\u0002",
    "\u0002\u0557\u0559\u0007\u008a\u0002\u0002\u0558\u0557\u0003\u0002\u0002",
    "\u0002\u0558\u0559\u0003\u0002\u0002\u0002\u0559\u055a\u0003\u0002\u0002",
    "\u0002\u055a\u055b\u0007J\u0002\u0002\u055b\u055d\u0007\u0129\u0002",
    "\u0002\u055c\u055e\u0005\u00b4[\u0002\u055d\u055c\u0003\u0002\u0002",
    "\u0002\u055d\u055e\u0003\u0002\u0002\u0002\u055e\u0560\u0003\u0002\u0002",
    "\u0002\u055f\u0561\u0005L\'\u0002\u0560\u055f\u0003\u0002\u0002\u0002",
    "\u0560\u0561\u0003\u0002\u0002\u0002\u0561\u0571\u0003\u0002\u0002\u0002",
    "\u0562\u0563\u0007x\u0002\u0002\u0563\u0565\u0007\u00a8\u0002\u0002",
    "\u0564\u0566\u0007\u008a\u0002\u0002\u0565\u0564\u0003\u0002\u0002\u0002",
    "\u0565\u0566\u0003\u0002\u0002\u0002\u0566\u0567\u0003\u0002\u0002\u0002",
    "\u0567\u0569\u0007J\u0002\u0002\u0568\u056a\u0007\u0129\u0002\u0002",
    "\u0569\u0568\u0003\u0002\u0002\u0002\u0569\u056a\u0003\u0002\u0002\u0002",
    "\u056a\u056b\u0003\u0002\u0002\u0002\u056b\u056e\u00058\u001d\u0002",
    "\u056c\u056d\u0007\u009f\u0002\u0002\u056d\u056f\u0005@!\u0002\u056e",
    "\u056c\u0003\u0002\u0002\u0002\u056e\u056f\u0003\u0002\u0002\u0002\u056f",
    "\u0571\u0003\u0002\u0002\u0002\u0570\u0533\u0003\u0002\u0002\u0002\u0570",
    "\u0544\u0003\u0002\u0002\u0002\u0570\u0555\u0003\u0002\u0002\u0002\u0570",
    "\u0562\u0003\u0002\u0002\u0002\u0571\'\u0003\u0002\u0002\u0002\u0572",
    "\u0574\u0005*\u0016\u0002\u0573\u0575\u0005 \u0011\u0002\u0574\u0573",
    "\u0003\u0002\u0002\u0002\u0574\u0575\u0003\u0002\u0002\u0002\u0575)",
    "\u0003\u0002\u0002\u0002\u0576\u0577\u0007\u00a9\u0002\u0002\u0577\u0578",
    "\u0007\u0004\u0002\u0002\u0578\u057d\u0005,\u0017\u0002\u0579\u057a",
    "\u0007\u0005\u0002\u0002\u057a\u057c\u0005,\u0017\u0002\u057b\u0579",
    "\u0003\u0002\u0002\u0002\u057c\u057f\u0003\u0002\u0002\u0002\u057d\u057b",
    "\u0003\u0002\u0002\u0002\u057d\u057e\u0003\u0002\u0002\u0002\u057e\u0580",
    "\u0003\u0002\u0002\u0002\u057f\u057d\u0003\u0002\u0002\u0002\u0580\u0581",
    "\u0007\u0006\u0002\u0002\u0581+\u0003\u0002\u0002\u0002\u0582\u0585",
    "\u0005\u012a\u0096\u0002\u0583\u0584\u0007\u0117\u0002\u0002\u0584\u0586",
    "\u0005\u00d4k\u0002\u0585\u0583\u0003\u0002\u0002\u0002\u0585\u0586",
    "\u0003\u0002\u0002\u0002\u0586-\u0003\u0002\u0002\u0002\u0587\u0588",
    "\t\u0010\u0002\u0002\u0588/\u0003\u0002\u0002\u0002\u0589\u058f\u0005",
    "\u0124\u0093\u0002\u058a\u058f\u0007\u0129\u0002\u0002\u058b\u058f\u0005",
    "\u00d6l\u0002\u058c\u058f\u0005\u00d8m\u0002\u058d\u058f\u0005\u00da",
    "n\u0002\u058e\u0589\u0003\u0002\u0002\u0002\u058e\u058a\u0003\u0002",
    "\u0002\u0002\u058e\u058b\u0003\u0002\u0002\u0002\u058e\u058c\u0003\u0002",
    "\u0002\u0002\u058e\u058d\u0003\u0002\u0002\u0002\u058f1\u0003\u0002",
    "\u0002\u0002\u0590\u0595\u0005\u012a\u0096\u0002\u0591\u0592\u0007\u0007",
    "\u0002\u0002\u0592\u0594\u0005\u012a\u0096\u0002\u0593\u0591\u0003\u0002",
    "\u0002\u0002\u0594\u0597\u0003\u0002\u0002\u0002\u0595\u0593\u0003\u0002",
    "\u0002\u0002\u0595\u0596\u0003\u0002\u0002\u0002\u05963\u0003\u0002",
    "\u0002\u0002\u0597\u0595\u0003\u0002\u0002\u0002\u0598\u0599\u0007\u0108",
    "\u0002\u0002\u0599\u059e\u00056\u001c\u0002\u059a\u059b\u0007\u0005",
    "\u0002\u0002\u059b\u059d\u00056\u001c\u0002\u059c\u059a\u0003\u0002",
    "\u0002\u0002\u059d\u05a0\u0003\u0002\u0002\u0002\u059e\u059c\u0003\u0002",
    "\u0002\u0002\u059e\u059f\u0003\u0002\u0002\u0002\u059f5\u0003\u0002",
    "\u0002\u0002\u05a0\u059e\u0003\u0002\u0002\u0002\u05a1\u05a3\u0005\u0126",
    "\u0094\u0002\u05a2\u05a4\u0005\u00a0Q\u0002\u05a3\u05a2\u0003\u0002",
    "\u0002\u0002\u05a3\u05a4\u0003\u0002\u0002\u0002\u05a4\u05a6\u0003\u0002",
    "\u0002\u0002\u05a5\u05a7\u0007\u0018\u0002\u0002\u05a6\u05a5\u0003\u0002",
    "\u0002\u0002\u05a6\u05a7\u0003\u0002\u0002\u0002\u05a7\u05a8\u0003\u0002",
    "\u0002\u0002\u05a8\u05a9\u0007\u0004\u0002\u0002\u05a9\u05aa\u0005$",
    "\u0013\u0002\u05aa\u05ab\u0007\u0006\u0002\u0002\u05ab7\u0003\u0002",
    "\u0002\u0002\u05ac\u05ad\u0007\u0101\u0002\u0002\u05ad\u05ae\u0005\u00b8",
    "]\u0002\u05ae9\u0003\u0002\u0002\u0002\u05af\u05bb\u0005> \u0002\u05b0",
    "\u05b1\u0007\u00aa\u0002\u0002\u05b1\u05b2\u0007 \u0002\u0002\u05b2",
    "\u05bb\u0005\u00c2b\u0002\u05b3\u05bb\u0005\u001e\u0010\u0002\u05b4",
    "\u05bb\u0005\u001c\u000f\u0002\u05b5\u05bb\u0005\u00b4[\u0002\u05b6",
    "\u05bb\u0005L\'\u0002\u05b7\u05bb\u0005 \u0011\u0002\u05b8\u05bb\u0005",
    "\"\u0012\u0002\u05b9\u05bb\u0005<\u001f\u0002\u05ba\u05af\u0003\u0002",
    "\u0002\u0002\u05ba\u05b0\u0003\u0002\u0002\u0002\u05ba\u05b3\u0003\u0002",
    "\u0002\u0002\u05ba\u05b4\u0003\u0002\u0002\u0002\u05ba\u05b5\u0003\u0002",
    "\u0002\u0002\u05ba\u05b6\u0003\u0002\u0002\u0002\u05ba\u05b7\u0003\u0002",
    "\u0002\u0002\u05ba\u05b8\u0003\u0002\u0002\u0002\u05ba\u05b9\u0003\u0002",
    "\u0002\u0002\u05bb\u05be\u0003\u0002\u0002\u0002\u05bc\u05ba\u0003\u0002",
    "\u0002\u0002\u05bc\u05bd\u0003\u0002\u0002\u0002\u05bd;\u0003\u0002",
    "\u0002\u0002\u05be\u05bc\u0003\u0002\u0002\u0002\u05bf\u05c0\u0007\u00e6",
    "\u0002\u0002\u05c0\u05c1\u0005@!\u0002\u05c1=\u0003\u0002\u0002\u0002",
    "\u05c2\u05c3\u0007\u009f\u0002\u0002\u05c3\u05c4\u0005@!\u0002\u05c4",
    "?\u0003\u0002\u0002\u0002\u05c5\u05c6\u0007\u0004\u0002\u0002\u05c6",
    "\u05cb\u0005B\"\u0002\u05c7\u05c8\u0007\u0005\u0002\u0002\u05c8\u05ca",
    "\u0005B\"\u0002\u05c9\u05c7\u0003\u0002\u0002\u0002\u05ca\u05cd\u0003",
    "\u0002\u0002\u0002\u05cb\u05c9\u0003\u0002\u0002\u0002\u05cb\u05cc\u0003",
    "\u0002\u0002\u0002\u05cc\u05ce\u0003\u0002\u0002\u0002\u05cd\u05cb\u0003",
    "\u0002\u0002\u0002\u05ce\u05cf\u0007\u0006\u0002\u0002\u05cfA\u0003",
    "\u0002\u0002\u0002\u05d0\u05d5\u0005D#\u0002\u05d1\u05d3\u0007\u0117",
    "\u0002\u0002\u05d2\u05d1\u0003\u0002\u0002\u0002\u05d2\u05d3\u0003\u0002",
    "\u0002\u0002\u05d3\u05d4\u0003\u0002\u0002\u0002\u05d4\u05d6\u0005F",
    "$\u0002\u05d5\u05d2\u0003\u0002\u0002\u0002\u05d5\u05d6\u0003\u0002",
    "\u0002\u0002\u05d6C\u0003\u0002\u0002\u0002\u05d7\u05dc\u0005\u012a",
    "\u0096\u0002\u05d8\u05d9\u0007\u0007\u0002\u0002\u05d9\u05db\u0005\u012a",
    "\u0096\u0002\u05da\u05d8\u0003\u0002\u0002\u0002\u05db\u05de\u0003\u0002",
    "\u0002\u0002\u05dc\u05da\u0003\u0002\u0002\u0002\u05dc\u05dd\u0003\u0002",
    "\u0002\u0002\u05dd\u05e1\u0003\u0002\u0002\u0002\u05de\u05dc\u0003\u0002",
    "\u0002\u0002\u05df\u05e1\u0007\u0129\u0002\u0002\u05e0\u05d7\u0003\u0002",
    "\u0002\u0002\u05e0\u05df\u0003\u0002\u0002\u0002\u05e1E\u0003\u0002",
    "\u0002\u0002\u05e2\u05e7\u0007\u012d\u0002\u0002\u05e3\u05e7\u0007\u012f",
    "\u0002\u0002\u05e4\u05e7\u0005\u00dco\u0002\u05e5\u05e7\u0007\u0129",
    "\u0002\u0002\u05e6\u05e2\u0003\u0002\u0002\u0002\u05e6\u05e3\u0003\u0002",
    "\u0002\u0002\u05e6\u05e4\u0003\u0002\u0002\u0002\u05e6\u05e5\u0003\u0002",
    "\u0002\u0002\u05e7G\u0003\u0002\u0002\u0002\u05e8\u05e9\u0007\u0004",
    "\u0002\u0002\u05e9\u05ee\u0005\u00d4k\u0002\u05ea\u05eb\u0007\u0005",
    "\u0002\u0002\u05eb\u05ed\u0005\u00d4k\u0002\u05ec\u05ea\u0003\u0002",
    "\u0002\u0002\u05ed\u05f0\u0003\u0002\u0002\u0002\u05ee\u05ec\u0003\u0002",
    "\u0002\u0002\u05ee\u05ef\u0003\u0002\u0002\u0002\u05ef\u05f1\u0003\u0002",
    "\u0002\u0002\u05f0\u05ee\u0003\u0002\u0002\u0002\u05f1\u05f2\u0007\u0006",
    "\u0002\u0002\u05f2I\u0003\u0002\u0002\u0002\u05f3\u05f4\u0007\u0004",
    "\u0002\u0002\u05f4\u05f9\u0005H%\u0002\u05f5\u05f6\u0007\u0005\u0002",
    "\u0002\u05f6\u05f8\u0005H%\u0002\u05f7\u05f5\u0003\u0002\u0002\u0002",
    "\u05f8\u05fb\u0003\u0002\u0002\u0002\u05f9\u05f7\u0003\u0002\u0002\u0002",
    "\u05f9\u05fa\u0003\u0002\u0002\u0002\u05fa\u05fc\u0003\u0002\u0002\u0002",
    "\u05fb\u05f9\u0003\u0002\u0002\u0002\u05fc\u05fd\u0007\u0006\u0002\u0002",
    "\u05fdK\u0003\u0002\u0002\u0002\u05fe\u05ff\u0007\u00dd\u0002\u0002",
    "\u05ff\u0600\u0007\u0018\u0002\u0002\u0600\u0605\u0005N(\u0002\u0601",
    "\u0602\u0007\u00dd\u0002\u0002\u0602\u0603\u0007 \u0002\u0002\u0603",
    "\u0605\u0005P)\u0002\u0604\u05fe\u0003\u0002\u0002\u0002\u0604\u0601",
    "\u0003\u0002\u0002\u0002\u0605M\u0003\u0002\u0002\u0002\u0606\u0607",
    "\u0007w\u0002\u0002\u0607\u0608\u0007\u0129\u0002\u0002\u0608\u0609",
    "\u0007\u00a4\u0002\u0002\u0609\u060c\u0007\u0129\u0002\u0002\u060a\u060c",
    "\u0005\u012a\u0096\u0002\u060b\u0606\u0003\u0002\u0002\u0002\u060b\u060a",
    "\u0003\u0002\u0002\u0002\u060cO\u0003\u0002\u0002\u0002\u060d\u0611",
    "\u0007\u0129\u0002\u0002\u060e\u060f\u0007\u0108\u0002\u0002\u060f\u0610",
    "\u0007\u00d1\u0002\u0002\u0610\u0612\u0005@!\u0002\u0611\u060e\u0003",
    "\u0002\u0002\u0002\u0611\u0612\u0003\u0002\u0002\u0002\u0612Q\u0003",
    "\u0002\u0002\u0002\u0613\u0614\u0005\u012a\u0096\u0002\u0614\u0615\u0007",
    "\u0129\u0002\u0002\u0615S\u0003\u0002\u0002\u0002\u0616\u0617\u0005",
    "&\u0014\u0002\u0617\u0618\u0005Z.\u0002\u0618\u0619\u0005V,\u0002\u0619",
    "\u064a\u0003\u0002\u0002\u0002\u061a\u061c\u0005\u0080A\u0002\u061b",
    "\u061d\u0005X-\u0002\u061c\u061b\u0003\u0002\u0002\u0002\u061d\u061e",
    "\u0003\u0002\u0002\u0002\u061e\u061c\u0003\u0002\u0002\u0002\u061e\u061f",
    "\u0003\u0002\u0002\u0002\u061f\u064a\u0003\u0002\u0002\u0002\u0620\u0621",
    "\u0007D\u0002\u0002\u0621\u0622\u0007f\u0002\u0002\u0622\u0623\u0005",
    "\u00b8]\u0002\u0623\u0625\u0005\u00b2Z\u0002\u0624\u0626\u0005x=\u0002",
    "\u0625\u0624\u0003\u0002\u0002\u0002\u0625\u0626\u0003\u0002\u0002\u0002",
    "\u0626\u064a\u0003\u0002\u0002\u0002\u0627\u0628\u0007\u00fe\u0002\u0002",
    "\u0628\u0629\u0005\u00b8]\u0002\u0629\u062a\u0005\u00b2Z\u0002\u062a",
    "\u062c\u0005j6\u0002\u062b\u062d\u0005x=\u0002\u062c\u062b\u0003\u0002",
    "\u0002\u0002\u062c\u062d\u0003\u0002\u0002\u0002\u062d\u064a\u0003\u0002",
    "\u0002\u0002\u062e\u062f\u0007\u0092\u0002\u0002\u062f\u0630\u0007{",
    "\u0002\u0002\u0630\u0631\u0005\u00b8]\u0002\u0631\u0632\u0005\u00b2",
    "Z\u0002\u0632\u0638\u0007\u0101\u0002\u0002\u0633\u0639\u0005\u00b8",
    "]\u0002\u0634\u0635\u0007\u0004\u0002\u0002\u0635\u0636\u0005$\u0013",
    "\u0002\u0636\u0637\u0007\u0006\u0002\u0002\u0637\u0639\u0003\u0002\u0002",
    "\u0002\u0638\u0633\u0003\u0002\u0002\u0002\u0638\u0634\u0003\u0002\u0002",
    "\u0002\u0639\u063a\u0003\u0002\u0002\u0002\u063a\u063b\u0005\u00b2Z",
    "\u0002\u063b\u063c\u0007\u009c\u0002\u0002\u063c\u0640\u0005\u00ccg",
    "\u0002\u063d\u063f\u0005l7\u0002\u063e\u063d\u0003\u0002\u0002\u0002",
    "\u063f\u0642\u0003\u0002\u0002\u0002\u0640\u063e\u0003\u0002\u0002\u0002",
    "\u0640\u0641\u0003\u0002\u0002\u0002\u0641\u0646\u0003\u0002\u0002\u0002",
    "\u0642\u0640\u0003\u0002\u0002\u0002\u0643\u0645\u0005n8\u0002\u0644",
    "\u0643\u0003\u0002\u0002\u0002\u0645\u0648\u0003\u0002\u0002\u0002\u0646",
    "\u0644\u0003\u0002\u0002\u0002\u0646\u0647\u0003\u0002\u0002\u0002\u0647",
    "\u064a\u0003\u0002\u0002\u0002\u0648\u0646\u0003\u0002\u0002\u0002\u0649",
    "\u0616\u0003\u0002\u0002\u0002\u0649\u061a\u0003\u0002\u0002\u0002\u0649",
    "\u0620\u0003\u0002\u0002\u0002\u0649\u0627\u0003\u0002\u0002\u0002\u0649",
    "\u062e\u0003\u0002\u0002\u0002\u064aU\u0003\u0002\u0002\u0002\u064b",
    "\u064c\u0007\u00a1\u0002\u0002\u064c\u064d\u0007 \u0002\u0002\u064d",
    "\u0652\u0005^0\u0002\u064e\u064f\u0007\u0005\u0002\u0002\u064f\u0651",
    "\u0005^0\u0002\u0650\u064e\u0003\u0002\u0002\u0002\u0651\u0654\u0003",
    "\u0002\u0002\u0002\u0652\u0650\u0003\u0002\u0002\u0002\u0652\u0653\u0003",
    "\u0002\u0002\u0002\u0653\u0656\u0003\u0002\u0002\u0002\u0654\u0652\u0003",
    "\u0002\u0002\u0002\u0655\u064b\u0003\u0002\u0002\u0002\u0655\u0656\u0003",
    "\u0002\u0002\u0002\u0656\u0661\u0003\u0002\u0002\u0002\u0657\u0658\u0007",
    "(\u0002\u0002\u0658\u0659\u0007 \u0002\u0002\u0659\u065e\u0005\u00ca",
    "f\u0002\u065a\u065b\u0007\u0005\u0002\u0002\u065b\u065d\u0005\u00ca",
    "f\u0002\u065c\u065a\u0003\u0002\u0002\u0002\u065d\u0660\u0003\u0002",
    "\u0002\u0002\u065e\u065c\u0003\u0002\u0002\u0002\u065e\u065f\u0003\u0002",
    "\u0002\u0002\u065f\u0662\u0003\u0002\u0002\u0002\u0660\u065e\u0003\u0002",
    "\u0002\u0002\u0661\u0657\u0003\u0002\u0002\u0002\u0661\u0662\u0003\u0002",
    "\u0002\u0002\u0662\u066d\u0003\u0002\u0002\u0002\u0663\u0664\u0007L",
    "\u0002\u0002\u0664\u0665\u0007 \u0002\u0002\u0665\u066a\u0005\u00ca",
    "f\u0002\u0666\u0667\u0007\u0005\u0002\u0002\u0667\u0669\u0005\u00ca",
    "f\u0002\u0668\u0666\u0003\u0002\u0002\u0002\u0669\u066c\u0003\u0002",
    "\u0002\u0002\u066a\u0668\u0003\u0002\u0002\u0002\u066a\u066b\u0003\u0002",
    "\u0002\u0002\u066b\u066e\u0003\u0002\u0002\u0002\u066c\u066a\u0003\u0002",
    "\u0002\u0002\u066d\u0663\u0003\u0002\u0002\u0002\u066d\u066e\u0003\u0002",
    "\u0002\u0002\u066e\u0679\u0003\u0002\u0002\u0002\u066f\u0670\u0007\u00d9",
    "\u0002\u0002\u0670\u0671\u0007 \u0002\u0002\u0671\u0676\u0005^0\u0002",
    "\u0672\u0673\u0007\u0005\u0002\u0002\u0673\u0675\u0005^0\u0002\u0674",
    "\u0672\u0003\u0002\u0002\u0002\u0675\u0678\u0003\u0002\u0002\u0002\u0676",
    "\u0674\u0003\u0002\u0002\u0002\u0676\u0677\u0003\u0002\u0002\u0002\u0677",
    "\u067a\u0003\u0002\u0002\u0002\u0678\u0676\u0003\u0002\u0002\u0002\u0679",
    "\u066f\u0003\u0002\u0002\u0002\u0679\u067a\u0003\u0002\u0002\u0002\u067a",
    "\u067c\u0003\u0002\u0002\u0002\u067b\u067d\u0005\u0116\u008c\u0002\u067c",
    "\u067b\u0003\u0002\u0002\u0002\u067c\u067d\u0003\u0002\u0002\u0002\u067d",
    "\u0683\u0003\u0002\u0002\u0002\u067e\u0681\u0007\u0086\u0002\u0002\u067f",
    "\u0682\u0007\u0010\u0002\u0002\u0680\u0682\u0005\u00caf\u0002\u0681",
    "\u067f\u0003\u0002\u0002\u0002\u0681\u0680\u0003\u0002\u0002\u0002\u0682",
    "\u0684\u0003\u0002\u0002\u0002\u0683\u067e\u0003\u0002\u0002\u0002\u0683",
    "\u0684\u0003\u0002\u0002\u0002\u0684W\u0003\u0002\u0002\u0002\u0685",
    "\u0686\u0005&\u0014\u0002\u0686\u0687\u0005b2\u0002\u0687Y\u0003\u0002",
    "\u0002\u0002\u0688\u0689\b.\u0001\u0002\u0689\u068a\u0005\\/\u0002\u068a",
    "\u06a2\u0003\u0002\u0002\u0002\u068b\u068c\f\u0005\u0002\u0002\u068c",
    "\u068d\u0006.\u0003\u0002\u068d\u068f\t\u0011\u0002\u0002\u068e\u0690",
    "\u0005\u0092J\u0002\u068f\u068e\u0003\u0002\u0002\u0002\u068f\u0690",
    "\u0003\u0002\u0002\u0002\u0690\u0691\u0003\u0002\u0002\u0002\u0691\u06a1",
    "\u0005Z.\u0006\u0692\u0693\f\u0004\u0002\u0002\u0693\u0694\u0006.\u0005",
    "\u0002\u0694\u0696\u0007y\u0002\u0002\u0695\u0697\u0005\u0092J\u0002",
    "\u0696\u0695\u0003\u0002\u0002\u0002\u0696\u0697\u0003\u0002\u0002\u0002",
    "\u0697\u0698\u0003\u0002\u0002\u0002\u0698\u06a1\u0005Z.\u0005\u0699",
    "\u069a\f\u0003\u0002\u0002\u069a\u069b\u0006.\u0007\u0002\u069b\u069d",
    "\t\u0012\u0002\u0002\u069c\u069e\u0005\u0092J\u0002\u069d\u069c\u0003",
    "\u0002\u0002\u0002\u069d\u069e\u0003\u0002\u0002\u0002\u069e\u069f\u0003",
    "\u0002\u0002\u0002\u069f\u06a1\u0005Z.\u0004\u06a0\u068b\u0003\u0002",
    "\u0002\u0002\u06a0\u0692\u0003\u0002\u0002\u0002\u06a0\u0699\u0003\u0002",
    "\u0002\u0002\u06a1\u06a4\u0003\u0002\u0002\u0002\u06a2\u06a0\u0003\u0002",
    "\u0002\u0002\u06a2\u06a3\u0003\u0002\u0002\u0002\u06a3[\u0003\u0002",
    "\u0002\u0002\u06a4\u06a2\u0003\u0002\u0002\u0002\u06a5\u06af\u0005d",
    "3\u0002\u06a6\u06af\u0005`1\u0002\u06a7\u06a8\u0007\u00e3\u0002\u0002",
    "\u06a8\u06af\u0005\u00b8]\u0002\u06a9\u06af\u0005\u00aeX\u0002\u06aa",
    "\u06ab\u0007\u0004\u0002\u0002\u06ab\u06ac\u0005$\u0013\u0002\u06ac",
    "\u06ad\u0007\u0006\u0002\u0002\u06ad\u06af\u0003\u0002\u0002\u0002\u06ae",
    "\u06a5\u0003\u0002\u0002\u0002\u06ae\u06a6\u0003\u0002\u0002\u0002\u06ae",
    "\u06a7\u0003\u0002\u0002\u0002\u06ae\u06a9\u0003\u0002\u0002\u0002\u06ae",
    "\u06aa\u0003\u0002\u0002\u0002\u06af]\u0003\u0002\u0002\u0002\u06b0",
    "\u06b2\u0005\u00caf\u0002\u06b1\u06b3\t\u0013\u0002\u0002\u06b2\u06b1",
    "\u0003\u0002\u0002\u0002\u06b2\u06b3\u0003\u0002\u0002\u0002\u06b3\u06b6",
    "\u0003\u0002\u0002\u0002\u06b4\u06b5\u0007\u009a\u0002\u0002\u06b5\u06b7",
    "\t\u0014\u0002\u0002\u06b6\u06b4\u0003\u0002\u0002\u0002\u06b6\u06b7",
    "\u0003\u0002\u0002\u0002\u06b7_\u0003\u0002\u0002\u0002\u06b8\u06ba",
    "\u0005\u0080A\u0002\u06b9\u06bb\u0005b2\u0002\u06ba\u06b9\u0003\u0002",
    "\u0002\u0002\u06bb\u06bc\u0003\u0002\u0002\u0002\u06bc\u06ba\u0003\u0002",
    "\u0002\u0002\u06bc\u06bd\u0003\u0002\u0002\u0002\u06bda\u0003\u0002",
    "\u0002\u0002\u06be\u06c0\u0005f4\u0002\u06bf\u06c1\u0005x=\u0002\u06c0",
    "\u06bf\u0003\u0002\u0002\u0002\u06c0\u06c1\u0003\u0002\u0002\u0002\u06c1",
    "\u06c2\u0003\u0002\u0002\u0002\u06c2\u06c3\u0005V,\u0002\u06c3\u06da",
    "\u0003\u0002\u0002\u0002\u06c4\u06c8\u0005h5\u0002\u06c5\u06c7\u0005",
    "\u0090I\u0002\u06c6\u06c5\u0003\u0002\u0002\u0002\u06c7\u06ca\u0003",
    "\u0002\u0002\u0002\u06c8\u06c6\u0003\u0002\u0002\u0002\u06c8\u06c9\u0003",
    "\u0002\u0002\u0002\u06c9\u06cc\u0003\u0002\u0002\u0002\u06ca\u06c8\u0003",
    "\u0002\u0002\u0002\u06cb\u06cd\u0005x=\u0002\u06cc\u06cb\u0003\u0002",
    "\u0002\u0002\u06cc\u06cd\u0003\u0002\u0002\u0002\u06cd\u06cf\u0003\u0002",
    "\u0002\u0002\u06ce\u06d0\u0005\u0082B\u0002\u06cf\u06ce\u0003\u0002",
    "\u0002\u0002\u06cf\u06d0\u0003\u0002\u0002\u0002\u06d0\u06d2\u0003\u0002",
    "\u0002\u0002\u06d1\u06d3\u0005z>\u0002\u06d2\u06d1\u0003\u0002\u0002",
    "\u0002\u06d2\u06d3\u0003\u0002\u0002\u0002\u06d3\u06d5\u0003\u0002\u0002",
    "\u0002\u06d4\u06d6\u0005\u0116\u008c\u0002\u06d5\u06d4\u0003\u0002\u0002",
    "\u0002\u06d5\u06d6\u0003\u0002\u0002\u0002\u06d6\u06d7\u0003\u0002\u0002",
    "\u0002\u06d7\u06d8\u0005V,\u0002\u06d8\u06da\u0003\u0002\u0002\u0002",
    "\u06d9\u06be\u0003\u0002\u0002\u0002\u06d9\u06c4\u0003\u0002\u0002\u0002",
    "\u06dac\u0003\u0002\u0002\u0002\u06db\u06dd\u0005f4\u0002\u06dc\u06de",
    "\u0005\u0080A\u0002\u06dd\u06dc\u0003\u0002\u0002\u0002\u06dd\u06de",
    "\u0003\u0002\u0002\u0002\u06de\u06e0\u0003\u0002\u0002\u0002\u06df\u06e1",
    "\u0005x=\u0002\u06e0\u06df\u0003\u0002\u0002\u0002\u06e0\u06e1\u0003",
    "\u0002\u0002\u0002\u06e1\u06f9\u0003\u0002\u0002\u0002\u06e2\u06e4\u0005",
    "h5\u0002\u06e3\u06e5\u0005\u0080A\u0002\u06e4\u06e3\u0003\u0002\u0002",
    "\u0002\u06e4\u06e5\u0003\u0002\u0002\u0002\u06e5\u06e9\u0003\u0002\u0002",
    "\u0002\u06e6\u06e8\u0005\u0090I\u0002\u06e7\u06e6\u0003\u0002\u0002",
    "\u0002\u06e8\u06eb\u0003\u0002\u0002\u0002\u06e9\u06e7\u0003\u0002\u0002",
    "\u0002\u06e9\u06ea\u0003\u0002\u0002\u0002\u06ea\u06ed\u0003\u0002\u0002",
    "\u0002\u06eb\u06e9\u0003\u0002\u0002\u0002\u06ec\u06ee\u0005x=\u0002",
    "\u06ed\u06ec\u0003\u0002\u0002\u0002\u06ed\u06ee\u0003\u0002\u0002\u0002",
    "\u06ee\u06f0\u0003\u0002\u0002\u0002\u06ef\u06f1\u0005\u0082B\u0002",
    "\u06f0\u06ef\u0003\u0002\u0002\u0002\u06f0\u06f1\u0003\u0002\u0002\u0002",
    "\u06f1\u06f3\u0003\u0002\u0002\u0002\u06f2\u06f4\u0005z>\u0002\u06f3",
    "\u06f2\u0003\u0002\u0002\u0002\u06f3\u06f4\u0003\u0002\u0002\u0002\u06f4",
    "\u06f6\u0003\u0002\u0002\u0002\u06f5\u06f7\u0005\u0116\u008c\u0002\u06f6",
    "\u06f5\u0003\u0002\u0002\u0002\u06f6\u06f7\u0003\u0002\u0002\u0002\u06f7",
    "\u06f9\u0003\u0002\u0002\u0002\u06f8\u06db\u0003\u0002\u0002\u0002\u06f8",
    "\u06e2\u0003\u0002\u0002\u0002\u06f9e\u0003\u0002\u0002\u0002\u06fa",
    "\u06fb\u0007\u00cd\u0002\u0002\u06fb\u06fc\u0007\u00f0\u0002\u0002\u06fc",
    "\u06fd\u0007\u0004\u0002\u0002\u06fd\u06fe\u0005\u00c0a\u0002\u06fe",
    "\u06ff\u0007\u0006\u0002\u0002\u06ff\u0705\u0003\u0002\u0002\u0002\u0700",
    "\u0701\u0007\u0090\u0002\u0002\u0701\u0705\u0005\u00c0a\u0002\u0702",
    "\u0703\u0007\u00ba\u0002\u0002\u0703\u0705\u0005\u00c0a\u0002\u0704",
    "\u06fa\u0003\u0002\u0002\u0002\u0704\u0700\u0003\u0002\u0002\u0002\u0704",
    "\u0702\u0003\u0002\u0002\u0002\u0705\u0707\u0003\u0002\u0002\u0002\u0706",
    "\u0708\u0005\u00b4[\u0002\u0707\u0706\u0003\u0002\u0002\u0002\u0707",
    "\u0708\u0003\u0002\u0002\u0002\u0708\u070b\u0003\u0002\u0002\u0002\u0709",
    "\u070a\u0007\u00b8\u0002\u0002\u070a\u070c\u0007\u0129\u0002\u0002\u070b",
    "\u0709\u0003\u0002\u0002\u0002\u070b\u070c\u0003\u0002\u0002\u0002\u070c",
    "\u070d\u0003\u0002\u0002\u0002\u070d\u070e\u0007\u0101\u0002\u0002\u070e",
    "\u071b\u0007\u0129\u0002\u0002\u070f\u0719\u0007\u0018\u0002\u0002\u0710",
    "\u071a\u0005\u00a2R\u0002\u0711\u071a\u0005\u00f2z\u0002\u0712\u0715",
    "\u0007\u0004\u0002\u0002\u0713\u0716\u0005\u00a2R\u0002\u0714\u0716",
    "\u0005\u00f2z\u0002\u0715\u0713\u0003\u0002\u0002\u0002\u0715\u0714",
    "\u0003\u0002\u0002\u0002\u0716\u0717\u0003\u0002\u0002\u0002\u0717\u0718",
    "\u0007\u0006\u0002\u0002\u0718\u071a\u0003\u0002\u0002\u0002\u0719\u0710",
    "\u0003\u0002\u0002\u0002\u0719\u0711\u0003\u0002\u0002\u0002\u0719\u0712",
    "\u0003\u0002\u0002\u0002\u071a\u071c\u0003\u0002\u0002\u0002\u071b\u070f",
    "\u0003\u0002\u0002\u0002\u071b\u071c\u0003\u0002\u0002\u0002\u071c\u071e",
    "\u0003\u0002\u0002\u0002\u071d\u071f\u0005\u00b4[\u0002\u071e\u071d",
    "\u0003\u0002\u0002\u0002\u071e\u071f\u0003\u0002\u0002\u0002\u071f\u0722",
    "\u0003\u0002\u0002\u0002\u0720\u0721\u0007\u00b7\u0002\u0002\u0721\u0723",
    "\u0007\u0129\u0002\u0002\u0722\u0720\u0003\u0002\u0002\u0002\u0722\u0723",
    "\u0003\u0002\u0002\u0002\u0723g\u0003\u0002\u0002\u0002\u0724\u0728",
    "\u0007\u00cd\u0002\u0002\u0725\u0727\u0005|?\u0002\u0726\u0725\u0003",
    "\u0002\u0002\u0002\u0727\u072a\u0003\u0002\u0002\u0002\u0728\u0726\u0003",
    "\u0002\u0002\u0002\u0728\u0729\u0003\u0002\u0002\u0002\u0729\u072c\u0003",
    "\u0002\u0002\u0002\u072a\u0728\u0003\u0002\u0002\u0002\u072b\u072d\u0005",
    "\u0092J\u0002\u072c\u072b\u0003\u0002\u0002\u0002\u072c\u072d\u0003",
    "\u0002\u0002\u0002\u072d\u072e\u0003\u0002\u0002\u0002\u072e\u072f\u0005",
    "\u00c0a\u0002\u072fi\u0003\u0002\u0002\u0002\u0730\u0731\u0007\u00d3",
    "\u0002\u0002\u0731\u0732\u0005t;\u0002\u0732k\u0003\u0002\u0002\u0002",
    "\u0733\u0734\u0007\u0105\u0002\u0002\u0734\u0737\u0007\u0091\u0002\u0002",
    "\u0735\u0736\u0007\u0013\u0002\u0002\u0736\u0738\u0005\u00ccg\u0002",
    "\u0737\u0735\u0003\u0002\u0002\u0002\u0737\u0738\u0003\u0002\u0002\u0002",
    "\u0738\u0739\u0003\u0002\u0002\u0002\u0739\u073a\u0007\u00e9\u0002\u0002",
    "\u073a\u073b\u0005p9\u0002\u073bm\u0003\u0002\u0002\u0002\u073c\u073d",
    "\u0007\u0105\u0002\u0002\u073d\u073e\u0007\u0098\u0002\u0002\u073e\u0741",
    "\u0007\u0091\u0002\u0002\u073f\u0740\u0007\u0013\u0002\u0002\u0740\u0742",
    "\u0005\u00ccg\u0002\u0741\u073f\u0003\u0002\u0002\u0002\u0741\u0742",
    "\u0003\u0002\u0002\u0002\u0742\u0743\u0003\u0002\u0002\u0002\u0743\u0744",
    "\u0007\u00e9\u0002\u0002\u0744\u0745\u0005r:\u0002\u0745o\u0003\u0002",
    "\u0002\u0002\u0746\u074e\u0007D\u0002\u0002\u0747\u0748\u0007\u00fe",
    "\u0002\u0002\u0748\u0749\u0007\u00d3\u0002\u0002\u0749\u074e\u0007\u0121",
    "\u0002\u0002\u074a\u074b\u0007\u00fe\u0002\u0002\u074b\u074c\u0007\u00d3",
    "\u0002\u0002\u074c\u074e\u0005t;\u0002\u074d\u0746\u0003\u0002\u0002",
    "\u0002\u074d\u0747\u0003\u0002\u0002\u0002\u074d\u074a\u0003\u0002\u0002",
    "\u0002\u074eq\u0003\u0002\u0002\u0002\u074f\u0750\u0007x\u0002\u0002",
    "\u0750\u0762\u0007\u0121\u0002\u0002\u0751\u0752\u0007x\u0002\u0002",
    "\u0752\u0753\u0007\u0004\u0002\u0002\u0753\u0754\u0005\u00b6\\\u0002",
    "\u0754\u0755\u0007\u0006\u0002\u0002\u0755\u0756\u0007\u0102\u0002\u0002",
    "\u0756\u0757\u0007\u0004\u0002\u0002\u0757\u075c\u0005\u00caf\u0002",
    "\u0758\u0759\u0007\u0005\u0002\u0002\u0759\u075b\u0005\u00caf\u0002",
    "\u075a\u0758\u0003\u0002\u0002\u0002\u075b\u075e\u0003\u0002\u0002\u0002",
    "\u075c\u075a\u0003\u0002\u0002\u0002\u075c\u075d\u0003\u0002\u0002\u0002",
    "\u075d\u075f\u0003\u0002\u0002\u0002\u075e\u075c\u0003\u0002\u0002\u0002",
    "\u075f\u0760\u0007\u0006\u0002\u0002\u0760\u0762\u0003\u0002\u0002\u0002",
    "\u0761\u074f\u0003\u0002\u0002\u0002\u0761\u0751\u0003\u0002\u0002\u0002",
    "\u0762s\u0003\u0002\u0002\u0002\u0763\u0768\u0005v<\u0002\u0764\u0765",
    "\u0007\u0005\u0002\u0002\u0765\u0767\u0005v<\u0002\u0766\u0764\u0003",
    "\u0002\u0002\u0002\u0767\u076a\u0003\u0002\u0002\u0002\u0768\u0766\u0003",
    "\u0002\u0002\u0002\u0768\u0769\u0003\u0002\u0002\u0002\u0769u\u0003",
    "\u0002\u0002\u0002\u076a\u0768\u0003\u0002\u0002\u0002\u076b\u076c\u0005",
    "\u00b8]\u0002\u076c\u076d\u0007\u0117\u0002\u0002\u076d\u076e\u0005",
    "\u00caf\u0002\u076ew\u0003\u0002\u0002\u0002\u076f\u0770\u0007\u0106",
    "\u0002\u0002\u0770\u0771\u0005\u00ccg\u0002\u0771y\u0003\u0002\u0002",
    "\u0002\u0772\u0773\u0007n\u0002\u0002\u0773\u0774\u0005\u00ccg\u0002",
    "\u0774{\u0003\u0002\u0002\u0002\u0775\u0776\u0007\b\u0002\u0002\u0776",
    "\u077d\u0005~@\u0002\u0777\u0779\u0007\u0005\u0002\u0002\u0778\u0777",
    "\u0003\u0002\u0002\u0002\u0778\u0779\u0003\u0002\u0002\u0002\u0779\u077a",
    "\u0003\u0002\u0002\u0002\u077a\u077c\u0005~@\u0002\u077b\u0778\u0003",
    "\u0002\u0002\u0002\u077c\u077f\u0003\u0002\u0002\u0002\u077d\u077b\u0003",
    "\u0002\u0002\u0002\u077d\u077e\u0003\u0002\u0002\u0002\u077e\u0780\u0003",
    "\u0002\u0002\u0002\u077f\u077d\u0003\u0002\u0002\u0002\u0780\u0781\u0007",
    "\t\u0002\u0002\u0781}\u0003\u0002\u0002\u0002\u0782\u0790\u0005\u012a",
    "\u0096\u0002\u0783\u0784\u0005\u012a\u0096\u0002\u0784\u0785\u0007\u0004",
    "\u0002\u0002\u0785\u078a\u0005\u00d2j\u0002\u0786\u0787\u0007\u0005",
    "\u0002\u0002\u0787\u0789\u0005\u00d2j\u0002\u0788\u0786\u0003\u0002",
    "\u0002\u0002\u0789\u078c\u0003\u0002\u0002\u0002\u078a\u0788\u0003\u0002",
    "\u0002\u0002\u078a\u078b\u0003\u0002\u0002\u0002\u078b\u078d\u0003\u0002",
    "\u0002\u0002\u078c\u078a\u0003\u0002\u0002\u0002\u078d\u078e\u0007\u0006",
    "\u0002\u0002\u078e\u0790\u0003\u0002\u0002\u0002\u078f\u0782\u0003\u0002",
    "\u0002\u0002\u078f\u0783\u0003\u0002\u0002\u0002\u0790\u007f\u0003\u0002",
    "\u0002\u0002\u0791\u0792\u0007f\u0002\u0002\u0792\u0797\u0005\u0094",
    "K\u0002\u0793\u0794\u0007\u0005\u0002\u0002\u0794\u0796\u0005\u0094",
    "K\u0002\u0795\u0793\u0003\u0002\u0002\u0002\u0796\u0799\u0003\u0002",
    "\u0002\u0002\u0797\u0795\u0003\u0002\u0002\u0002\u0797\u0798\u0003\u0002",
    "\u0002\u0002\u0798\u079d\u0003\u0002\u0002\u0002\u0799\u0797\u0003\u0002",
    "\u0002\u0002\u079a\u079c\u0005\u0090I\u0002\u079b\u079a\u0003\u0002",
    "\u0002\u0002\u079c\u079f\u0003\u0002\u0002\u0002\u079d\u079b\u0003\u0002",
    "\u0002\u0002\u079d\u079e\u0003\u0002\u0002\u0002\u079e\u07a1\u0003\u0002",
    "\u0002\u0002\u079f\u079d\u0003\u0002\u0002\u0002\u07a0\u07a2\u0005\u008a",
    "F\u0002\u07a1\u07a0\u0003\u0002\u0002\u0002\u07a1\u07a2\u0003\u0002",
    "\u0002\u0002\u07a2\u0081\u0003\u0002\u0002\u0002\u07a3\u07a4\u0007l",
    "\u0002\u0002\u07a4\u07a5\u0007 \u0002\u0002\u07a5\u07aa\u0005\u0084",
    "C\u0002\u07a6\u07a7\u0007\u0005\u0002\u0002\u07a7\u07a9\u0005\u0084",
    "C\u0002\u07a8\u07a6\u0003\u0002\u0002\u0002\u07a9\u07ac\u0003\u0002",
    "\u0002\u0002\u07aa\u07a8\u0003\u0002\u0002\u0002\u07aa\u07ab\u0003\u0002",
    "\u0002\u0002\u07ab\u07cb\u0003\u0002\u0002\u0002\u07ac\u07aa\u0003\u0002",
    "\u0002\u0002\u07ad\u07ae\u0007l\u0002\u0002\u07ae\u07af\u0007 \u0002",
    "\u0002\u07af\u07b4\u0005\u00caf\u0002\u07b0\u07b1\u0007\u0005\u0002",
    "\u0002\u07b1\u07b3\u0005\u00caf\u0002\u07b2\u07b0\u0003\u0002\u0002",
    "\u0002\u07b3\u07b6\u0003\u0002\u0002\u0002\u07b4\u07b2\u0003\u0002\u0002",
    "\u0002\u07b4\u07b5\u0003\u0002\u0002\u0002\u07b5\u07c8\u0003\u0002\u0002",
    "\u0002\u07b6\u07b4\u0003\u0002\u0002\u0002\u07b7\u07b8\u0007\u0108\u0002",
    "\u0002\u07b8\u07c9\u0007\u00c9\u0002\u0002\u07b9\u07ba\u0007\u0108\u0002",
    "\u0002\u07ba\u07c9\u00079\u0002\u0002\u07bb\u07bc\u0007m\u0002\u0002",
    "\u07bc\u07bd\u0007\u00d5\u0002\u0002\u07bd\u07be\u0007\u0004\u0002\u0002",
    "\u07be\u07c3\u0005\u0088E\u0002\u07bf\u07c0\u0007\u0005\u0002\u0002",
    "\u07c0\u07c2\u0005\u0088E\u0002\u07c1\u07bf\u0003\u0002\u0002\u0002",
    "\u07c2\u07c5\u0003\u0002\u0002\u0002\u07c3\u07c1\u0003\u0002\u0002\u0002",
    "\u07c3\u07c4\u0003\u0002\u0002\u0002\u07c4\u07c6\u0003\u0002\u0002\u0002",
    "\u07c5\u07c3\u0003\u0002\u0002\u0002\u07c6\u07c7\u0007\u0006\u0002\u0002",
    "\u07c7\u07c9\u0003\u0002\u0002\u0002\u07c8\u07b7\u0003\u0002\u0002\u0002",
    "\u07c8\u07b9\u0003\u0002\u0002\u0002\u07c8\u07bb\u0003\u0002\u0002\u0002",
    "\u07c8\u07c9\u0003\u0002\u0002\u0002\u07c9\u07cb\u0003\u0002\u0002\u0002",
    "\u07ca\u07a3\u0003\u0002\u0002\u0002\u07ca\u07ad\u0003\u0002\u0002\u0002",
    "\u07cb\u0083\u0003\u0002\u0002\u0002\u07cc\u07cf\u0005\u0086D\u0002",
    "\u07cd\u07cf\u0005\u00caf\u0002\u07ce\u07cc\u0003\u0002\u0002\u0002",
    "\u07ce\u07cd\u0003\u0002\u0002\u0002\u07cf\u0085\u0003\u0002\u0002\u0002",
    "\u07d0\u07d5\u0007\u00c9\u0002\u0002\u07d1\u07d5\u00079\u0002\u0002",
    "\u07d2\u07d3\u0007m\u0002\u0002\u07d3\u07d5\u0007\u00d5\u0002\u0002",
    "\u07d4\u07d0\u0003\u0002\u0002\u0002\u07d4\u07d1\u0003\u0002\u0002\u0002",
    "\u07d4\u07d2\u0003\u0002\u0002\u0002\u07d5\u07d6\u0003\u0002\u0002\u0002",
    "\u07d6\u07d7\u0007\u0004\u0002\u0002\u07d7\u07dc\u0005\u0088E\u0002",
    "\u07d8\u07d9\u0007\u0005\u0002\u0002\u07d9\u07db\u0005\u0088E\u0002",
    "\u07da\u07d8\u0003\u0002\u0002\u0002\u07db\u07de\u0003\u0002\u0002\u0002",
    "\u07dc\u07da\u0003\u0002\u0002\u0002\u07dc\u07dd\u0003\u0002\u0002\u0002",
    "\u07dd\u07df\u0003\u0002\u0002\u0002\u07de\u07dc\u0003\u0002\u0002\u0002",
    "\u07df\u07e0\u0007\u0006\u0002\u0002\u07e0\u0087\u0003\u0002\u0002\u0002",
    "\u07e1\u07ea\u0007\u0004\u0002\u0002\u07e2\u07e7\u0005\u00caf\u0002",
    "\u07e3\u07e4\u0007\u0005\u0002\u0002\u07e4\u07e6\u0005\u00caf\u0002",
    "\u07e5\u07e3\u0003\u0002\u0002\u0002\u07e6\u07e9\u0003\u0002\u0002\u0002",
    "\u07e7\u07e5\u0003\u0002\u0002\u0002\u07e7\u07e8\u0003\u0002\u0002\u0002",
    "\u07e8\u07eb\u0003\u0002\u0002\u0002\u07e9\u07e7\u0003\u0002\u0002\u0002",
    "\u07ea\u07e2\u0003\u0002\u0002\u0002\u07ea\u07eb\u0003\u0002\u0002\u0002",
    "\u07eb\u07ec\u0003\u0002\u0002\u0002\u07ec\u07ef\u0007\u0006\u0002\u0002",
    "\u07ed\u07ef\u0005\u00caf\u0002\u07ee\u07e1\u0003\u0002\u0002\u0002",
    "\u07ee\u07ed\u0003\u0002\u0002\u0002\u07ef\u0089\u0003\u0002\u0002\u0002",
    "\u07f0\u07f1\u0007\u00ad\u0002\u0002\u07f1\u07f2\u0007\u0004\u0002\u0002",
    "\u07f2\u07f3\u0005\u00c0a\u0002\u07f3\u07f4\u0007b\u0002\u0002\u07f4",
    "\u07f5\u0005\u008cG\u0002\u07f5\u07f6\u0007r\u0002\u0002\u07f6\u07f7",
    "\u0007\u0004\u0002\u0002\u07f7\u07fc\u0005\u008eH\u0002\u07f8\u07f9",
    "\u0007\u0005\u0002\u0002\u07f9\u07fb\u0005\u008eH\u0002\u07fa\u07f8",
    "\u0003\u0002\u0002\u0002\u07fb\u07fe\u0003\u0002\u0002\u0002\u07fc\u07fa",
    "\u0003\u0002\u0002\u0002\u07fc\u07fd\u0003\u0002\u0002\u0002\u07fd\u07ff",
    "\u0003\u0002\u0002\u0002\u07fe\u07fc\u0003\u0002\u0002\u0002\u07ff\u0800",
    "\u0007\u0006\u0002\u0002\u0800\u0801\u0007\u0006\u0002\u0002\u0801\u008b",
    "\u0003\u0002\u0002\u0002\u0802\u080f\u0005\u012a\u0096\u0002\u0803\u0804",
    "\u0007\u0004\u0002\u0002\u0804\u0809\u0005\u012a\u0096\u0002\u0805\u0806",
    "\u0007\u0005\u0002\u0002\u0806\u0808\u0005\u012a\u0096\u0002\u0807\u0805",
    "\u0003\u0002\u0002\u0002\u0808\u080b\u0003\u0002\u0002\u0002\u0809\u0807",
    "\u0003\u0002\u0002\u0002\u0809\u080a\u0003\u0002\u0002\u0002\u080a\u080c",
    "\u0003\u0002\u0002\u0002\u080b\u0809\u0003\u0002\u0002\u0002\u080c\u080d",
    "\u0007\u0006\u0002\u0002\u080d\u080f\u0003\u0002\u0002\u0002\u080e\u0802",
    "\u0003\u0002\u0002\u0002\u080e\u0803\u0003\u0002\u0002\u0002\u080f\u008d",
    "\u0003\u0002\u0002\u0002\u0810\u0815\u0005\u00caf\u0002\u0811\u0813",
    "\u0007\u0018\u0002\u0002\u0812\u0811\u0003\u0002\u0002\u0002\u0812\u0813",
    "\u0003\u0002\u0002\u0002\u0813\u0814\u0003\u0002\u0002\u0002\u0814\u0816",
    "\u0005\u012a\u0096\u0002\u0815\u0812\u0003\u0002\u0002\u0002\u0815\u0816",
    "\u0003\u0002\u0002\u0002\u0816\u008f\u0003\u0002\u0002\u0002\u0817\u0818",
    "\u0007\u0081\u0002\u0002\u0818\u081a\u0007\u0103\u0002\u0002\u0819\u081b",
    "\u0007\u00a3\u0002\u0002\u081a\u0819\u0003\u0002\u0002\u0002\u081a\u081b",
    "\u0003\u0002\u0002\u0002\u081b\u081c\u0003\u0002\u0002\u0002\u081c\u081d",
    "\u0005\u0124\u0093\u0002\u081d\u0826\u0007\u0004\u0002\u0002\u081e\u0823",
    "\u0005\u00caf\u0002\u081f\u0820\u0007\u0005\u0002\u0002\u0820\u0822",
    "\u0005\u00caf\u0002\u0821\u081f\u0003\u0002\u0002\u0002\u0822\u0825",
    "\u0003\u0002\u0002\u0002\u0823\u0821\u0003\u0002\u0002\u0002\u0823\u0824",
    "\u0003\u0002\u0002\u0002\u0824\u0827\u0003\u0002\u0002\u0002\u0825\u0823",
    "\u0003\u0002\u0002\u0002\u0826\u081e\u0003\u0002\u0002\u0002\u0826\u0827",
    "\u0003\u0002\u0002\u0002\u0827\u0828\u0003\u0002\u0002\u0002\u0828\u0829",
    "\u0007\u0006\u0002\u0002\u0829\u0835\u0005\u012a\u0096\u0002\u082a\u082c",
    "\u0007\u0018\u0002\u0002\u082b\u082a\u0003\u0002\u0002\u0002\u082b\u082c",
    "\u0003\u0002\u0002\u0002\u082c\u082d\u0003\u0002\u0002\u0002\u082d\u0832",
    "\u0005\u012a\u0096\u0002\u082e\u082f\u0007\u0005\u0002\u0002\u082f\u0831",
    "\u0005\u012a\u0096\u0002\u0830\u082e\u0003\u0002\u0002\u0002\u0831\u0834",
    "\u0003\u0002\u0002\u0002\u0832\u0830\u0003\u0002\u0002\u0002\u0832\u0833",
    "\u0003\u0002\u0002\u0002\u0833\u0836\u0003\u0002\u0002\u0002\u0834\u0832",
    "\u0003\u0002\u0002\u0002\u0835\u082b\u0003\u0002\u0002\u0002\u0835\u0836",
    "\u0003\u0002\u0002\u0002\u0836\u0091\u0003\u0002\u0002\u0002\u0837\u0838",
    "\t\u0015\u0002\u0002\u0838\u0093\u0003\u0002\u0002\u0002\u0839\u083d",
    "\u0005\u00acW\u0002\u083a\u083c\u0005\u0096L\u0002\u083b\u083a\u0003",
    "\u0002\u0002\u0002\u083c\u083f\u0003\u0002\u0002\u0002\u083d\u083b\u0003",
    "\u0002\u0002\u0002\u083d\u083e\u0003\u0002\u0002\u0002\u083e\u0095\u0003",
    "\u0002\u0002\u0002\u083f\u083d\u0003\u0002\u0002\u0002\u0840\u0841\u0005",
    "\u0098M\u0002\u0841\u0842\u0007~\u0002\u0002\u0842\u0844\u0005\u00ac",
    "W\u0002\u0843\u0845\u0005\u009aN\u0002\u0844\u0843\u0003\u0002\u0002",
    "\u0002\u0844\u0845\u0003\u0002\u0002\u0002\u0845\u084c\u0003\u0002\u0002",
    "\u0002\u0846\u0847\u0007\u0096\u0002\u0002\u0847\u0848\u0005\u0098M",
    "\u0002\u0848\u0849\u0007~\u0002\u0002\u0849\u084a\u0005\u00acW\u0002",
    "\u084a\u084c\u0003\u0002\u0002\u0002\u084b\u0840\u0003\u0002\u0002\u0002",
    "\u084b\u0846\u0003\u0002\u0002\u0002\u084c\u0097\u0003\u0002\u0002\u0002",
    "\u084d\u084f\u0007u\u0002\u0002\u084e\u084d\u0003\u0002\u0002\u0002",
    "\u084e\u084f\u0003\u0002\u0002\u0002\u084f\u0866\u0003\u0002\u0002\u0002",
    "\u0850\u0866\u00078\u0002\u0002\u0851\u0853\u0007\u0084\u0002\u0002",
    "\u0852\u0854\u0007\u00a3\u0002\u0002\u0853\u0852\u0003\u0002\u0002\u0002",
    "\u0853\u0854\u0003\u0002\u0002\u0002\u0854\u0866\u0003\u0002\u0002\u0002",
    "\u0855\u0857\u0007\u0084\u0002\u0002\u0856\u0855\u0003\u0002\u0002\u0002",
    "\u0856\u0857\u0003\u0002\u0002\u0002\u0857\u0858\u0003\u0002\u0002\u0002",
    "\u0858\u0866\u0007\u00ce\u0002\u0002\u0859\u085b\u0007\u00c4\u0002\u0002",
    "\u085a\u085c\u0007\u00a3\u0002\u0002\u085b\u085a\u0003\u0002\u0002\u0002",
    "\u085b\u085c\u0003\u0002\u0002\u0002\u085c\u0866\u0003\u0002\u0002\u0002",
    "\u085d\u085f\u0007g\u0002\u0002\u085e\u0860\u0007\u00a3\u0002\u0002",
    "\u085f\u085e\u0003\u0002\u0002\u0002\u085f\u0860\u0003\u0002\u0002\u0002",
    "\u0860\u0866\u0003\u0002\u0002\u0002\u0861\u0863\u0007\u0084\u0002\u0002",
    "\u0862\u0861\u0003\u0002\u0002\u0002\u0862\u0863\u0003\u0002\u0002\u0002",
    "\u0863\u0864\u0003\u0002\u0002\u0002\u0864\u0866\u0007\u0014\u0002\u0002",
    "\u0865\u084e\u0003\u0002\u0002\u0002\u0865\u0850\u0003\u0002\u0002\u0002",
    "\u0865\u0851\u0003\u0002\u0002\u0002\u0865\u0856\u0003\u0002\u0002\u0002",
    "\u0865\u0859\u0003\u0002\u0002\u0002\u0865\u085d\u0003\u0002\u0002\u0002",
    "\u0865\u0862\u0003\u0002\u0002\u0002\u0866\u0099\u0003\u0002\u0002\u0002",
    "\u0867\u0868\u0007\u009c\u0002\u0002\u0868\u086c\u0005\u00ccg\u0002",
    "\u0869\u086a\u0007\u0101\u0002\u0002\u086a\u086c\u0005\u00a0Q\u0002",
    "\u086b\u0867\u0003\u0002\u0002\u0002\u086b\u0869\u0003\u0002\u0002\u0002",
    "\u086c\u009b\u0003\u0002\u0002\u0002\u086d\u086e\u0007\u00e5\u0002\u0002",
    "\u086e\u0870\u0007\u0004\u0002\u0002\u086f\u0871\u0005\u009eP\u0002",
    "\u0870\u086f\u0003\u0002\u0002\u0002\u0870\u0871\u0003\u0002\u0002\u0002",
    "\u0871\u0872\u0003\u0002\u0002\u0002\u0872\u0873\u0007\u0006\u0002\u0002",
    "\u0873\u009d\u0003\u0002\u0002\u0002\u0874\u0876\u0007\u0120\u0002\u0002",
    "\u0875\u0874\u0003\u0002\u0002\u0002\u0875\u0876\u0003\u0002\u0002\u0002",
    "\u0876\u0877\u0003\u0002\u0002\u0002\u0877\u0878\t\u0016\u0002\u0002",
    "\u0878\u088d\u0007\u00ac\u0002\u0002\u0879\u087a\u0005\u00caf\u0002",
    "\u087a\u087b\u0007\u00cb\u0002\u0002\u087b\u088d\u0003\u0002\u0002\u0002",
    "\u087c\u087d\u0007\u001e\u0002\u0002\u087d\u087e\u0007\u012d\u0002\u0002",
    "\u087e\u087f\u0007\u00a2\u0002\u0002\u087f\u0880\u0007\u009b\u0002\u0002",
    "\u0880\u0889\u0007\u012d\u0002\u0002\u0881\u0887\u0007\u009c\u0002\u0002",
    "\u0882\u0888\u0005\u012a\u0096\u0002\u0883\u0884\u0005\u0124\u0093\u0002",
    "\u0884\u0885\u0007\u0004\u0002\u0002\u0885\u0886\u0007\u0006\u0002\u0002",
    "\u0886\u0888\u0003\u0002\u0002\u0002\u0887\u0882\u0003\u0002\u0002\u0002",
    "\u0887\u0883\u0003\u0002\u0002\u0002\u0888\u088a\u0003\u0002\u0002\u0002",
    "\u0889\u0881\u0003\u0002\u0002\u0002\u0889\u088a\u0003\u0002\u0002\u0002",
    "\u088a\u088d\u0003\u0002\u0002\u0002\u088b\u088d\u0005\u00caf\u0002",
    "\u088c\u0875\u0003\u0002\u0002\u0002\u088c\u0879\u0003\u0002\u0002\u0002",
    "\u088c\u087c\u0003\u0002\u0002\u0002\u088c\u088b\u0003\u0002\u0002\u0002",
    "\u088d\u009f\u0003\u0002\u0002\u0002\u088e\u088f\u0007\u0004\u0002\u0002",
    "\u088f\u0890\u0005\u00a2R\u0002\u0890\u0891\u0007\u0006\u0002\u0002",
    "\u0891\u00a1\u0003\u0002\u0002\u0002\u0892\u0897\u0005\u0126\u0094\u0002",
    "\u0893\u0894\u0007\u0005\u0002\u0002\u0894\u0896\u0005\u0126\u0094\u0002",
    "\u0895\u0893\u0003\u0002\u0002\u0002\u0896\u0899\u0003\u0002\u0002\u0002",
    "\u0897\u0895\u0003\u0002\u0002\u0002\u0897\u0898\u0003\u0002\u0002\u0002",
    "\u0898\u00a3\u0003\u0002\u0002\u0002\u0899\u0897\u0003\u0002\u0002\u0002",
    "\u089a\u089b\u0007\u0004\u0002\u0002\u089b\u08a0\u0005\u00a6T\u0002",
    "\u089c\u089d\u0007\u0005\u0002\u0002\u089d\u089f\u0005\u00a6T\u0002",
    "\u089e\u089c\u0003\u0002\u0002\u0002\u089f\u08a2\u0003\u0002\u0002\u0002",
    "\u08a0\u089e\u0003\u0002\u0002\u0002\u08a0\u08a1\u0003\u0002\u0002\u0002",
    "\u08a1\u08a3\u0003\u0002\u0002\u0002\u08a2\u08a0\u0003\u0002\u0002\u0002",
    "\u08a3\u08a4\u0007\u0006\u0002\u0002\u08a4\u00a5\u0003\u0002\u0002\u0002",
    "\u08a5\u08a7\u0005\u0126\u0094\u0002\u08a6\u08a8\t\u0013\u0002\u0002",
    "\u08a7\u08a6\u0003\u0002\u0002\u0002\u08a7\u08a8\u0003\u0002\u0002\u0002",
    "\u08a8\u00a7\u0003\u0002\u0002\u0002\u08a9\u08aa\u0007\u0004\u0002\u0002",
    "\u08aa\u08af\u0005\u00aaV\u0002\u08ab\u08ac\u0007\u0005\u0002\u0002",
    "\u08ac\u08ae\u0005\u00aaV\u0002\u08ad\u08ab\u0003\u0002\u0002\u0002",
    "\u08ae\u08b1\u0003\u0002\u0002\u0002\u08af\u08ad\u0003\u0002\u0002\u0002",
    "\u08af\u08b0\u0003\u0002\u0002\u0002\u08b0\u08b2\u0003\u0002\u0002\u0002",
    "\u08b1\u08af\u0003\u0002\u0002\u0002\u08b2\u08b3\u0007\u0006\u0002\u0002",
    "\u08b3\u00a9\u0003\u0002\u0002\u0002\u08b4\u08b6\u0005\u012a\u0096\u0002",
    "\u08b5\u08b7\u0005\"\u0012\u0002\u08b6\u08b5\u0003\u0002\u0002\u0002",
    "\u08b6\u08b7\u0003\u0002\u0002\u0002\u08b7\u00ab\u0003\u0002\u0002\u0002",
    "\u08b8\u08ba\u0005\u00b8]\u0002\u08b9\u08bb\u0005\u009cO\u0002\u08ba",
    "\u08b9\u0003\u0002\u0002\u0002\u08ba\u08bb\u0003\u0002\u0002\u0002\u08bb",
    "\u08bc\u0003\u0002\u0002\u0002\u08bc\u08bd\u0005\u00b2Z\u0002\u08bd",
    "\u08d1\u0003\u0002\u0002\u0002\u08be\u08bf\u0007\u0004\u0002\u0002\u08bf",
    "\u08c0\u0005$\u0013\u0002\u08c0\u08c2\u0007\u0006\u0002\u0002\u08c1",
    "\u08c3\u0005\u009cO\u0002\u08c2\u08c1\u0003\u0002\u0002\u0002\u08c2",
    "\u08c3\u0003\u0002\u0002\u0002\u08c3\u08c4\u0003\u0002\u0002\u0002\u08c4",
    "\u08c5\u0005\u00b2Z\u0002\u08c5\u08d1\u0003\u0002\u0002\u0002\u08c6",
    "\u08c7\u0007\u0004\u0002\u0002\u08c7\u08c8\u0005\u0094K\u0002\u08c8",
    "\u08ca\u0007\u0006\u0002\u0002\u08c9\u08cb\u0005\u009cO\u0002\u08ca",
    "\u08c9\u0003\u0002\u0002\u0002\u08ca\u08cb\u0003\u0002\u0002\u0002\u08cb",
    "\u08cc\u0003\u0002\u0002\u0002\u08cc\u08cd\u0005\u00b2Z\u0002\u08cd",
    "\u08d1\u0003\u0002\u0002\u0002\u08ce\u08d1\u0005\u00aeX\u0002\u08cf",
    "\u08d1\u0005\u00b0Y\u0002\u08d0\u08b8\u0003\u0002\u0002\u0002\u08d0",
    "\u08be\u0003\u0002\u0002\u0002\u08d0\u08c6\u0003\u0002\u0002\u0002\u08d0",
    "\u08ce\u0003\u0002\u0002\u0002\u08d0\u08cf\u0003\u0002\u0002\u0002\u08d1",
    "\u00ad\u0003\u0002\u0002\u0002\u08d2\u08d3\u0007\u0102\u0002\u0002\u08d3",
    "\u08d8\u0005\u00caf\u0002\u08d4\u08d5\u0007\u0005\u0002\u0002\u08d5",
    "\u08d7\u0005\u00caf\u0002\u08d6\u08d4\u0003\u0002\u0002\u0002\u08d7",
    "\u08da\u0003\u0002\u0002\u0002\u08d8\u08d6\u0003\u0002\u0002\u0002\u08d8",
    "\u08d9\u0003\u0002\u0002\u0002\u08d9\u08db\u0003\u0002\u0002\u0002\u08da",
    "\u08d8\u0003\u0002\u0002\u0002\u08db\u08dc\u0005\u00b2Z\u0002\u08dc",
    "\u00af\u0003\u0002\u0002\u0002\u08dd\u08de\u0005\u0122\u0092\u0002\u08de",
    "\u08e7\u0007\u0004\u0002\u0002\u08df\u08e4\u0005\u00caf\u0002\u08e0",
    "\u08e1\u0007\u0005\u0002\u0002\u08e1\u08e3\u0005\u00caf\u0002\u08e2",
    "\u08e0\u0003\u0002\u0002\u0002\u08e3\u08e6\u0003\u0002\u0002\u0002\u08e4",
    "\u08e2\u0003\u0002\u0002\u0002\u08e4\u08e5\u0003\u0002\u0002\u0002\u08e5",
    "\u08e8\u0003\u0002\u0002\u0002\u08e6\u08e4\u0003\u0002\u0002\u0002\u08e7",
    "\u08df\u0003\u0002\u0002\u0002\u08e7\u08e8\u0003\u0002\u0002\u0002\u08e8",
    "\u08e9\u0003\u0002\u0002\u0002\u08e9\u08ea\u0007\u0006\u0002\u0002\u08ea",
    "\u08eb\u0005\u00b2Z\u0002\u08eb\u00b1\u0003\u0002\u0002\u0002\u08ec",
    "\u08ee\u0007\u0018\u0002\u0002\u08ed\u08ec\u0003\u0002\u0002\u0002\u08ed",
    "\u08ee\u0003\u0002\u0002\u0002\u08ee\u08ef\u0003\u0002\u0002\u0002\u08ef",
    "\u08f1\u0005\u012c\u0097\u0002\u08f0\u08f2\u0005\u00a0Q\u0002\u08f1",
    "\u08f0\u0003\u0002\u0002\u0002\u08f1\u08f2\u0003\u0002\u0002\u0002\u08f2",
    "\u08f4\u0003\u0002\u0002\u0002\u08f3\u08ed\u0003\u0002\u0002\u0002\u08f3",
    "\u08f4\u0003\u0002\u0002\u0002\u08f4\u00b3\u0003\u0002\u0002\u0002\u08f5",
    "\u08f6\u0007\u00ca\u0002\u0002\u08f6\u08f7\u0007d\u0002\u0002\u08f7",
    "\u08f8\u0007\u00d0\u0002\u0002\u08f8\u08fc\u0007\u0129\u0002\u0002\u08f9",
    "\u08fa\u0007\u0108\u0002\u0002\u08fa\u08fb\u0007\u00d1\u0002\u0002\u08fb",
    "\u08fd\u0005@!\u0002\u08fc\u08f9\u0003\u0002\u0002\u0002\u08fc\u08fd",
    "\u0003\u0002\u0002\u0002\u08fd\u0927\u0003\u0002\u0002\u0002\u08fe\u08ff",
    "\u0007\u00ca\u0002\u0002\u08ff\u0900\u0007d\u0002\u0002\u0900\u090a",
    "\u0007E\u0002\u0002\u0901\u0902\u0007]\u0002\u0002\u0902\u0903\u0007",
    "\u00e8\u0002\u0002\u0903\u0904\u0007 \u0002\u0002\u0904\u0908\u0007",
    "\u0129\u0002\u0002\u0905\u0906\u0007R\u0002\u0002\u0906\u0907\u0007",
    " \u0002\u0002\u0907\u0909\u0007\u0129\u0002\u0002\u0908\u0905\u0003",
    "\u0002\u0002\u0002\u0908\u0909\u0003\u0002\u0002\u0002\u0909\u090b\u0003",
    "\u0002\u0002\u0002\u090a\u0901\u0003\u0002\u0002\u0002\u090a\u090b\u0003",
    "\u0002\u0002\u0002\u090b\u0911\u0003\u0002\u0002\u0002\u090c\u090d\u0007",
    ",\u0002\u0002\u090d\u090e\u0007}\u0002\u0002\u090e\u090f\u0007\u00e8",
    "\u0002\u0002\u090f\u0910\u0007 \u0002\u0002\u0910\u0912\u0007\u0129",
    "\u0002\u0002\u0911\u090c\u0003\u0002\u0002\u0002\u0911\u0912\u0003\u0002",
    "\u0002\u0002\u0912\u0918\u0003\u0002\u0002\u0002\u0913\u0914\u0007\u0090",
    "\u0002\u0002\u0914\u0915\u0007\u007f\u0002\u0002\u0915\u0916\u0007\u00e8",
    "\u0002\u0002\u0916\u0917\u0007 \u0002\u0002\u0917\u0919\u0007\u0129",
    "\u0002\u0002\u0918\u0913\u0003\u0002\u0002\u0002\u0918\u0919\u0003\u0002",
    "\u0002\u0002\u0919\u091e\u0003\u0002\u0002\u0002\u091a\u091b\u0007\u0087",
    "\u0002\u0002\u091b\u091c\u0007\u00e8\u0002\u0002\u091c\u091d\u0007 ",
    "\u0002\u0002\u091d\u091f\u0007\u0129\u0002\u0002\u091e\u091a\u0003\u0002",
    "\u0002\u0002\u091e\u091f\u0003\u0002\u0002\u0002\u091f\u0924\u0003\u0002",
    "\u0002\u0002\u0920\u0921\u0007\u0099\u0002\u0002\u0921\u0922\u0007C",
    "\u0002\u0002\u0922\u0923\u0007\u0018\u0002\u0002\u0923\u0925\u0007\u0129",
    "\u0002\u0002\u0924\u0920\u0003\u0002\u0002\u0002\u0924\u0925\u0003\u0002",
    "\u0002\u0002\u0925\u0927\u0003\u0002\u0002\u0002\u0926\u08f5\u0003\u0002",
    "\u0002\u0002\u0926\u08fe\u0003\u0002\u0002\u0002\u0927\u00b5\u0003\u0002",
    "\u0002\u0002\u0928\u092d\u0005\u00b8]\u0002\u0929\u092a\u0007\u0005",
    "\u0002\u0002\u092a\u092c\u0005\u00b8]\u0002\u092b\u0929\u0003\u0002",
    "\u0002\u0002\u092c\u092f\u0003\u0002\u0002\u0002\u092d\u092b\u0003\u0002",
    "\u0002\u0002\u092d\u092e\u0003\u0002\u0002\u0002\u092e\u00b7\u0003\u0002",
    "\u0002\u0002\u092f\u092d\u0003\u0002\u0002\u0002\u0930\u0935\u0005\u0126",
    "\u0094\u0002\u0931\u0932\u0007\u0007\u0002\u0002\u0932\u0934\u0005\u0126",
    "\u0094\u0002\u0933\u0931\u0003\u0002\u0002\u0002\u0934\u0937\u0003\u0002",
    "\u0002\u0002\u0935\u0933\u0003\u0002\u0002\u0002\u0935\u0936\u0003\u0002",
    "\u0002\u0002\u0936\u00b9\u0003\u0002\u0002\u0002\u0937\u0935\u0003\u0002",
    "\u0002\u0002\u0938\u0939\u0005\u0126\u0094\u0002\u0939\u093a\u0007\u0007",
    "\u0002\u0002\u093a\u093c\u0003\u0002\u0002\u0002\u093b\u0938\u0003\u0002",
    "\u0002\u0002\u093b\u093c\u0003\u0002\u0002\u0002\u093c\u093d\u0003\u0002",
    "\u0002\u0002\u093d\u093e\u0005\u0126\u0094\u0002\u093e\u00bb\u0003\u0002",
    "\u0002\u0002\u093f\u0940\u0005\u0126\u0094\u0002\u0940\u0941\u0007\u0007",
    "\u0002\u0002\u0941\u0943\u0003\u0002\u0002\u0002\u0942\u093f\u0003\u0002",
    "\u0002\u0002\u0942\u0943\u0003\u0002\u0002\u0002\u0943\u0944\u0003\u0002",
    "\u0002\u0002\u0944\u0945\u0005\u0126\u0094\u0002\u0945\u00bd\u0003\u0002",
    "\u0002\u0002\u0946\u094e\u0005\u00caf\u0002\u0947\u0949\u0007\u0018",
    "\u0002\u0002\u0948\u0947\u0003\u0002\u0002\u0002\u0948\u0949\u0003\u0002",
    "\u0002\u0002\u0949\u094c\u0003\u0002\u0002\u0002\u094a\u094d\u0005\u0126",
    "\u0094\u0002\u094b\u094d\u0005\u00a0Q\u0002\u094c\u094a\u0003\u0002",
    "\u0002\u0002\u094c\u094b\u0003\u0002\u0002\u0002\u094d\u094f\u0003\u0002",
    "\u0002\u0002\u094e\u0948\u0003\u0002\u0002\u0002\u094e\u094f\u0003\u0002",
    "\u0002\u0002\u094f\u00bf\u0003\u0002\u0002\u0002\u0950\u0955\u0005\u00be",
    "`\u0002\u0951\u0952\u0007\u0005\u0002\u0002\u0952\u0954\u0005\u00be",
    "`\u0002\u0953\u0951\u0003\u0002\u0002\u0002\u0954\u0957\u0003\u0002",
    "\u0002\u0002\u0955\u0953\u0003\u0002\u0002\u0002\u0955\u0956\u0003\u0002",
    "\u0002\u0002\u0956\u00c1\u0003\u0002\u0002\u0002\u0957\u0955\u0003\u0002",
    "\u0002\u0002\u0958\u0959\u0007\u0004\u0002\u0002\u0959\u095e\u0005\u00c4",
    "c\u0002\u095a\u095b\u0007\u0005\u0002\u0002\u095b\u095d\u0005\u00c4",
    "c\u0002\u095c\u095a\u0003\u0002\u0002\u0002\u095d\u0960\u0003\u0002",
    "\u0002\u0002\u095e\u095c\u0003\u0002\u0002\u0002\u095e\u095f\u0003\u0002",
    "\u0002\u0002\u095f\u0961\u0003\u0002\u0002\u0002\u0960\u095e\u0003\u0002",
    "\u0002\u0002\u0961\u0962\u0007\u0006\u0002\u0002\u0962\u00c3\u0003\u0002",
    "\u0002\u0002\u0963\u0966\u0005\u00c6d\u0002\u0964\u0966\u0005\u00f4",
    "{\u0002\u0965\u0963\u0003\u0002\u0002\u0002\u0965\u0964\u0003\u0002",
    "\u0002\u0002\u0966\u00c5\u0003\u0002\u0002\u0002\u0967\u0975\u0005\u0124",
    "\u0093\u0002\u0968\u0969\u0005\u012a\u0096\u0002\u0969\u096a\u0007\u0004",
    "\u0002\u0002\u096a\u096f\u0005\u00c8e\u0002\u096b\u096c\u0007\u0005",
    "\u0002\u0002\u096c\u096e\u0005\u00c8e\u0002\u096d\u096b\u0003\u0002",
    "\u0002\u0002\u096e\u0971\u0003\u0002\u0002\u0002\u096f\u096d\u0003\u0002",
    "\u0002\u0002\u096f\u0970\u0003\u0002\u0002\u0002\u0970\u0972\u0003\u0002",
    "\u0002\u0002\u0971\u096f\u0003\u0002\u0002\u0002\u0972\u0973\u0007\u0006",
    "\u0002\u0002\u0973\u0975\u0003\u0002\u0002\u0002\u0974\u0967\u0003\u0002",
    "\u0002\u0002\u0974\u0968\u0003\u0002\u0002\u0002\u0975\u00c7\u0003\u0002",
    "\u0002\u0002\u0976\u0979\u0005\u0124\u0093\u0002\u0977\u0979\u0005\u00d4",
    "k\u0002\u0978\u0976\u0003\u0002\u0002\u0002\u0978\u0977\u0003\u0002",
    "\u0002\u0002\u0979\u00c9\u0003\u0002\u0002\u0002\u097a\u097b\u0005\u00cc",
    "g\u0002\u097b\u00cb\u0003\u0002\u0002\u0002\u097c\u097d\bg\u0001\u0002",
    "\u097d\u097e\u0007\u0098\u0002\u0002\u097e\u0989\u0005\u00ccg\u0007",
    "\u097f\u0980\u0007U\u0002\u0002\u0980\u0981\u0007\u0004\u0002\u0002",
    "\u0981\u0982\u0005$\u0013\u0002\u0982\u0983\u0007\u0006\u0002\u0002",
    "\u0983\u0989\u0003\u0002\u0002\u0002\u0984\u0986\u0005\u00d0i\u0002",
    "\u0985\u0987\u0005\u00ceh\u0002\u0986\u0985\u0003\u0002\u0002\u0002",
    "\u0986\u0987\u0003\u0002\u0002\u0002\u0987\u0989\u0003\u0002\u0002\u0002",
    "\u0988\u097c\u0003\u0002\u0002\u0002\u0988\u097f\u0003\u0002\u0002\u0002",
    "\u0988\u0984\u0003\u0002\u0002\u0002\u0989\u0992\u0003\u0002\u0002\u0002",
    "\u098a\u098b\f\u0004\u0002\u0002\u098b\u098c\u0007\u0013\u0002\u0002",
    "\u098c\u0991\u0005\u00ccg\u0005\u098d\u098e\f\u0003\u0002\u0002\u098e",
    "\u098f\u0007\u00a0\u0002\u0002\u098f\u0991\u0005\u00ccg\u0004\u0990",
    "\u098a\u0003\u0002\u0002\u0002\u0990\u098d\u0003\u0002\u0002\u0002\u0991",
    "\u0994\u0003\u0002\u0002\u0002\u0992\u0990\u0003\u0002\u0002\u0002\u0992",
    "\u0993\u0003\u0002\u0002\u0002\u0993\u00cd\u0003\u0002\u0002\u0002\u0994",
    "\u0992\u0003\u0002\u0002\u0002\u0995\u0997\u0007\u0098\u0002\u0002\u0996",
    "\u0995\u0003\u0002\u0002\u0002\u0996\u0997\u0003\u0002\u0002\u0002\u0997",
    "\u0998\u0003\u0002\u0002\u0002\u0998\u0999\u0007\u001c\u0002\u0002\u0999",
    "\u099a\u0005\u00d0i\u0002\u099a\u099b\u0007\u0013\u0002\u0002\u099b",
    "\u099c\u0005\u00d0i\u0002\u099c\u09e8\u0003\u0002\u0002\u0002\u099d",
    "\u099f\u0007\u0098\u0002\u0002\u099e\u099d\u0003\u0002\u0002\u0002\u099e",
    "\u099f\u0003\u0002\u0002\u0002\u099f\u09a0\u0003\u0002\u0002\u0002\u09a0",
    "\u09a1\u0007r\u0002\u0002\u09a1\u09a2\u0007\u0004\u0002\u0002\u09a2",
    "\u09a7\u0005\u00caf\u0002\u09a3\u09a4\u0007\u0005\u0002\u0002\u09a4",
    "\u09a6\u0005\u00caf\u0002\u09a5\u09a3\u0003\u0002\u0002\u0002\u09a6",
    "\u09a9\u0003\u0002\u0002\u0002\u09a7\u09a5\u0003\u0002\u0002\u0002\u09a7",
    "\u09a8\u0003\u0002\u0002\u0002\u09a8\u09aa\u0003\u0002\u0002\u0002\u09a9",
    "\u09a7\u0003\u0002\u0002\u0002\u09aa\u09ab\u0007\u0006\u0002\u0002\u09ab",
    "\u09e8\u0003\u0002\u0002\u0002\u09ac\u09ae\u0007\u0098\u0002\u0002\u09ad",
    "\u09ac\u0003\u0002\u0002\u0002\u09ad\u09ae\u0003\u0002\u0002\u0002\u09ae",
    "\u09af\u0003\u0002\u0002\u0002\u09af\u09b0\u0007r\u0002\u0002\u09b0",
    "\u09b1\u0007\u0004\u0002\u0002\u09b1\u09b2\u0005$\u0013\u0002\u09b2",
    "\u09b3\u0007\u0006\u0002\u0002\u09b3\u09e8\u0003\u0002\u0002\u0002\u09b4",
    "\u09b6\u0007\u0098\u0002\u0002\u09b5\u09b4\u0003\u0002\u0002\u0002\u09b5",
    "\u09b6\u0003\u0002\u0002\u0002\u09b6\u09b7\u0003\u0002\u0002\u0002\u09b7",
    "\u09b8\u0007\u00c5\u0002\u0002\u09b8\u09e8\u0005\u00d0i\u0002\u09b9",
    "\u09bb\u0007\u0098\u0002\u0002\u09ba\u09b9\u0003\u0002\u0002\u0002\u09ba",
    "\u09bb\u0003\u0002\u0002\u0002\u09bb\u09bc\u0003\u0002\u0002\u0002\u09bc",
    "\u09bd\u0007\u0085\u0002\u0002\u09bd\u09cb\t\u0017\u0002\u0002\u09be",
    "\u09bf\u0007\u0004\u0002\u0002\u09bf\u09cc\u0007\u0006\u0002\u0002\u09c0",
    "\u09c1\u0007\u0004\u0002\u0002\u09c1\u09c6\u0005\u00caf\u0002\u09c2",
    "\u09c3\u0007\u0005\u0002\u0002\u09c3\u09c5\u0005\u00caf\u0002\u09c4",
    "\u09c2\u0003\u0002\u0002\u0002\u09c5\u09c8\u0003\u0002\u0002\u0002\u09c6",
    "\u09c4\u0003\u0002\u0002\u0002\u09c6\u09c7\u0003\u0002\u0002\u0002\u09c7",
    "\u09c9\u0003\u0002\u0002\u0002\u09c8\u09c6\u0003\u0002\u0002\u0002\u09c9",
    "\u09ca\u0007\u0006\u0002\u0002\u09ca\u09cc\u0003\u0002\u0002\u0002\u09cb",
    "\u09be\u0003\u0002\u0002\u0002\u09cb\u09c0\u0003\u0002\u0002\u0002\u09cc",
    "\u09e8\u0003\u0002\u0002\u0002\u09cd\u09cf\u0007\u0098\u0002\u0002\u09ce",
    "\u09cd\u0003\u0002\u0002\u0002\u09ce\u09cf\u0003\u0002\u0002\u0002\u09cf",
    "\u09d0\u0003\u0002\u0002\u0002\u09d0\u09d1\u0007\u0085\u0002\u0002\u09d1",
    "\u09d4\u0005\u00d0i\u0002\u09d2\u09d3\u0007Q\u0002\u0002\u09d3\u09d5",
    "\u0007\u0129\u0002\u0002\u09d4\u09d2\u0003\u0002\u0002\u0002\u09d4\u09d5",
    "\u0003\u0002\u0002\u0002\u09d5\u09e8\u0003\u0002\u0002\u0002\u09d6\u09d8",
    "\u0007|\u0002\u0002\u09d7\u09d9\u0007\u0098\u0002\u0002\u09d8\u09d7",
    "\u0003\u0002\u0002\u0002\u09d8\u09d9\u0003\u0002\u0002\u0002\u09d9\u09da",
    "\u0003\u0002\u0002\u0002\u09da\u09e8\u0007\u0099\u0002\u0002\u09db\u09dd",
    "\u0007|\u0002\u0002\u09dc\u09de\u0007\u0098\u0002\u0002\u09dd\u09dc",
    "\u0003\u0002\u0002\u0002\u09dd\u09de\u0003\u0002\u0002\u0002\u09de\u09df",
    "\u0003\u0002\u0002\u0002\u09df\u09e8\t\u0018\u0002\u0002\u09e0\u09e2",
    "\u0007|\u0002\u0002\u09e1\u09e3\u0007\u0098\u0002\u0002\u09e2\u09e1",
    "\u0003\u0002\u0002\u0002\u09e2\u09e3\u0003\u0002\u0002\u0002\u09e3\u09e4",
    "\u0003\u0002\u0002\u0002\u09e4\u09e5\u0007K\u0002\u0002\u09e5\u09e6",
    "\u0007f\u0002\u0002\u09e6\u09e8\u0005\u00d0i\u0002\u09e7\u0996\u0003",
    "\u0002\u0002\u0002\u09e7\u099e\u0003\u0002\u0002\u0002\u09e7\u09ad\u0003",
    "\u0002\u0002\u0002\u09e7\u09b5\u0003\u0002\u0002\u0002\u09e7\u09ba\u0003",
    "\u0002\u0002\u0002\u09e7\u09ce\u0003\u0002\u0002\u0002\u09e7\u09d6\u0003",
    "\u0002\u0002\u0002\u09e7\u09db\u0003\u0002\u0002\u0002\u09e7\u09e0\u0003",
    "\u0002\u0002\u0002\u09e8\u00cf\u0003\u0002\u0002\u0002\u09e9\u09ea\b",
    "i\u0001\u0002\u09ea\u09ee\u0005\u00d2j\u0002\u09eb\u09ec\t\u0019\u0002",
    "\u0002\u09ec\u09ee\u0005\u00d0i\b\u09ed\u09e9\u0003\u0002\u0002\u0002",
    "\u09ed\u09eb\u0003\u0002\u0002\u0002\u09ee\u0a04\u0003\u0002\u0002\u0002",
    "\u09ef\u09f0\f\t\u0002\u0002\u09f0\u09f1\u0005\u00d6l\u0002\u09f1\u09f2",
    "\u0005\u00d0i\n\u09f2\u0a03\u0003\u0002\u0002\u0002\u09f3\u09f4\f\u0007",
    "\u0002\u0002\u09f4\u09f5\t\u001a\u0002\u0002\u09f5\u0a03\u0005\u00d0",
    "i\b\u09f6\u09f7\f\u0006\u0002\u0002\u09f7\u09f8\t\u001b\u0002\u0002",
    "\u09f8\u0a03\u0005\u00d0i\u0007\u09f9\u09fa\f\u0005\u0002\u0002\u09fa",
    "\u09fb\u0007\u0125\u0002\u0002\u09fb\u0a03\u0005\u00d0i\u0006\u09fc",
    "\u09fd\f\u0004\u0002\u0002\u09fd\u09fe\u0007\u0128\u0002\u0002\u09fe",
    "\u0a03\u0005\u00d0i\u0005\u09ff\u0a00\f\u0003\u0002\u0002\u0a00\u0a01",
    "\u0007\u0126\u0002\u0002\u0a01\u0a03\u0005\u00d0i\u0004\u0a02\u09ef",
    "\u0003\u0002\u0002\u0002\u0a02\u09f3\u0003\u0002\u0002\u0002\u0a02\u09f6",
    "\u0003\u0002\u0002\u0002\u0a02\u09f9\u0003\u0002\u0002\u0002\u0a02\u09fc",
    "\u0003\u0002\u0002\u0002\u0a02\u09ff\u0003\u0002\u0002\u0002\u0a03\u0a06",
    "\u0003\u0002\u0002\u0002\u0a04\u0a02\u0003\u0002\u0002\u0002\u0a04\u0a05",
    "\u0003\u0002\u0002\u0002\u0a05\u00d1\u0003\u0002\u0002\u0002\u0a06\u0a04",
    "\u0003\u0002\u0002\u0002\u0a07\u0a08\bj\u0001\u0002\u0a08\u0ac4\t\u001c",
    "\u0002\u0002\u0a09\u0a0b\u0007#\u0002\u0002\u0a0a\u0a0c\u0005\u0114",
    "\u008b\u0002\u0a0b\u0a0a\u0003\u0002\u0002\u0002\u0a0c\u0a0d\u0003\u0002",
    "\u0002\u0002\u0a0d\u0a0b\u0003\u0002\u0002\u0002\u0a0d\u0a0e\u0003\u0002",
    "\u0002\u0002\u0a0e\u0a11\u0003\u0002\u0002\u0002\u0a0f\u0a10\u0007O",
    "\u0002\u0002\u0a10\u0a12\u0005\u00caf\u0002\u0a11\u0a0f\u0003\u0002",
    "\u0002\u0002\u0a11\u0a12\u0003\u0002\u0002\u0002\u0a12\u0a13\u0003\u0002",
    "\u0002\u0002\u0a13\u0a14\u0007P\u0002\u0002\u0a14\u0ac4\u0003\u0002",
    "\u0002\u0002\u0a15\u0a16\u0007#\u0002\u0002\u0a16\u0a18\u0005\u00ca",
    "f\u0002\u0a17\u0a19\u0005\u0114\u008b\u0002\u0a18\u0a17\u0003\u0002",
    "\u0002\u0002\u0a19\u0a1a\u0003\u0002\u0002\u0002\u0a1a\u0a18\u0003\u0002",
    "\u0002\u0002\u0a1a\u0a1b\u0003\u0002\u0002\u0002\u0a1b\u0a1e\u0003\u0002",
    "\u0002\u0002\u0a1c\u0a1d\u0007O\u0002\u0002\u0a1d\u0a1f\u0005\u00ca",
    "f\u0002\u0a1e\u0a1c\u0003\u0002\u0002\u0002\u0a1e\u0a1f\u0003\u0002",
    "\u0002\u0002\u0a1f\u0a20\u0003\u0002\u0002\u0002\u0a20\u0a21\u0007P",
    "\u0002\u0002\u0a21\u0ac4\u0003\u0002\u0002\u0002\u0a22\u0a23\t\u001d",
    "\u0002\u0002\u0a23\u0a24\u0007\u0004\u0002\u0002\u0a24\u0a25\u0005\u00ca",
    "f\u0002\u0a25\u0a26\u0007\u0018\u0002\u0002\u0a26\u0a27\u0005\u00ec",
    "w\u0002\u0a27\u0a28\u0007\u0006\u0002\u0002\u0a28\u0ac4\u0003\u0002",
    "\u0002\u0002\u0a29\u0a2a\u0007\u00df\u0002\u0002\u0a2a\u0a33\u0007\u0004",
    "\u0002\u0002\u0a2b\u0a30\u0005\u00be`\u0002\u0a2c\u0a2d\u0007\u0005",
    "\u0002\u0002\u0a2d\u0a2f\u0005\u00be`\u0002\u0a2e\u0a2c\u0003\u0002",
    "\u0002\u0002\u0a2f\u0a32\u0003\u0002\u0002\u0002\u0a30\u0a2e\u0003\u0002",
    "\u0002\u0002\u0a30\u0a31\u0003\u0002\u0002\u0002\u0a31\u0a34\u0003\u0002",
    "\u0002\u0002\u0a32\u0a30\u0003\u0002\u0002\u0002\u0a33\u0a2b\u0003\u0002",
    "\u0002\u0002\u0a33\u0a34\u0003\u0002\u0002\u0002\u0a34\u0a35\u0003\u0002",
    "\u0002\u0002\u0a35\u0ac4\u0007\u0006\u0002\u0002\u0a36\u0a37\u0007`",
    "\u0002\u0002\u0a37\u0a38\u0007\u0004\u0002\u0002\u0a38\u0a3b\u0005\u00ca",
    "f\u0002\u0a39\u0a3a\u0007p\u0002\u0002\u0a3a\u0a3c\u0007\u009a\u0002",
    "\u0002\u0a3b\u0a39\u0003\u0002\u0002\u0002\u0a3b\u0a3c\u0003\u0002\u0002",
    "\u0002\u0a3c\u0a3d\u0003\u0002\u0002\u0002\u0a3d\u0a3e\u0007\u0006\u0002",
    "\u0002\u0a3e\u0ac4\u0003\u0002\u0002\u0002\u0a3f\u0a40\u0007\u0080\u0002",
    "\u0002\u0a40\u0a41\u0007\u0004\u0002\u0002\u0a41\u0a44\u0005\u00caf",
    "\u0002\u0a42\u0a43\u0007p\u0002\u0002\u0a43\u0a45\u0007\u009a\u0002",
    "\u0002\u0a44\u0a42\u0003\u0002\u0002\u0002\u0a44\u0a45\u0003\u0002\u0002",
    "\u0002\u0a45\u0a46\u0003\u0002\u0002\u0002\u0a46\u0a47\u0007\u0006\u0002",
    "\u0002\u0a47\u0ac4\u0003\u0002\u0002\u0002\u0a48\u0a49\u0007\u00af\u0002",
    "\u0002\u0a49\u0a4a\u0007\u0004\u0002\u0002\u0a4a\u0a4b\u0005\u00d0i",
    "\u0002\u0a4b\u0a4c\u0007r\u0002\u0002\u0a4c\u0a4d\u0005\u00d0i\u0002",
    "\u0a4d\u0a4e\u0007\u0006\u0002\u0002\u0a4e\u0ac4\u0003\u0002\u0002\u0002",
    "\u0a4f\u0ac4\u0005\u00d4k\u0002\u0a50\u0ac4\u0007\u0121\u0002\u0002",
    "\u0a51\u0a52\u0005\u0124\u0093\u0002\u0a52\u0a53\u0007\u0007\u0002\u0002",
    "\u0a53\u0a54\u0007\u0121\u0002\u0002\u0a54\u0ac4\u0003\u0002\u0002\u0002",
    "\u0a55\u0a56\u0007\u0004\u0002\u0002\u0a56\u0a59\u0005\u00be`\u0002",
    "\u0a57\u0a58\u0007\u0005\u0002\u0002\u0a58\u0a5a\u0005\u00be`\u0002",
    "\u0a59\u0a57\u0003\u0002\u0002\u0002\u0a5a\u0a5b\u0003\u0002\u0002\u0002",
    "\u0a5b\u0a59\u0003\u0002\u0002\u0002\u0a5b\u0a5c\u0003\u0002\u0002\u0002",
    "\u0a5c\u0a5d\u0003\u0002\u0002\u0002\u0a5d\u0a5e\u0007\u0006\u0002\u0002",
    "\u0a5e\u0ac4\u0003\u0002\u0002\u0002\u0a5f\u0a60\u0007\u0004\u0002\u0002",
    "\u0a60\u0a61\u0005$\u0013\u0002\u0a61\u0a62\u0007\u0006\u0002\u0002",
    "\u0a62\u0ac4\u0003\u0002\u0002\u0002\u0a63\u0a64\u0005\u0122\u0092\u0002",
    "\u0a64\u0a70\u0007\u0004\u0002\u0002\u0a65\u0a67\u0005\u0092J\u0002",
    "\u0a66\u0a65\u0003\u0002\u0002\u0002\u0a66\u0a67\u0003\u0002\u0002\u0002",
    "\u0a67\u0a68\u0003\u0002\u0002\u0002\u0a68\u0a6d\u0005\u00caf\u0002",
    "\u0a69\u0a6a\u0007\u0005\u0002\u0002\u0a6a\u0a6c\u0005\u00caf\u0002",
    "\u0a6b\u0a69\u0003\u0002\u0002\u0002\u0a6c\u0a6f\u0003\u0002\u0002\u0002",
    "\u0a6d\u0a6b\u0003\u0002\u0002\u0002\u0a6d\u0a6e\u0003\u0002\u0002\u0002",
    "\u0a6e\u0a71\u0003\u0002\u0002\u0002\u0a6f\u0a6d\u0003\u0002\u0002\u0002",
    "\u0a70\u0a66\u0003\u0002\u0002\u0002\u0a70\u0a71\u0003\u0002\u0002\u0002",
    "\u0a71\u0a72\u0003\u0002\u0002\u0002\u0a72\u0a79\u0007\u0006\u0002\u0002",
    "\u0a73\u0a74\u0007^\u0002\u0002\u0a74\u0a75\u0007\u0004\u0002\u0002",
    "\u0a75\u0a76\u0007\u0106\u0002\u0002\u0a76\u0a77\u0005\u00ccg\u0002",
    "\u0a77\u0a78\u0007\u0006\u0002\u0002\u0a78\u0a7a\u0003\u0002\u0002\u0002",
    "\u0a79\u0a73\u0003\u0002\u0002\u0002\u0a79\u0a7a\u0003\u0002\u0002\u0002",
    "\u0a7a\u0a7d\u0003\u0002\u0002\u0002\u0a7b\u0a7c\t\u001e\u0002\u0002",
    "\u0a7c\u0a7e\u0007\u009a\u0002\u0002\u0a7d\u0a7b\u0003\u0002\u0002\u0002",
    "\u0a7d\u0a7e\u0003\u0002\u0002\u0002\u0a7e\u0a81\u0003\u0002\u0002\u0002",
    "\u0a7f\u0a80\u0007\u00a5\u0002\u0002\u0a80\u0a82\u0005\u011a\u008e\u0002",
    "\u0a81\u0a7f\u0003\u0002\u0002\u0002\u0a81\u0a82\u0003\u0002\u0002\u0002",
    "\u0a82\u0ac4\u0003\u0002\u0002\u0002\u0a83\u0a84\u0005\u012a\u0096\u0002",
    "\u0a84\u0a85\u0007\n\u0002\u0002\u0a85\u0a86\u0005\u00caf\u0002\u0a86",
    "\u0ac4\u0003\u0002\u0002\u0002\u0a87\u0a88\u0007\u0004\u0002\u0002\u0a88",
    "\u0a8b\u0005\u012a\u0096\u0002\u0a89\u0a8a\u0007\u0005\u0002\u0002\u0a8a",
    "\u0a8c\u0005\u012a\u0096\u0002\u0a8b\u0a89\u0003\u0002\u0002\u0002\u0a8c",
    "\u0a8d\u0003\u0002\u0002\u0002\u0a8d\u0a8b\u0003\u0002\u0002\u0002\u0a8d",
    "\u0a8e\u0003\u0002\u0002\u0002\u0a8e\u0a8f\u0003\u0002\u0002\u0002\u0a8f",
    "\u0a90\u0007\u0006\u0002\u0002\u0a90\u0a91\u0007\n\u0002\u0002\u0a91",
    "\u0a92\u0005\u00caf\u0002\u0a92\u0ac4\u0003\u0002\u0002\u0002\u0a93",
    "\u0ac4\u0005\u012a\u0096\u0002\u0a94\u0a95\u0007\u0004\u0002\u0002\u0a95",
    "\u0a96\u0005\u00caf\u0002\u0a96\u0a97\u0007\u0006\u0002\u0002\u0a97",
    "\u0ac4\u0003\u0002\u0002\u0002\u0a98\u0a99\u0007Z\u0002\u0002\u0a99",
    "\u0a9a\u0007\u0004\u0002\u0002\u0a9a\u0a9b\u0005\u012a\u0096\u0002\u0a9b",
    "\u0a9c\u0007f\u0002\u0002\u0a9c\u0a9d\u0005\u00d0i\u0002\u0a9d\u0a9e",
    "\u0007\u0006\u0002\u0002\u0a9e\u0ac4\u0003\u0002\u0002\u0002\u0a9f\u0aa0",
    "\t\u001f\u0002\u0002\u0aa0\u0aa1\u0007\u0004\u0002\u0002\u0aa1\u0aa2",
    "\u0005\u00d0i\u0002\u0aa2\u0aa3\t \u0002\u0002\u0aa3\u0aa6\u0005\u00d0",
    "i\u0002\u0aa4\u0aa5\t!\u0002\u0002\u0aa5\u0aa7\u0005\u00d0i\u0002\u0aa6",
    "\u0aa4\u0003\u0002\u0002\u0002\u0aa6\u0aa7\u0003\u0002\u0002\u0002\u0aa7",
    "\u0aa8\u0003\u0002\u0002\u0002\u0aa8\u0aa9\u0007\u0006\u0002\u0002\u0aa9",
    "\u0ac4\u0003\u0002\u0002\u0002\u0aaa\u0aab\u0007\u00f1\u0002\u0002\u0aab",
    "\u0aad\u0007\u0004\u0002\u0002\u0aac\u0aae\t\"\u0002\u0002\u0aad\u0aac",
    "\u0003\u0002\u0002\u0002\u0aad\u0aae\u0003\u0002\u0002\u0002\u0aae\u0ab0",
    "\u0003\u0002\u0002\u0002\u0aaf\u0ab1\u0005\u00d0i\u0002\u0ab0\u0aaf",
    "\u0003\u0002\u0002\u0002\u0ab0\u0ab1\u0003\u0002\u0002\u0002\u0ab1\u0ab2",
    "\u0003\u0002\u0002\u0002\u0ab2\u0ab3\u0007f\u0002\u0002\u0ab3\u0ab4",
    "\u0005\u00d0i\u0002\u0ab4\u0ab5\u0007\u0006\u0002\u0002\u0ab5\u0ac4",
    "\u0003\u0002\u0002\u0002\u0ab6\u0ab7\u0007\u00a7\u0002\u0002\u0ab7\u0ab8",
    "\u0007\u0004\u0002\u0002\u0ab8\u0ab9\u0005\u00d0i\u0002\u0ab9\u0aba",
    "\u0007\u00ae\u0002\u0002\u0aba\u0abb\u0005\u00d0i\u0002\u0abb\u0abc",
    "\u0007f\u0002\u0002\u0abc\u0abf\u0005\u00d0i\u0002\u0abd\u0abe\u0007",
    "b\u0002\u0002\u0abe\u0ac0\u0005\u00d0i\u0002\u0abf\u0abd\u0003\u0002",
    "\u0002\u0002\u0abf\u0ac0\u0003\u0002\u0002\u0002\u0ac0\u0ac1\u0003\u0002",
    "\u0002\u0002\u0ac1\u0ac2\u0007\u0006\u0002\u0002\u0ac2\u0ac4\u0003\u0002",
    "\u0002\u0002\u0ac3\u0a07\u0003\u0002\u0002\u0002\u0ac3\u0a09\u0003\u0002",
    "\u0002\u0002\u0ac3\u0a15\u0003\u0002\u0002\u0002\u0ac3\u0a22\u0003\u0002",
    "\u0002\u0002\u0ac3\u0a29\u0003\u0002\u0002\u0002\u0ac3\u0a36\u0003\u0002",
    "\u0002\u0002\u0ac3\u0a3f\u0003\u0002\u0002\u0002\u0ac3\u0a48\u0003\u0002",
    "\u0002\u0002\u0ac3\u0a4f\u0003\u0002\u0002\u0002\u0ac3\u0a50\u0003\u0002",
    "\u0002\u0002\u0ac3\u0a51\u0003\u0002\u0002\u0002\u0ac3\u0a55\u0003\u0002",
    "\u0002\u0002\u0ac3\u0a5f\u0003\u0002\u0002\u0002\u0ac3\u0a63\u0003\u0002",
    "\u0002\u0002\u0ac3\u0a83\u0003\u0002\u0002\u0002\u0ac3\u0a87\u0003\u0002",
    "\u0002\u0002\u0ac3\u0a93\u0003\u0002\u0002\u0002\u0ac3\u0a94\u0003\u0002",
    "\u0002\u0002\u0ac3\u0a98\u0003\u0002\u0002\u0002\u0ac3\u0a9f\u0003\u0002",
    "\u0002\u0002\u0ac3\u0aaa\u0003\u0002\u0002\u0002\u0ac3\u0ab6\u0003\u0002",
    "\u0002\u0002\u0ac4\u0acf\u0003\u0002\u0002\u0002\u0ac5\u0ac6\f\n\u0002",
    "\u0002\u0ac6\u0ac7\u0007\u000b\u0002\u0002\u0ac7\u0ac8\u0005\u00d0i",
    "\u0002\u0ac8\u0ac9\u0007\f\u0002\u0002\u0ac9\u0ace\u0003\u0002\u0002",
    "\u0002\u0aca\u0acb\f\b\u0002\u0002\u0acb\u0acc\u0007\u0007\u0002\u0002",
    "\u0acc\u0ace\u0005\u012a\u0096\u0002\u0acd\u0ac5\u0003\u0002\u0002\u0002",
    "\u0acd\u0aca\u0003\u0002\u0002\u0002\u0ace\u0ad1\u0003\u0002\u0002\u0002",
    "\u0acf\u0acd\u0003\u0002\u0002\u0002\u0acf\u0ad0\u0003\u0002\u0002\u0002",
    "\u0ad0\u00d3\u0003\u0002\u0002\u0002\u0ad1\u0acf\u0003\u0002\u0002\u0002",
    "\u0ad2\u0adf\u0007\u0099\u0002\u0002\u0ad3\u0adf\u0005\u00dep\u0002",
    "\u0ad4\u0ad5\u0005\u012a\u0096\u0002\u0ad5\u0ad6\u0007\u0129\u0002\u0002",
    "\u0ad6\u0adf\u0003\u0002\u0002\u0002\u0ad7\u0adf\u0005\u0130\u0099\u0002",
    "\u0ad8\u0adf\u0005\u00dco\u0002\u0ad9\u0adb\u0007\u0129\u0002\u0002",
    "\u0ada\u0ad9\u0003\u0002\u0002\u0002\u0adb\u0adc\u0003\u0002\u0002\u0002",
    "\u0adc\u0ada\u0003\u0002\u0002\u0002\u0adc\u0add\u0003\u0002\u0002\u0002",
    "\u0add\u0adf\u0003\u0002\u0002\u0002\u0ade\u0ad2\u0003\u0002\u0002\u0002",
    "\u0ade\u0ad3\u0003\u0002\u0002\u0002\u0ade\u0ad4\u0003\u0002\u0002\u0002",
    "\u0ade\u0ad7\u0003\u0002\u0002\u0002\u0ade\u0ad8\u0003\u0002\u0002\u0002",
    "\u0ade\u0ada\u0003\u0002\u0002\u0002\u0adf\u00d5\u0003\u0002\u0002\u0002",
    "\u0ae0\u0ae1\t#\u0002\u0002\u0ae1\u00d7\u0003\u0002\u0002\u0002\u0ae2",
    "\u0ae3\t$\u0002\u0002\u0ae3\u00d9\u0003\u0002\u0002\u0002\u0ae4\u0ae5",
    "\t%\u0002\u0002\u0ae5\u00db\u0003\u0002\u0002\u0002\u0ae6\u0ae7\t&\u0002",
    "\u0002\u0ae7\u00dd\u0003\u0002\u0002\u0002\u0ae8\u0aeb\u0007z\u0002",
    "\u0002\u0ae9\u0aec\u0005\u00e0q\u0002\u0aea\u0aec\u0005\u00e4s\u0002",
    "\u0aeb\u0ae9\u0003\u0002\u0002\u0002\u0aeb\u0aea\u0003\u0002\u0002\u0002",
    "\u0aeb\u0aec\u0003\u0002\u0002\u0002\u0aec\u00df\u0003\u0002\u0002\u0002",
    "\u0aed\u0aef\u0005\u00e2r\u0002\u0aee\u0af0\u0005\u00e6t\u0002\u0aef",
    "\u0aee\u0003\u0002\u0002\u0002\u0aef\u0af0\u0003\u0002\u0002\u0002\u0af0",
    "\u00e1\u0003\u0002\u0002\u0002\u0af1\u0af2\u0005\u00e8u\u0002\u0af2",
    "\u0af3\u0005\u012a\u0096\u0002\u0af3\u0af5\u0003\u0002\u0002\u0002\u0af4",
    "\u0af1\u0003\u0002\u0002\u0002\u0af5\u0af6\u0003\u0002\u0002\u0002\u0af6",
    "\u0af4\u0003\u0002\u0002\u0002\u0af6\u0af7\u0003\u0002\u0002\u0002\u0af7",
    "\u00e3\u0003\u0002\u0002\u0002\u0af8\u0afb\u0005\u00e6t\u0002\u0af9",
    "\u0afc\u0005\u00e2r\u0002\u0afa\u0afc\u0005\u00e6t\u0002\u0afb\u0af9",
    "\u0003\u0002\u0002\u0002\u0afb\u0afa\u0003\u0002\u0002\u0002\u0afb\u0afc",
    "\u0003\u0002\u0002\u0002\u0afc\u00e5\u0003\u0002\u0002\u0002\u0afd\u0afe",
    "\u0005\u00e8u\u0002\u0afe\u0aff\u0005\u012a\u0096\u0002\u0aff\u0b00",
    "\u0007\u00eb\u0002\u0002\u0b00\u0b01\u0005\u012a\u0096\u0002\u0b01\u00e7",
    "\u0003\u0002\u0002\u0002\u0b02\u0b04\t\'\u0002\u0002\u0b03\u0b02\u0003",
    "\u0002\u0002\u0002\u0b03\u0b04\u0003\u0002\u0002\u0002\u0b04\u0b05\u0003",
    "\u0002\u0002\u0002\u0b05\u0b08\t\u0016\u0002\u0002\u0b06\u0b08\u0007",
    "\u0129\u0002\u0002\u0b07\u0b03\u0003\u0002\u0002\u0002\u0b07\u0b06\u0003",
    "\u0002\u0002\u0002\u0b08\u00e9\u0003\u0002\u0002\u0002\u0b09\u0b0d\u0007",
    "`\u0002\u0002\u0b0a\u0b0b\u0007\u000f\u0002\u0002\u0b0b\u0b0d\u0005",
    "\u0126\u0094\u0002\u0b0c\u0b09\u0003\u0002\u0002\u0002\u0b0c\u0b0a\u0003",
    "\u0002\u0002\u0002\u0b0d\u00eb\u0003\u0002\u0002\u0002\u0b0e\u0b0f\u0007",
    "\u0017\u0002\u0002\u0b0f\u0b10\u0007\u011b\u0002\u0002\u0b10\u0b11\u0005",
    "\u00ecw\u0002\u0b11\u0b12\u0007\u011d\u0002\u0002\u0b12\u0b31\u0003",
    "\u0002\u0002\u0002\u0b13\u0b14\u0007\u0090\u0002\u0002\u0b14\u0b15\u0007",
    "\u011b\u0002\u0002\u0b15\u0b16\u0005\u00ecw\u0002\u0b16\u0b17\u0007",
    "\u0005\u0002\u0002\u0b17\u0b18\u0005\u00ecw\u0002\u0b18\u0b19\u0007",
    "\u011d\u0002\u0002\u0b19\u0b31\u0003\u0002\u0002\u0002\u0b1a\u0b21\u0007",
    "\u00df\u0002\u0002\u0b1b\u0b1d\u0007\u011b\u0002\u0002\u0b1c\u0b1e\u0005",
    "\u0110\u0089\u0002\u0b1d\u0b1c\u0003\u0002\u0002\u0002\u0b1d\u0b1e\u0003",
    "\u0002\u0002\u0002\u0b1e\u0b1f\u0003\u0002\u0002\u0002\u0b1f\u0b22\u0007",
    "\u011d\u0002\u0002\u0b20\u0b22\u0007\u0119\u0002\u0002\u0b21\u0b1b\u0003",
    "\u0002\u0002\u0002\u0b21\u0b20\u0003\u0002\u0002\u0002\u0b22\u0b31\u0003",
    "\u0002\u0002\u0002\u0b23\u0b2e\u0005\u012a\u0096\u0002\u0b24\u0b25\u0007",
    "\u0004\u0002\u0002\u0b25\u0b2a\u0007\u012d\u0002\u0002\u0b26\u0b27\u0007",
    "\u0005\u0002\u0002\u0b27\u0b29\u0007\u012d\u0002\u0002\u0b28\u0b26\u0003",
    "\u0002\u0002\u0002\u0b29\u0b2c\u0003\u0002\u0002\u0002\u0b2a\u0b28\u0003",
    "\u0002\u0002\u0002\u0b2a\u0b2b\u0003\u0002\u0002\u0002\u0b2b\u0b2d\u0003",
    "\u0002\u0002\u0002\u0b2c\u0b2a\u0003\u0002\u0002\u0002\u0b2d\u0b2f\u0007",
    "\u0006\u0002\u0002\u0b2e\u0b24\u0003\u0002\u0002\u0002\u0b2e\u0b2f\u0003",
    "\u0002\u0002\u0002\u0b2f\u0b31\u0003\u0002\u0002\u0002\u0b30\u0b0e\u0003",
    "\u0002\u0002\u0002\u0b30\u0b13\u0003\u0002\u0002\u0002\u0b30\u0b1a\u0003",
    "\u0002\u0002\u0002\u0b30\u0b23\u0003\u0002\u0002\u0002\u0b31\u00ed\u0003",
    "\u0002\u0002\u0002\u0b32\u0b37\u0005\u00f0y\u0002\u0b33\u0b34\u0007",
    "\u0005\u0002\u0002\u0b34\u0b36\u0005\u00f0y\u0002\u0b35\u0b33\u0003",
    "\u0002\u0002\u0002\u0b36\u0b39\u0003\u0002\u0002\u0002\u0b37\u0b35\u0003",
    "\u0002\u0002\u0002\u0b37\u0b38\u0003\u0002\u0002\u0002\u0b38\u00ef\u0003",
    "\u0002\u0002\u0002\u0b39\u0b37\u0003\u0002\u0002\u0002\u0b3a\u0b3b\u0005",
    "\u00b8]\u0002\u0b3b\u0b3d\u0005\u00ecw\u0002\u0b3c\u0b3e\u0005\u0106",
    "\u0084\u0002\u0b3d\u0b3c\u0003\u0002\u0002\u0002\u0b3d\u0b3e\u0003\u0002",
    "\u0002\u0002\u0b3e\u0b40\u0003\u0002\u0002\u0002\u0b3f\u0b41\u0005\"",
    "\u0012\u0002\u0b40\u0b3f\u0003\u0002\u0002\u0002\u0b40\u0b41\u0003\u0002",
    "\u0002\u0002\u0b41\u0b43\u0003\u0002\u0002\u0002\u0b42\u0b44\u0005\u00ea",
    "v\u0002\u0b43\u0b42\u0003\u0002\u0002\u0002\u0b43\u0b44\u0003\u0002",
    "\u0002\u0002\u0b44\u00f1\u0003\u0002\u0002\u0002\u0b45\u0b4a\u0005\u00f4",
    "{\u0002\u0b46\u0b47\u0007\u0005\u0002\u0002\u0b47\u0b49\u0005\u00f4",
    "{\u0002\u0b48\u0b46\u0003\u0002\u0002\u0002\u0b49\u0b4c\u0003\u0002",
    "\u0002\u0002\u0b4a\u0b48\u0003\u0002\u0002\u0002\u0b4a\u0b4b\u0003\u0002",
    "\u0002\u0002\u0b4b\u00f3\u0003\u0002\u0002\u0002\u0b4c\u0b4a\u0003\u0002",
    "\u0002\u0002\u0b4d\u0b4e\u0005\u0126\u0094\u0002\u0b4e\u0b50\u0005\u00ec",
    "w\u0002\u0b4f\u0b51\u0005\u0106\u0084\u0002\u0b50\u0b4f\u0003\u0002",
    "\u0002\u0002\u0b50\u0b51\u0003\u0002\u0002\u0002\u0b51\u0b53\u0003\u0002",
    "\u0002\u0002\u0b52\u0b54\u0005\"\u0012\u0002\u0b53\u0b52\u0003\u0002",
    "\u0002\u0002\u0b53\u0b54\u0003\u0002\u0002\u0002\u0b54\u00f5\u0003\u0002",
    "\u0002\u0002\u0b55\u0b58\u0005\u00f8}\u0002\u0b56\u0b58\u0005\u00fa",
    "~\u0002\u0b57\u0b55\u0003\u0002\u0002\u0002\u0b57\u0b56\u0003\u0002",
    "\u0002\u0002\u0b58\u00f7\u0003\u0002\u0002\u0002\u0b59\u0b5b\u0005\u00fc",
    "\u007f\u0002\u0b5a\u0b59\u0003\u0002\u0002\u0002\u0b5a\u0b5b\u0003\u0002",
    "\u0002\u0002\u0b5b\u0b5c\u0003\u0002\u0002\u0002\u0b5c\u0b5d\u0007\u00b1",
    "\u0002\u0002\u0b5d\u0b5e\u0007\u010a\u0002\u0002\u0b5e\u0b5f\u0007\u0004",
    "\u0002\u0002\u0b5f\u0b60\u0005\u00fe\u0080\u0002\u0b60\u0b64\u0007\u0006",
    "\u0002\u0002\u0b61\u0b63\u0005\u0104\u0083\u0002\u0b62\u0b61\u0003\u0002",
    "\u0002\u0002\u0b63\u0b66\u0003\u0002\u0002\u0002\u0b64\u0b62\u0003\u0002",
    "\u0002\u0002\u0b64\u0b65\u0003\u0002\u0002\u0002\u0b65\u00f9\u0003\u0002",
    "\u0002\u0002\u0b66\u0b64\u0003\u0002\u0002\u0002\u0b67\u0b69\u0005\u00fc",
    "\u007f\u0002\u0b68\u0b67\u0003\u0002\u0002\u0002\u0b68\u0b69\u0003\u0002",
    "\u0002\u0002\u0b69\u0b6a\u0003\u0002\u0002\u0002\u0b6a\u0b6b\u0007c",
    "\u0002\u0002\u0b6b\u0b6c\u0007\u010a\u0002\u0002\u0b6c\u0b6d\u0007\u0004",
    "\u0002\u0002\u0b6d\u0b6e\u0005\u00fe\u0080\u0002\u0b6e\u0b6f\u0007\u0006",
    "\u0002\u0002\u0b6f\u0b70\u0007\u00bb\u0002\u0002\u0b70\u0b75\u0005\u00b8",
    "]\u0002\u0b71\u0b72\u0007\u0004\u0002\u0002\u0b72\u0b73\u0005\u00fe",
    "\u0080\u0002\u0b73\u0b74\u0007\u0006\u0002\u0002\u0b74\u0b76\u0003\u0002",
    "\u0002\u0002\u0b75\u0b71\u0003\u0002\u0002\u0002\u0b75\u0b76\u0003\u0002",
    "\u0002\u0002\u0b76\u0b7a\u0003\u0002\u0002\u0002\u0b77\u0b79\u0005\u0100",
    "\u0081\u0002\u0b78\u0b77\u0003\u0002\u0002\u0002\u0b79\u0b7c\u0003\u0002",
    "\u0002\u0002\u0b7a\u0b78\u0003\u0002\u0002\u0002\u0b7a\u0b7b\u0003\u0002",
    "\u0002\u0002\u0b7b\u00fb\u0003\u0002\u0002\u0002\u0b7c\u0b7a\u0003\u0002",
    "\u0002\u0002\u0b7d\u0b7e\u00075\u0002\u0002\u0b7e\u0b7f\u0005\u012a",
    "\u0096\u0002\u0b7f\u00fd\u0003\u0002\u0002\u0002\u0b80\u0b85\u0005\u012a",
    "\u0096\u0002\u0b81\u0b82\u0007\u0005\u0002\u0002\u0b82\u0b84\u0005\u012a",
    "\u0096\u0002\u0b83\u0b81\u0003\u0002\u0002\u0002\u0b84\u0b87\u0003\u0002",
    "\u0002\u0002\u0b85\u0b83\u0003\u0002\u0002\u0002\u0b85\u0b86\u0003\u0002",
    "\u0002\u0002\u0b86\u00ff\u0003\u0002\u0002\u0002\u0b87\u0b85\u0003\u0002",
    "\u0002\u0002\u0b88\u0b8b\u0005\u0102\u0082\u0002\u0b89\u0b8b\u0005\u0104",
    "\u0083\u0002\u0b8a\u0b88\u0003\u0002\u0002\u0002\u0b8a\u0b89\u0003\u0002",
    "\u0002\u0002\u0b8b\u0101\u0003\u0002\u0002\u0002\u0b8c\u0b8d\u0007\u0110",
    "\u0002\u0002\u0b8d\u0b97\u0007g\u0002\u0002\u0b8e\u0b8f\u0007\u009c",
    "\u0002\u0002\u0b8f\u0b90\u0007\u00fe\u0002\u0002\u0b90\u0b91\u0007\u0097",
    "\u0002\u0002\u0b91\u0b97\u0007\u0111\u0002\u0002\u0b92\u0b93\u0007\u009c",
    "\u0002\u0002\u0b93\u0b94\u0007D\u0002\u0002\u0b94\u0b95\u0007\u0097",
    "\u0002\u0002\u0b95\u0b97\u0007\u0111\u0002\u0002\u0b96\u0b8c\u0003\u0002",
    "\u0002\u0002\u0b96\u0b8e\u0003\u0002\u0002\u0002\u0b96\u0b92\u0003\u0002",
    "\u0002\u0002\u0b97\u0103\u0003\u0002\u0002\u0002\u0b98\u0b99\u0007\u0098",
    "\u0002\u0002\u0b99\u0b9f\u0007\u010b\u0002\u0002\u0b9a\u0b9f\u0007\u010c",
    "\u0002\u0002\u0b9b\u0b9c\u0007\u010d\u0002\u0002\u0b9c\u0b9f\u0007\u010e",
    "\u0002\u0002\u0b9d\u0b9f\u0007\u010f\u0002\u0002\u0b9e\u0b98\u0003\u0002",
    "\u0002\u0002\u0b9e\u0b9a\u0003\u0002\u0002\u0002\u0b9e\u0b9b\u0003\u0002",
    "\u0002\u0002\u0b9e\u0b9d\u0003\u0002\u0002\u0002\u0b9f\u0105\u0003\u0002",
    "\u0002\u0002\u0ba0\u0ba4\u0005\u0108\u0085\u0002\u0ba1\u0ba3\u0005\u0108",
    "\u0085\u0002\u0ba2\u0ba1\u0003\u0002\u0002\u0002\u0ba3\u0ba6\u0003\u0002",
    "\u0002\u0002\u0ba4\u0ba2\u0003\u0002\u0002\u0002\u0ba4\u0ba5\u0003\u0002",
    "\u0002\u0002\u0ba5\u0107\u0003\u0002\u0002\u0002\u0ba6\u0ba4\u0003\u0002",
    "\u0002\u0002\u0ba7\u0ba8\u0007\u0098\u0002\u0002\u0ba8\u0bad\u0007\u0099",
    "\u0002\u0002\u0ba9\u0baa\u0007\u00b1\u0002\u0002\u0baa\u0bad\u0007\u010a",
    "\u0002\u0002\u0bab\u0bad\u0005\u010a\u0086\u0002\u0bac\u0ba7\u0003\u0002",
    "\u0002\u0002\u0bac\u0ba9\u0003\u0002\u0002\u0002\u0bac\u0bab\u0003\u0002",
    "\u0002\u0002\u0bad\u0109\u0003\u0002\u0002\u0002\u0bae\u0bb1\u0007\u0112",
    "\u0002\u0002\u0baf\u0bb2\u0005\u010c\u0087\u0002\u0bb0\u0bb2\u0005\u010e",
    "\u0088\u0002\u0bb1\u0baf\u0003\u0002\u0002\u0002\u0bb1\u0bb0\u0003\u0002",
    "\u0002\u0002\u0bb2\u010b\u0003\u0002\u0002\u0002\u0bb3\u0bb4\u0007\u0113",
    "\u0002\u0002\u0bb4\u0bb5\u0007\u0018\u0002\u0002\u0bb5\u0bb6\u0007\u0004",
    "\u0002\u0002\u0bb6\u0bb7\u0005\u00caf\u0002\u0bb7\u0bb8\u0007\u0006",
    "\u0002\u0002\u0bb8\u010d\u0003\u0002\u0002\u0002\u0bb9\u0bbd\u0007\u0113",
    "\u0002\u0002\u0bba\u0bbb\u0007 \u0002\u0002\u0bbb\u0bbd\u0007\u0114",
    "\u0002\u0002\u0bbc\u0bb9\u0003\u0002\u0002\u0002\u0bbc\u0bba\u0003\u0002",
    "\u0002\u0002\u0bbd\u0bbe\u0003\u0002\u0002\u0002\u0bbe\u0bbf\u0007\u0018",
    "\u0002\u0002\u0bbf\u0bcc\u0007\u0115\u0002\u0002\u0bc0\u0bc4\u0007\u0004",
    "\u0002\u0002\u0bc1\u0bc2\u0007\u00db\u0002\u0002\u0bc2\u0bc3\u0007\u0108",
    "\u0002\u0002\u0bc3\u0bc5\u0005\u0130\u0099\u0002\u0bc4\u0bc1\u0003\u0002",
    "\u0002\u0002\u0bc4\u0bc5\u0003\u0002\u0002\u0002\u0bc5\u0bc9\u0003\u0002",
    "\u0002\u0002\u0bc6\u0bc7\u0007\u0116\u0002\u0002\u0bc7\u0bc8\u0007 ",
    "\u0002\u0002\u0bc8\u0bca\u0005\u0130\u0099\u0002\u0bc9\u0bc6\u0003\u0002",
    "\u0002\u0002\u0bc9\u0bca\u0003\u0002\u0002\u0002\u0bca\u0bcb\u0003\u0002",
    "\u0002\u0002\u0bcb\u0bcd\u0007\u0006\u0002\u0002\u0bcc\u0bc0\u0003\u0002",
    "\u0002\u0002\u0bcc\u0bcd\u0003\u0002\u0002\u0002\u0bcd\u010f\u0003\u0002",
    "\u0002\u0002\u0bce\u0bd3\u0005\u0112\u008a\u0002\u0bcf\u0bd0\u0007\u0005",
    "\u0002\u0002\u0bd0\u0bd2\u0005\u0112\u008a\u0002\u0bd1\u0bcf\u0003\u0002",
    "\u0002\u0002\u0bd2\u0bd5\u0003\u0002\u0002\u0002\u0bd3\u0bd1\u0003\u0002",
    "\u0002\u0002\u0bd3\u0bd4\u0003\u0002\u0002\u0002\u0bd4\u0111\u0003\u0002",
    "\u0002\u0002\u0bd5\u0bd3\u0003\u0002\u0002\u0002\u0bd6\u0bd7\u0005\u012a",
    "\u0096\u0002\u0bd7\u0bd8\u0007\r\u0002\u0002\u0bd8\u0bdb\u0005\u00ec",
    "w\u0002\u0bd9\u0bda\u0007\u0098\u0002\u0002\u0bda\u0bdc\u0007\u0099",
    "\u0002\u0002\u0bdb\u0bd9\u0003\u0002\u0002\u0002\u0bdb\u0bdc\u0003\u0002",
    "\u0002\u0002\u0bdc\u0bde\u0003\u0002\u0002\u0002\u0bdd\u0bdf\u0005\"",
    "\u0012\u0002\u0bde\u0bdd\u0003\u0002\u0002\u0002\u0bde\u0bdf\u0003\u0002",
    "\u0002\u0002\u0bdf\u0113\u0003\u0002\u0002\u0002\u0be0\u0be1\u0007\u0105",
    "\u0002\u0002\u0be1\u0be2\u0005\u00caf\u0002\u0be2\u0be3\u0007\u00e9",
    "\u0002\u0002\u0be3\u0be4\u0005\u00caf\u0002\u0be4\u0115\u0003\u0002",
    "\u0002\u0002\u0be5\u0be6\u0007\u0107\u0002\u0002\u0be6\u0beb\u0005\u0118",
    "\u008d\u0002\u0be7\u0be8\u0007\u0005\u0002\u0002\u0be8\u0bea\u0005\u0118",
    "\u008d\u0002\u0be9\u0be7\u0003\u0002\u0002\u0002\u0bea\u0bed\u0003\u0002",
    "\u0002\u0002\u0beb\u0be9\u0003\u0002\u0002\u0002\u0beb\u0bec\u0003\u0002",
    "\u0002\u0002\u0bec\u0117\u0003\u0002\u0002\u0002\u0bed\u0beb\u0003\u0002",
    "\u0002\u0002\u0bee\u0bef\u0005\u0126\u0094\u0002\u0bef\u0bf0\u0007\u0018",
    "\u0002\u0002\u0bf0\u0bf1\u0005\u011a\u008e\u0002\u0bf1\u0119\u0003\u0002",
    "\u0002\u0002\u0bf2\u0c21\u0005\u0126\u0094\u0002\u0bf3\u0bf4\u0007\u0004",
    "\u0002\u0002\u0bf4\u0bf5\u0005\u0126\u0094\u0002\u0bf5\u0bf6\u0007\u0006",
    "\u0002\u0002\u0bf6\u0c21\u0003\u0002\u0002\u0002\u0bf7\u0c1a\u0007\u0004",
    "\u0002\u0002\u0bf8\u0bf9\u0007(\u0002\u0002\u0bf9\u0bfa\u0007 \u0002",
    "\u0002\u0bfa\u0bff\u0005\u00caf\u0002\u0bfb\u0bfc\u0007\u0005\u0002",
    "\u0002\u0bfc\u0bfe\u0005\u00caf\u0002\u0bfd\u0bfb\u0003\u0002\u0002",
    "\u0002\u0bfe\u0c01\u0003\u0002\u0002\u0002\u0bff\u0bfd\u0003\u0002\u0002",
    "\u0002\u0bff\u0c00\u0003\u0002\u0002\u0002\u0c00\u0c1b\u0003\u0002\u0002",
    "\u0002\u0c01\u0bff\u0003\u0002\u0002\u0002\u0c02\u0c03\t(\u0002\u0002",
    "\u0c03\u0c04\u0007 \u0002\u0002\u0c04\u0c09\u0005\u00caf\u0002\u0c05",
    "\u0c06\u0007\u0005\u0002\u0002\u0c06\u0c08\u0005\u00caf\u0002\u0c07",
    "\u0c05\u0003\u0002\u0002\u0002\u0c08\u0c0b\u0003\u0002\u0002\u0002\u0c09",
    "\u0c07\u0003\u0002\u0002\u0002\u0c09\u0c0a\u0003\u0002\u0002\u0002\u0c0a",
    "\u0c0d\u0003\u0002\u0002\u0002\u0c0b\u0c09\u0003\u0002\u0002\u0002\u0c0c",
    "\u0c02\u0003\u0002\u0002\u0002\u0c0c\u0c0d\u0003\u0002\u0002\u0002\u0c0d",
    "\u0c18\u0003\u0002\u0002\u0002\u0c0e\u0c0f\t)\u0002\u0002\u0c0f\u0c10",
    "\u0007 \u0002\u0002\u0c10\u0c15\u0005^0\u0002\u0c11\u0c12\u0007\u0005",
    "\u0002\u0002\u0c12\u0c14\u0005^0\u0002\u0c13\u0c11\u0003\u0002\u0002",
    "\u0002\u0c14\u0c17\u0003\u0002\u0002\u0002\u0c15\u0c13\u0003\u0002\u0002",
    "\u0002\u0c15\u0c16\u0003\u0002\u0002\u0002\u0c16\u0c19\u0003\u0002\u0002",
    "\u0002\u0c17\u0c15\u0003\u0002\u0002\u0002\u0c18\u0c0e\u0003\u0002\u0002",
    "\u0002\u0c18\u0c19\u0003\u0002\u0002\u0002\u0c19\u0c1b\u0003\u0002\u0002",
    "\u0002\u0c1a\u0bf8\u0003\u0002\u0002\u0002\u0c1a\u0c0c\u0003\u0002\u0002",
    "\u0002\u0c1b\u0c1d\u0003\u0002\u0002\u0002\u0c1c\u0c1e\u0005\u011c\u008f",
    "\u0002\u0c1d\u0c1c\u0003\u0002\u0002\u0002\u0c1d\u0c1e\u0003\u0002\u0002",
    "\u0002\u0c1e\u0c1f\u0003\u0002\u0002\u0002\u0c1f\u0c21\u0007\u0006\u0002",
    "\u0002\u0c20\u0bf2\u0003\u0002\u0002\u0002\u0c20\u0bf3\u0003\u0002\u0002",
    "\u0002\u0c20\u0bf7\u0003\u0002\u0002\u0002\u0c21\u011b\u0003\u0002\u0002",
    "\u0002\u0c22\u0c23\u0007\u00b6\u0002\u0002\u0c23\u0c33\u0005\u011e\u0090",
    "\u0002\u0c24\u0c25\u0007\u00cb\u0002\u0002\u0c25\u0c33\u0005\u011e\u0090",
    "\u0002\u0c26\u0c27\u0007\u00b6\u0002\u0002\u0c27\u0c28\u0007\u001c\u0002",
    "\u0002\u0c28\u0c29\u0005\u011e\u0090\u0002\u0c29\u0c2a\u0007\u0013\u0002",
    "\u0002\u0c2a\u0c2b\u0005\u011e\u0090\u0002\u0c2b\u0c33\u0003\u0002\u0002",
    "\u0002\u0c2c\u0c2d\u0007\u00cb\u0002\u0002\u0c2d\u0c2e\u0007\u001c\u0002",
    "\u0002\u0c2e\u0c2f\u0005\u011e\u0090\u0002\u0c2f\u0c30\u0007\u0013\u0002",
    "\u0002\u0c30\u0c31\u0005\u011e\u0090\u0002\u0c31\u0c33\u0003\u0002\u0002",
    "\u0002\u0c32\u0c22\u0003\u0002\u0002\u0002\u0c32\u0c24\u0003\u0002\u0002",
    "\u0002\u0c32\u0c26\u0003\u0002\u0002\u0002\u0c32\u0c2c\u0003\u0002\u0002",
    "\u0002\u0c33\u011d\u0003\u0002\u0002\u0002\u0c34\u0c35\u0007\u00f7\u0002",
    "\u0002\u0c35\u0c3c\t*\u0002\u0002\u0c36\u0c37\u0007:\u0002\u0002\u0c37",
    "\u0c3c\u0007\u00ca\u0002\u0002\u0c38\u0c39\u0005\u00caf\u0002\u0c39",
    "\u0c3a\t*\u0002\u0002\u0c3a\u0c3c\u0003\u0002\u0002\u0002\u0c3b\u0c34",
    "\u0003\u0002\u0002\u0002\u0c3b\u0c36\u0003\u0002\u0002\u0002\u0c3b\u0c38",
    "\u0003\u0002\u0002\u0002\u0c3c\u011f\u0003\u0002\u0002\u0002\u0c3d\u0c42",
    "\u0005\u0124\u0093\u0002\u0c3e\u0c3f\u0007\u0005\u0002\u0002\u0c3f\u0c41",
    "\u0005\u0124\u0093\u0002\u0c40\u0c3e\u0003\u0002\u0002\u0002\u0c41\u0c44",
    "\u0003\u0002\u0002\u0002\u0c42\u0c40\u0003\u0002\u0002\u0002\u0c42\u0c43",
    "\u0003\u0002\u0002\u0002\u0c43\u0121\u0003\u0002\u0002\u0002\u0c44\u0c42",
    "\u0003\u0002\u0002\u0002\u0c45\u0c4a\u0005\u0124\u0093\u0002\u0c46\u0c4a",
    "\u0007^\u0002\u0002\u0c47\u0c4a\u0007\u0084\u0002\u0002\u0c48\u0c4a",
    "\u0007\u00c4\u0002\u0002\u0c49\u0c45\u0003\u0002\u0002\u0002\u0c49\u0c46",
    "\u0003\u0002\u0002\u0002\u0c49\u0c47\u0003\u0002\u0002\u0002\u0c49\u0c48",
    "\u0003\u0002\u0002\u0002\u0c4a\u0123\u0003\u0002\u0002\u0002\u0c4b\u0c50",
    "\u0005\u012a\u0096\u0002\u0c4c\u0c4d\u0007\u0007\u0002\u0002\u0c4d\u0c4f",
    "\u0005\u012a\u0096\u0002\u0c4e\u0c4c\u0003\u0002\u0002\u0002\u0c4f\u0c52",
    "\u0003\u0002\u0002\u0002\u0c50\u0c4e\u0003\u0002\u0002\u0002\u0c50\u0c51",
    "\u0003\u0002\u0002\u0002\u0c51\u0125\u0003\u0002\u0002\u0002\u0c52\u0c50",
    "\u0003\u0002\u0002\u0002\u0c53\u0c54\u0005\u012a\u0096\u0002\u0c54\u0c55",
    "\u0005\u0128\u0095\u0002\u0c55\u0127\u0003\u0002\u0002\u0002\u0c56\u0c57",
    "\u0007\u0120\u0002\u0002\u0c57\u0c59\u0005\u012a\u0096\u0002\u0c58\u0c56",
    "\u0003\u0002\u0002\u0002\u0c59\u0c5a\u0003\u0002\u0002\u0002\u0c5a\u0c58",
    "\u0003\u0002\u0002\u0002\u0c5a\u0c5b\u0003\u0002\u0002\u0002\u0c5b\u0c5e",
    "\u0003\u0002\u0002\u0002\u0c5c\u0c5e\u0003\u0002\u0002\u0002\u0c5d\u0c58",
    "\u0003\u0002\u0002\u0002\u0c5d\u0c5c\u0003\u0002\u0002\u0002\u0c5e\u0129",
    "\u0003\u0002\u0002\u0002\u0c5f\u0c63\u0005\u012c\u0097\u0002\u0c60\u0c61",
    "\u0006\u0096\u0012\u0002\u0c61\u0c63\u0005\u0136\u009c\u0002\u0c62\u0c5f",
    "\u0003\u0002\u0002\u0002\u0c62\u0c60\u0003\u0002\u0002\u0002\u0c63\u012b",
    "\u0003\u0002\u0002\u0002\u0c64\u0c6b\u0007\u0133\u0002\u0002\u0c65\u0c6b",
    "\u0005\u012e\u0098\u0002\u0c66\u0c67\u0006\u0097\u0013\u0002\u0c67\u0c6b",
    "\u0005\u0134\u009b\u0002\u0c68\u0c69\u0006\u0097\u0014\u0002\u0c69\u0c6b",
    "\u0005\u0138\u009d\u0002\u0c6a\u0c64\u0003\u0002\u0002\u0002\u0c6a\u0c65",
    "\u0003\u0002\u0002\u0002\u0c6a\u0c66\u0003\u0002\u0002\u0002\u0c6a\u0c68",
    "\u0003\u0002\u0002\u0002\u0c6b\u012d\u0003\u0002\u0002\u0002\u0c6c\u0c6d",
    "\u0007\u0134\u0002\u0002\u0c6d\u012f\u0003\u0002\u0002\u0002\u0c6e\u0c70",
    "\u0006\u0099\u0015\u0002\u0c6f\u0c71\u0007\u0120\u0002\u0002\u0c70\u0c6f",
    "\u0003\u0002\u0002\u0002\u0c70\u0c71\u0003\u0002\u0002\u0002\u0c71\u0c72",
    "\u0003\u0002\u0002\u0002\u0c72\u0c9a\u0007\u012e\u0002\u0002\u0c73\u0c75",
    "\u0006\u0099\u0016\u0002\u0c74\u0c76\u0007\u0120\u0002\u0002\u0c75\u0c74",
    "\u0003\u0002\u0002\u0002\u0c75\u0c76\u0003\u0002\u0002\u0002\u0c76\u0c77",
    "\u0003\u0002\u0002\u0002\u0c77\u0c9a\u0007\u012f\u0002\u0002\u0c78\u0c7a",
    "\u0006\u0099\u0017\u0002\u0c79\u0c7b\u0007\u0120\u0002\u0002\u0c7a\u0c79",
    "\u0003\u0002\u0002\u0002\u0c7a\u0c7b\u0003\u0002\u0002\u0002\u0c7b\u0c7c",
    "\u0003\u0002\u0002\u0002\u0c7c\u0c9a\t+\u0002\u0002\u0c7d\u0c7f\u0007",
    "\u0120\u0002\u0002\u0c7e\u0c7d\u0003\u0002\u0002\u0002\u0c7e\u0c7f\u0003",
    "\u0002\u0002\u0002\u0c7f\u0c80\u0003\u0002\u0002\u0002\u0c80\u0c9a\u0007",
    "\u012d\u0002\u0002\u0c81\u0c83\u0007\u0120\u0002\u0002\u0c82\u0c81\u0003",
    "\u0002\u0002\u0002\u0c82\u0c83\u0003\u0002\u0002\u0002\u0c83\u0c84\u0003",
    "\u0002\u0002\u0002\u0c84\u0c9a\u0007\u012a\u0002\u0002\u0c85\u0c87\u0007",
    "\u0120\u0002\u0002\u0c86\u0c85\u0003\u0002\u0002\u0002\u0c86\u0c87\u0003",
    "\u0002\u0002\u0002\u0c87\u0c88\u0003\u0002\u0002\u0002\u0c88\u0c9a\u0007",
    "\u012b\u0002\u0002\u0c89\u0c8b\u0007\u0120\u0002\u0002\u0c8a\u0c89\u0003",
    "\u0002\u0002\u0002\u0c8a\u0c8b\u0003\u0002\u0002\u0002\u0c8b\u0c8c\u0003",
    "\u0002\u0002\u0002\u0c8c\u0c9a\u0007\u012c\u0002\u0002\u0c8d\u0c8f\u0007",
    "\u0120\u0002\u0002\u0c8e\u0c8d\u0003\u0002\u0002\u0002\u0c8e\u0c8f\u0003",
    "\u0002\u0002\u0002\u0c8f\u0c90\u0003\u0002\u0002\u0002\u0c90\u0c9a\u0007",
    "\u0131\u0002\u0002\u0c91\u0c93\u0007\u0120\u0002\u0002\u0c92\u0c91\u0003",
    "\u0002\u0002\u0002\u0c92\u0c93\u0003\u0002\u0002\u0002\u0c93\u0c94\u0003",
    "\u0002\u0002\u0002\u0c94\u0c9a\u0007\u0130\u0002\u0002\u0c95\u0c97\u0007",
    "\u0120\u0002\u0002\u0c96\u0c95\u0003\u0002\u0002\u0002\u0c96\u0c97\u0003",
    "\u0002\u0002\u0002\u0c97\u0c98\u0003\u0002\u0002\u0002\u0c98\u0c9a\u0007",
    "\u0132\u0002\u0002\u0c99\u0c6e\u0003\u0002\u0002\u0002\u0c99\u0c73\u0003",
    "\u0002\u0002\u0002\u0c99\u0c78\u0003\u0002\u0002\u0002\u0c99\u0c7e\u0003",
    "\u0002\u0002\u0002\u0c99\u0c82\u0003\u0002\u0002\u0002\u0c99\u0c86\u0003",
    "\u0002\u0002\u0002\u0c99\u0c8a\u0003\u0002\u0002\u0002\u0c99\u0c8e\u0003",
    "\u0002\u0002\u0002\u0c99\u0c92\u0003\u0002\u0002\u0002\u0c99\u0c96\u0003",
    "\u0002\u0002\u0002\u0c9a\u0131\u0003\u0002\u0002\u0002\u0c9b\u0c9c\u0007",
    "\u00f5\u0002\u0002\u0c9c\u0ca3\u0005\u00ecw\u0002\u0c9d\u0ca3\u0005",
    "\"\u0012\u0002\u0c9e\u0ca3\u0005\u00eav\u0002\u0c9f\u0ca0\t,\u0002\u0002",
    "\u0ca0\u0ca1\u0007\u0098\u0002\u0002\u0ca1\u0ca3\u0007\u0099\u0002\u0002",
    "\u0ca2\u0c9b\u0003\u0002\u0002\u0002\u0ca2\u0c9d\u0003\u0002\u0002\u0002",
    "\u0ca2\u0c9e\u0003\u0002\u0002\u0002\u0ca2\u0c9f\u0003\u0002\u0002\u0002",
    "\u0ca3\u0133\u0003\u0002\u0002\u0002\u0ca4\u0ca5\t-\u0002\u0002\u0ca5",
    "\u0135\u0003\u0002\u0002\u0002\u0ca6\u0ca7\t.\u0002\u0002\u0ca7\u0137",
    "\u0003\u0002\u0002\u0002\u0ca8\u0ca9\t/\u0002\u0002\u0ca9\u0139\u0003",
    "\u0002\u0002\u0002\u01a6\u013e\u0157\u015c\u0164\u016c\u016e\u0182\u0186",
    "\u018c\u018f\u0192\u019b\u01a0\u01a3\u01a7\u01aa\u01b1\u01bc\u01be\u01c8",
    "\u01cd\u01d0\u01d4\u01d7\u01dd\u01e8\u01ee\u01f3\u0233\u023c\u0240\u0246",
    "\u024a\u024f\u0255\u0261\u0269\u026f\u027c\u0281\u0291\u0298\u029c\u02a2",
    "\u02b1\u02b5\u02bb\u02c1\u02c4\u02c7\u02cd\u02d1\u02d9\u02db\u02e4\u02e7",
    "\u02f0\u02f5\u02fb\u0302\u0305\u030b\u0316\u0319\u031d\u0322\u0327\u032e",
    "\u0331\u0334\u033b\u0340\u0349\u0351\u0357\u035a\u035d\u0363\u0367\u036b",
    "\u036f\u0371\u0379\u0381\u0387\u038d\u0390\u0394\u0397\u039b\u03b7\u03ba",
    "\u03be\u03c4\u03c7\u03ca\u03d0\u03d8\u03dd\u03e3\u03e9\u03f1\u03f9\u03fc",
    "\u0403\u0414\u0422\u0425\u042b\u0434\u043d\u0444\u0447\u0453\u0457\u045e",
    "\u04d2\u04da\u04e2\u04eb\u04f5\u04f9\u04fc\u0502\u0508\u0514\u0520\u0525",
    "\u052e\u0536\u053d\u053f\u0542\u0547\u054b\u0550\u0553\u0558\u055d\u0560",
    "\u0565\u0569\u056e\u0570\u0574\u057d\u0585\u058e\u0595\u059e\u05a3\u05a6",
    "\u05ba\u05bc\u05cb\u05d2\u05d5\u05dc\u05e0\u05e6\u05ee\u05f9\u0604\u060b",
    "\u0611\u061e\u0625\u062c\u0638\u0640\u0646\u0649\u0652\u0655\u065e\u0661",
    "\u066a\u066d\u0676\u0679\u067c\u0681\u0683\u068f\u0696\u069d\u06a0\u06a2",
    "\u06ae\u06b2\u06b6\u06bc\u06c0\u06c8\u06cc\u06cf\u06d2\u06d5\u06d9\u06dd",
    "\u06e0\u06e4\u06e9\u06ed\u06f0\u06f3\u06f6\u06f8\u0704\u0707\u070b\u0715",
    "\u0719\u071b\u071e\u0722\u0728\u072c\u0737\u0741\u074d\u075c\u0761\u0768",
    "\u0778\u077d\u078a\u078f\u0797\u079d\u07a1\u07aa\u07b4\u07c3\u07c8\u07ca",
    "\u07ce\u07d4\u07dc\u07e7\u07ea\u07ee\u07fc\u0809\u080e\u0812\u0815\u081a",
    "\u0823\u0826\u082b\u0832\u0835\u083d\u0844\u084b\u084e\u0853\u0856\u085b",
    "\u085f\u0862\u0865\u086b\u0870\u0875\u0887\u0889\u088c\u0897\u08a0\u08a7",
    "\u08af\u08b6\u08ba\u08c2\u08ca\u08d0\u08d8\u08e4\u08e7\u08ed\u08f1\u08f3",
    "\u08fc\u0908\u090a\u0911\u0918\u091e\u0924\u0926\u092d\u0935\u093b\u0942",
    "\u0948\u094c\u094e\u0955\u095e\u0965\u096f\u0974\u0978\u0986\u0988\u0990",
    "\u0992\u0996\u099e\u09a7\u09ad\u09b5\u09ba\u09c6\u09cb\u09ce\u09d4\u09d8",
    "\u09dd\u09e2\u09e7\u09ed\u0a02\u0a04\u0a0d\u0a11\u0a1a\u0a1e\u0a30\u0a33",
    "\u0a3b\u0a44\u0a5b\u0a66\u0a6d\u0a70\u0a79\u0a7d\u0a81\u0a8d\u0aa6\u0aad",
    "\u0ab0\u0abf\u0ac3\u0acd\u0acf\u0adc\u0ade\u0aeb\u0aef\u0af6\u0afb\u0b03",
    "\u0b07\u0b0c\u0b1d\u0b21\u0b2a\u0b2e\u0b30\u0b37\u0b3d\u0b40\u0b43\u0b4a",
    "\u0b50\u0b53\u0b57\u0b5a\u0b64\u0b68\u0b75\u0b7a\u0b85\u0b8a\u0b96\u0b9e",
    "\u0ba4\u0bac\u0bb1\u0bbc\u0bc4\u0bc9\u0bcc\u0bd3\u0bdb\u0bde\u0beb\u0bff",
    "\u0c09\u0c0c\u0c15\u0c18\u0c1a\u0c1d\u0c20\u0c32\u0c3b\u0c42\u0c49\u0c50",
    "\u0c5a\u0c5d\u0c62\u0c6a\u0c70\u0c75\u0c7a\u0c7e\u0c82\u0c86\u0c8a\u0c8e",
    "\u0c92\u0c96\u0c99\u0ca2"].join("");


const atn = new antlr4.atn.ATNDeserializer().deserialize(serializedATN);

const decisionsToDFA = atn.decisionToState.map( (ds, index) => new antlr4.dfa.DFA(ds, index) );

const sharedContextCache = new antlr4.PredictionContextCache();

class SqlBaseParser extends antlr4.Parser {

    static grammarFileName = "SqlBase.g4";
    static literalNames = [ null, "';'", "'('", "','", "')'", "'.'", "'/*+'", 
                            "'*/'", "'->'", "'['", "']'", "':'", null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            "'<=>'", "'<>'", "'!='", "'<'", null, "'>'", 
                            null, "'+'", "'-'", "'*'", "'/'", "'%'", "'~'", 
                            "'&'", "'|'", "'||'", "'^'" ];
    static symbolicNames = [ null, null, null, null, null, null, null, null, 
                             null, null, null, null, "ADD", "AFTER", "ALL", 
                             "ALTER", "ANALYZE", "AND", "ANTI", "ANY", "ARCHIVE", 
                             "ARRAY", "AS", "ASC", "AT", "AUTHORIZATION", 
                             "BETWEEN", "BOTH", "BUCKET", "BUCKETS", "BY", 
                             "CACHE", "CASCADE", "CASE", "CAST", "CHANGE", 
                             "CHECK", "CLEAR", "CLUSTER", "CLUSTERED", "CODEGEN", 
                             "COLLATE", "COLLECTION", "COLUMN", "COLUMNS", 
                             "COMMENT", "COMMIT", "COMPACT", "COMPACTIONS", 
                             "COMPUTE", "CONCATENATE", "CONSTRAINT", "COST", 
                             "CREATE", "CROSS", "CUBE", "CURRENT", "CURRENT_DATE", 
                             "CURRENT_TIME", "CURRENT_TIMESTAMP", "CURRENT_USER", 
                             "DATA", "DATABASE", "DATABASES", "DBPROPERTIES", 
                             "DEFINED", "DELETE", "DELIMITED", "DESC", "DESCRIBE", 
                             "DFS", "DIRECTORIES", "DIRECTORY", "DISTINCT", 
                             "DISTRIBUTE", "DIV", "DROP", "ELSE", "END", 
                             "ESCAPE", "ESCAPED", "EXCEPT", "EXCHANGE", 
                             "EXISTS", "EXPLAIN", "EXPORT", "EXTENDED", 
                             "EXTERNAL", "EXTRACT", "FALSE", "FETCH", "FIELDS", 
                             "FILTER", "FILEFORMAT", "FIRST", "FOLLOWING", 
                             "FOR", "FOREIGN", "FORMAT", "FORMATTED", "FROM", 
                             "FULL", "FUNCTION", "FUNCTIONS", "GLOBAL", 
                             "GRANT", "GROUP", "GROUPING", "HAVING", "IF", 
                             "IGNORE", "IMPORT", "IN", "INDEX", "INDEXES", 
                             "INNER", "INPATH", "INPUTFORMAT", "INSERT", 
                             "INTERSECT", "INTERVAL", "INTO", "IS", "ITEMS", 
                             "JOIN", "KEYS", "LAST", "LATERAL", "LAZY", 
                             "LEADING", "LEFT", "LIKE", "LIMIT", "LINES", 
                             "LIST", "LOAD", "LOCAL", "LOCATION", "LOCK", 
                             "LOCKS", "LOGICAL", "MACRO", "MAP", "MATCHED", 
                             "MERGE", "MSCK", "NAMESPACE", "NAMESPACES", 
                             "NATURAL", "NO", "NOT", "NULL", "NULLS", "OF", 
                             "ON", "ONLY", "OPTION", "OPTIONS", "OR", "ORDER", 
                             "OUT", "OUTER", "OUTPUTFORMAT", "OVER", "OVERLAPS", 
                             "OVERLAY", "OVERWRITE", "PARTITION", "PARTITIONED", 
                             "PARTITIONS", "PERCENTLIT", "PIVOT", "PLACING", 
                             "POSITION", "PRECEDING", "PRIMARY", "PRINCIPALS", 
                             "PROPERTIES", "PURGE", "QUERY", "RANGE", "RECORDREADER", 
                             "RECORDWRITER", "RECOVER", "REDUCE", "REFERENCES", 
                             "REFRESH", "RENAME", "REPAIR", "REPLACE", "RESET", 
                             "RESPECT", "RESTRICT", "REVOKE", "RIGHT", "RLIKE", 
                             "ROLE", "ROLES", "ROLLBACK", "ROLLUP", "ROW", 
                             "ROWS", "SCHEMA", "SELECT", "SEMI", "SEPARATED", 
                             "SERDE", "SERDEPROPERTIES", "SESSION_USER", 
                             "SET", "SETMINUS", "SETS", "SHOW", "SKEWED", 
                             "SOME", "SORT", "SORTED", "START", "STATISTICS", 
                             "STORED", "STRATIFY", "STRUCT", "SUBSTR", "SUBSTRING", 
                             "SYNC", "TABLE", "TABLES", "TABLESAMPLE", "TBLPROPERTIES", 
                             "TEMPORARY", "TERMINATED", "THEN", "TIME", 
                             "TO", "TOUCH", "TRAILING", "TRANSACTION", "TRANSACTIONS", 
                             "TRANSFORM", "TRIM", "TRUE", "TRUNCATE", "TRY_CAST", 
                             "TYPE", "UNARCHIVE", "UNBOUNDED", "UNCACHE", 
                             "UNION", "UNIQUE", "UNKNOWN", "UNLOCK", "UNSET", 
                             "UPDATE", "USE", "USER", "USING", "VALUES", 
                             "VIEW", "VIEWS", "WHEN", "WHERE", "WINDOW", 
                             "WITH", "ZONE", "KEY", "ENFORCED", "DEFERRABLE", 
                             "INITIALLY", "DEFERRED", "NORELY", "MATCH", 
                             "ACTION", "KW_GENERATED", "KW_ALWAYS", "KW_DEFAULT", 
                             "KW_IDENTITY", "KW_INCREMENT", "EQ", "NSEQ", 
                             "NEQ", "NEQJ", "LT", "LTE", "GT", "GTE", "PLUS", 
                             "MINUS", "ASTERISK", "SLASH", "PERCENT", "TILDE", 
                             "AMPERSAND", "PIPE", "CONCAT_PIPE", "HAT", 
                             "STRING", "BIGINT_LITERAL", "SMALLINT_LITERAL", 
                             "TINYINT_LITERAL", "INTEGER_VALUE", "EXPONENT_VALUE", 
                             "DECIMAL_VALUE", "FLOAT_LITERAL", "DOUBLE_LITERAL", 
                             "BIGDECIMAL_LITERAL", "IDENTIFIER", "BACKQUOTED_IDENTIFIER", 
                             "SIMPLE_COMMENT", "BRACKETED_COMMENT", "WS", 
                             "UNRECOGNIZED" ];
    static ruleNames = [ "singleStatement", "singleExpression", "singleTableIdentifier", 
                         "singleMultipartIdentifier", "singleFunctionIdentifier", 
                         "singleDataType", "singleTableSchema", "statement", 
                         "configKey", "configValue", "unsupportedHiveNativeCommands", 
                         "createTableHeader", "replaceTableHeader", "bucketSpec", 
                         "skewSpec", "locationSpec", "commentSpec", "query", 
                         "insertInto", "partitionSpecLocation", "partitionSpec", 
                         "partitionVal", "namespace", "describeFuncName", 
                         "describeColName", "ctes", "namedQuery", "tableProvider", 
                         "createTableClauses", "tableProperties", "tableOptions", 
                         "tablePropertyList", "tableProperty", "tablePropertyKey", 
                         "tablePropertyValue", "constantList", "nestedConstantList", 
                         "createFileFormat", "fileFormat", "storageHandler", 
                         "resource", "dmlStatementNoWith", "queryOrganization", 
                         "multiInsertQueryBody", "queryTerm", "queryPrimary", 
                         "sortItem", "fromStatement", "fromStatementBody", 
                         "querySpecification", "transformClause", "selectClause", 
                         "setClause", "matchedClause", "notMatchedClause", 
                         "matchedAction", "notMatchedAction", "assignmentList", 
                         "assignment", "whereClause", "havingClause", "hint", 
                         "hintStatement", "fromClause", "aggregationClause", 
                         "groupByClause", "groupingAnalytics", "groupingSet", 
                         "pivotClause", "pivotColumn", "pivotValue", "lateralView", 
                         "setQuantifier", "relation", "joinRelation", "joinType", 
                         "joinCriteria", "sample", "sampleMethod", "identifierList", 
                         "identifierSeq", "orderedIdentifierList", "orderedIdentifier", 
                         "identifierCommentList", "identifierComment", "relationPrimary", 
                         "inlineTable", "functionTable", "tableAlias", "rowFormat", 
                         "multipartIdentifierList", "multipartIdentifier", 
                         "tableIdentifier", "functionIdentifier", "namedExpression", 
                         "namedExpressionSeq", "partitionFieldList", "partitionField", 
                         "transform", "transformArgument", "expression", 
                         "booleanExpression", "predicate", "valueExpression", 
                         "primaryExpression", "constant", "comparisonOperator", 
                         "arithmeticOperator", "predicateOperator", "booleanValue", 
                         "interval", "errorCapturingMultiUnitsInterval", 
                         "multiUnitsInterval", "errorCapturingUnitToUnitInterval", 
                         "unitToUnitInterval", "intervalValue", "colPosition", 
                         "dataType", "qualifiedColTypeWithPositionList", 
                         "qualifiedColTypeWithPosition", "colTypeList", 
                         "colType", "tableConstraint", "primaryKeyConstraint", 
                         "foreignKeyConstraint", "tableConstraintName", 
                         "keyNameList", "foreignKeyOptions", "foreignKeyConstraintOptions", 
                         "constraintOptions", "columnConstraint", "columnConstraintType", 
                         "columnGeneratedAs", "generatedAsExpression", "generatedAsIdentity", 
                         "complexColTypeList", "complexColType", "whenClause", 
                         "windowClause", "namedWindow", "windowSpec", "windowFrame", 
                         "frameBound", "qualifiedNameList", "functionName", 
                         "qualifiedName", "errorCapturingIdentifier", "errorCapturingIdentifierExtra", 
                         "identifier", "strictIdentifier", "quotedIdentifier", 
                         "number", "alterColumnAction", "ansiNonReserved", 
                         "strictNonReserved", "nonReserved" ];

    constructor(input) {
        super(input);
        this._interp = new antlr4.atn.ParserATNSimulator(this, atn, decisionsToDFA, sharedContextCache);
        this.ruleNames = SqlBaseParser.ruleNames;
        this.literalNames = SqlBaseParser.literalNames;
        this.symbolicNames = SqlBaseParser.symbolicNames;
    }

    get atn() {
        return atn;
    }

    sempred(localctx, ruleIndex, predIndex) {
    	switch(ruleIndex) {
    	case 44:
    	    		return this.queryTerm_sempred(localctx, predIndex);
    	case 101:
    	    		return this.booleanExpression_sempred(localctx, predIndex);
    	case 103:
    	    		return this.valueExpression_sempred(localctx, predIndex);
    	case 104:
    	    		return this.primaryExpression_sempred(localctx, predIndex);
    	case 148:
    	    		return this.identifier_sempred(localctx, predIndex);
    	case 149:
    	    		return this.strictIdentifier_sempred(localctx, predIndex);
    	case 151:
    	    		return this.number_sempred(localctx, predIndex);
        default:
            throw "No predicate with index:" + ruleIndex;
       }
    }

    queryTerm_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 0:
    			return this.precpred(this._ctx, 3);
    		case 1:
    			return legacy_setops_precedence_enabled;
    		case 2:
    			return this.precpred(this._ctx, 2);
    		case 3:
    			return !legacy_setops_precedence_enabled;
    		case 4:
    			return this.precpred(this._ctx, 1);
    		case 5:
    			return !legacy_setops_precedence_enabled;
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    booleanExpression_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 6:
    			return this.precpred(this._ctx, 2);
    		case 7:
    			return this.precpred(this._ctx, 1);
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    valueExpression_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 8:
    			return this.precpred(this._ctx, 7);
    		case 9:
    			return this.precpred(this._ctx, 5);
    		case 10:
    			return this.precpred(this._ctx, 4);
    		case 11:
    			return this.precpred(this._ctx, 3);
    		case 12:
    			return this.precpred(this._ctx, 2);
    		case 13:
    			return this.precpred(this._ctx, 1);
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    primaryExpression_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 14:
    			return this.precpred(this._ctx, 8);
    		case 15:
    			return this.precpred(this._ctx, 6);
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    identifier_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 16:
    			return !SQL_standard_keyword_behavior;
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    strictIdentifier_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 17:
    			return SQL_standard_keyword_behavior;
    		case 18:
    			return !SQL_standard_keyword_behavior;
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    number_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 19:
    			return !legacy_exponent_literal_as_decimal_enabled;
    		case 20:
    			return !legacy_exponent_literal_as_decimal_enabled;
    		case 21:
    			return legacy_exponent_literal_as_decimal_enabled;
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };




	singleStatement() {
	    let localctx = new SingleStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 0, SqlBaseParser.RULE_singleStatement);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 312;
	        this.statement();
	        this.state = 316;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===SqlBaseParser.T__0) {
	            this.state = 313;
	            this.match(SqlBaseParser.T__0);
	            this.state = 318;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 319;
	        this.match(SqlBaseParser.EOF);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	singleExpression() {
	    let localctx = new SingleExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 2, SqlBaseParser.RULE_singleExpression);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 321;
	        this.namedExpression();
	        this.state = 322;
	        this.match(SqlBaseParser.EOF);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	singleTableIdentifier() {
	    let localctx = new SingleTableIdentifierContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 4, SqlBaseParser.RULE_singleTableIdentifier);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 324;
	        this.tableIdentifier();
	        this.state = 325;
	        this.match(SqlBaseParser.EOF);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	singleMultipartIdentifier() {
	    let localctx = new SingleMultipartIdentifierContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 6, SqlBaseParser.RULE_singleMultipartIdentifier);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 327;
	        this.multipartIdentifier();
	        this.state = 328;
	        this.match(SqlBaseParser.EOF);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	singleFunctionIdentifier() {
	    let localctx = new SingleFunctionIdentifierContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 8, SqlBaseParser.RULE_singleFunctionIdentifier);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 330;
	        this.functionIdentifier();
	        this.state = 331;
	        this.match(SqlBaseParser.EOF);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	singleDataType() {
	    let localctx = new SingleDataTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 10, SqlBaseParser.RULE_singleDataType);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 333;
	        this.dataType();
	        this.state = 334;
	        this.match(SqlBaseParser.EOF);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	singleTableSchema() {
	    let localctx = new SingleTableSchemaContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 12, SqlBaseParser.RULE_singleTableSchema);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 336;
	        this.colTypeList();
	        this.state = 337;
	        this.match(SqlBaseParser.EOF);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	statement() {
	    let localctx = new StatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 14, SqlBaseParser.RULE_statement);
	    var _la = 0; // Token type
	    try {
	        this.state = 1093;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,112,this._ctx);
	        switch(la_) {
	        case 1:
	            localctx = new StatementDefaultContext(this, localctx);
	            this.enterOuterAlt(localctx, 1);
	            this.state = 339;
	            this.query();
	            break;

	        case 2:
	            localctx = new DmlStatementContext(this, localctx);
	            this.enterOuterAlt(localctx, 2);
	            this.state = 341;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===SqlBaseParser.WITH) {
	                this.state = 340;
	                this.ctes();
	            }

	            this.state = 343;
	            this.dmlStatementNoWith();
	            break;

	        case 3:
	            localctx = new UseContext(this, localctx);
	            this.enterOuterAlt(localctx, 3);
	            this.state = 344;
	            this.match(SqlBaseParser.USE);
	            this.state = 346;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,2,this._ctx);
	            if(la_===1) {
	                this.state = 345;
	                this.match(SqlBaseParser.NAMESPACE);

	            }
	            this.state = 348;
	            this.multipartIdentifier();
	            break;

	        case 4:
	            localctx = new CreateNamespaceContext(this, localctx);
	            this.enterOuterAlt(localctx, 4);
	            this.state = 349;
	            this.match(SqlBaseParser.CREATE);
	            this.state = 350;
	            this.namespace();
	            this.state = 354;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,3,this._ctx);
	            if(la_===1) {
	                this.state = 351;
	                this.match(SqlBaseParser.IF);
	                this.state = 352;
	                this.match(SqlBaseParser.NOT);
	                this.state = 353;
	                this.match(SqlBaseParser.EXISTS);

	            }
	            this.state = 356;
	            this.multipartIdentifier();
	            this.state = 364;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===SqlBaseParser.COMMENT || _la===SqlBaseParser.LOCATION || _la===SqlBaseParser.WITH) {
	                this.state = 362;
	                this._errHandler.sync(this);
	                switch(this._input.LA(1)) {
	                case SqlBaseParser.COMMENT:
	                    this.state = 357;
	                    this.commentSpec();
	                    break;
	                case SqlBaseParser.LOCATION:
	                    this.state = 358;
	                    this.locationSpec();
	                    break;
	                case SqlBaseParser.WITH:
	                    this.state = 359;
	                    this.match(SqlBaseParser.WITH);
	                    this.state = 360;
	                    _la = this._input.LA(1);
	                    if(!(_la===SqlBaseParser.DBPROPERTIES || _la===SqlBaseParser.PROPERTIES)) {
	                    this._errHandler.recoverInline(this);
	                    }
	                    else {
	                    	this._errHandler.reportMatch(this);
	                        this.consume();
	                    }
	                    this.state = 361;
	                    this.tablePropertyList();
	                    break;
	                default:
	                    throw new antlr4.error.NoViableAltException(this);
	                }
	                this.state = 366;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            break;

	        case 5:
	            localctx = new SetNamespacePropertiesContext(this, localctx);
	            this.enterOuterAlt(localctx, 5);
	            this.state = 367;
	            this.match(SqlBaseParser.ALTER);
	            this.state = 368;
	            this.namespace();
	            this.state = 369;
	            this.multipartIdentifier();
	            this.state = 370;
	            this.match(SqlBaseParser.SET);
	            this.state = 371;
	            _la = this._input.LA(1);
	            if(!(_la===SqlBaseParser.DBPROPERTIES || _la===SqlBaseParser.PROPERTIES)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 372;
	            this.tablePropertyList();
	            break;

	        case 6:
	            localctx = new SetNamespaceLocationContext(this, localctx);
	            this.enterOuterAlt(localctx, 6);
	            this.state = 374;
	            this.match(SqlBaseParser.ALTER);
	            this.state = 375;
	            this.namespace();
	            this.state = 376;
	            this.multipartIdentifier();
	            this.state = 377;
	            this.match(SqlBaseParser.SET);
	            this.state = 378;
	            this.locationSpec();
	            break;

	        case 7:
	            localctx = new DropNamespaceContext(this, localctx);
	            this.enterOuterAlt(localctx, 7);
	            this.state = 380;
	            this.match(SqlBaseParser.DROP);
	            this.state = 381;
	            this.namespace();
	            this.state = 384;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,6,this._ctx);
	            if(la_===1) {
	                this.state = 382;
	                this.match(SqlBaseParser.IF);
	                this.state = 383;
	                this.match(SqlBaseParser.EXISTS);

	            }
	            this.state = 386;
	            this.multipartIdentifier();
	            this.state = 388;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===SqlBaseParser.CASCADE || _la===SqlBaseParser.RESTRICT) {
	                this.state = 387;
	                _la = this._input.LA(1);
	                if(!(_la===SqlBaseParser.CASCADE || _la===SqlBaseParser.RESTRICT)) {
	                this._errHandler.recoverInline(this);
	                }
	                else {
	                	this._errHandler.reportMatch(this);
	                    this.consume();
	                }
	            }

	            break;

	        case 8:
	            localctx = new ShowNamespacesContext(this, localctx);
	            this.enterOuterAlt(localctx, 8);
	            this.state = 390;
	            this.match(SqlBaseParser.SHOW);
	            this.state = 391;
	            _la = this._input.LA(1);
	            if(!(_la===SqlBaseParser.DATABASES || _la===SqlBaseParser.NAMESPACES)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 394;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===SqlBaseParser.FROM || _la===SqlBaseParser.IN) {
	                this.state = 392;
	                _la = this._input.LA(1);
	                if(!(_la===SqlBaseParser.FROM || _la===SqlBaseParser.IN)) {
	                this._errHandler.recoverInline(this);
	                }
	                else {
	                	this._errHandler.reportMatch(this);
	                    this.consume();
	                }
	                this.state = 393;
	                this.multipartIdentifier();
	            }

	            this.state = 400;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===SqlBaseParser.LIKE || _la===SqlBaseParser.STRING) {
	                this.state = 397;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===SqlBaseParser.LIKE) {
	                    this.state = 396;
	                    this.match(SqlBaseParser.LIKE);
	                }

	                this.state = 399;
	                localctx.pattern = this.match(SqlBaseParser.STRING);
	            }

	            break;

	        case 9:
	            localctx = new CreateTableContext(this, localctx);
	            this.enterOuterAlt(localctx, 9);
	            this.state = 402;
	            this.createTableHeader();
	            this.state = 414;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,12,this._ctx);
	            if(la_===1) {
	                this.state = 403;
	                this.match(SqlBaseParser.T__1);
	                this.state = 404;
	                this.colTypeList();
	                this.state = 409;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                while(_la===SqlBaseParser.T__2) {
	                    this.state = 405;
	                    this.match(SqlBaseParser.T__2);
	                    this.state = 406;
	                    this.tableConstraint();
	                    this.state = 411;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                }
	                this.state = 412;
	                this.match(SqlBaseParser.T__3);

	            }
	            this.state = 417;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===SqlBaseParser.USING) {
	                this.state = 416;
	                this.tableProvider();
	            }

	            this.state = 419;
	            this.createTableClauses();
	            this.state = 424;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===SqlBaseParser.T__1 || _la===SqlBaseParser.AS || _la===SqlBaseParser.FROM || _la===SqlBaseParser.MAP || _la===SqlBaseParser.REDUCE || _la===SqlBaseParser.SELECT || _la===SqlBaseParser.TABLE || _la===SqlBaseParser.VALUES || _la===SqlBaseParser.WITH) {
	                this.state = 421;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===SqlBaseParser.AS) {
	                    this.state = 420;
	                    this.match(SqlBaseParser.AS);
	                }

	                this.state = 423;
	                this.query();
	            }

	            break;

	        case 10:
	            localctx = new CreateTableLikeContext(this, localctx);
	            this.enterOuterAlt(localctx, 10);
	            this.state = 426;
	            this.match(SqlBaseParser.CREATE);
	            this.state = 427;
	            this.match(SqlBaseParser.TABLE);
	            this.state = 431;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,16,this._ctx);
	            if(la_===1) {
	                this.state = 428;
	                this.match(SqlBaseParser.IF);
	                this.state = 429;
	                this.match(SqlBaseParser.NOT);
	                this.state = 430;
	                this.match(SqlBaseParser.EXISTS);

	            }
	            this.state = 433;
	            localctx.target = this.tableIdentifier();
	            this.state = 434;
	            this.match(SqlBaseParser.LIKE);
	            this.state = 435;
	            localctx.source = this.tableIdentifier();
	            this.state = 444;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===SqlBaseParser.LOCATION || ((((_la - 200)) & ~0x1f) == 0 && ((1 << (_la - 200)) & ((1 << (SqlBaseParser.ROW - 200)) | (1 << (SqlBaseParser.STORED - 200)) | (1 << (SqlBaseParser.TBLPROPERTIES - 200)))) !== 0) || _la===SqlBaseParser.USING) {
	                this.state = 442;
	                this._errHandler.sync(this);
	                switch(this._input.LA(1)) {
	                case SqlBaseParser.USING:
	                    this.state = 436;
	                    this.tableProvider();
	                    break;
	                case SqlBaseParser.ROW:
	                    this.state = 437;
	                    this.rowFormat();
	                    break;
	                case SqlBaseParser.STORED:
	                    this.state = 438;
	                    this.createFileFormat();
	                    break;
	                case SqlBaseParser.LOCATION:
	                    this.state = 439;
	                    this.locationSpec();
	                    break;
	                case SqlBaseParser.TBLPROPERTIES:
	                    this.state = 440;
	                    this.match(SqlBaseParser.TBLPROPERTIES);
	                    this.state = 441;
	                    localctx.tableProps = this.tablePropertyList();
	                    break;
	                default:
	                    throw new antlr4.error.NoViableAltException(this);
	                }
	                this.state = 446;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            break;

	        case 11:
	            localctx = new ReplaceTableContext(this, localctx);
	            this.enterOuterAlt(localctx, 11);
	            this.state = 447;
	            this.replaceTableHeader();
	            this.state = 459;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,20,this._ctx);
	            if(la_===1) {
	                this.state = 448;
	                this.match(SqlBaseParser.T__1);
	                this.state = 449;
	                this.colTypeList();
	                this.state = 454;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                while(_la===SqlBaseParser.T__2) {
	                    this.state = 450;
	                    this.match(SqlBaseParser.T__2);
	                    this.state = 451;
	                    this.tableConstraint();
	                    this.state = 456;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                }
	                this.state = 457;
	                this.match(SqlBaseParser.T__3);

	            }
	            this.state = 462;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===SqlBaseParser.USING) {
	                this.state = 461;
	                this.tableProvider();
	            }

	            this.state = 464;
	            this.createTableClauses();
	            this.state = 469;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===SqlBaseParser.T__1 || _la===SqlBaseParser.AS || _la===SqlBaseParser.FROM || _la===SqlBaseParser.MAP || _la===SqlBaseParser.REDUCE || _la===SqlBaseParser.SELECT || _la===SqlBaseParser.TABLE || _la===SqlBaseParser.VALUES || _la===SqlBaseParser.WITH) {
	                this.state = 466;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===SqlBaseParser.AS) {
	                    this.state = 465;
	                    this.match(SqlBaseParser.AS);
	                }

	                this.state = 468;
	                this.query();
	            }

	            break;

	        case 12:
	            localctx = new AnalyzeContext(this, localctx);
	            this.enterOuterAlt(localctx, 12);
	            this.state = 471;
	            this.match(SqlBaseParser.ANALYZE);
	            this.state = 472;
	            this.match(SqlBaseParser.TABLE);
	            this.state = 473;
	            this.multipartIdentifier();
	            this.state = 475;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===SqlBaseParser.PARTITION) {
	                this.state = 474;
	                this.partitionSpec();
	            }

	            this.state = 477;
	            this.match(SqlBaseParser.COMPUTE);
	            this.state = 478;
	            this.match(SqlBaseParser.STATISTICS);
	            this.state = 486;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,25,this._ctx);
	            if(la_===1) {
	                this.state = 479;
	                this.identifier();

	            } else if(la_===2) {
	                this.state = 480;
	                this.match(SqlBaseParser.FOR);
	                this.state = 481;
	                this.match(SqlBaseParser.COLUMNS);
	                this.state = 482;
	                this.identifierSeq();

	            } else if(la_===3) {
	                this.state = 483;
	                this.match(SqlBaseParser.FOR);
	                this.state = 484;
	                this.match(SqlBaseParser.ALL);
	                this.state = 485;
	                this.match(SqlBaseParser.COLUMNS);

	            }
	            break;

	        case 13:
	            localctx = new AnalyzeTablesContext(this, localctx);
	            this.enterOuterAlt(localctx, 13);
	            this.state = 488;
	            this.match(SqlBaseParser.ANALYZE);
	            this.state = 489;
	            this.match(SqlBaseParser.TABLES);
	            this.state = 492;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===SqlBaseParser.FROM || _la===SqlBaseParser.IN) {
	                this.state = 490;
	                _la = this._input.LA(1);
	                if(!(_la===SqlBaseParser.FROM || _la===SqlBaseParser.IN)) {
	                this._errHandler.recoverInline(this);
	                }
	                else {
	                	this._errHandler.reportMatch(this);
	                    this.consume();
	                }
	                this.state = 491;
	                this.multipartIdentifier();
	            }

	            this.state = 494;
	            this.match(SqlBaseParser.COMPUTE);
	            this.state = 495;
	            this.match(SqlBaseParser.STATISTICS);
	            this.state = 497;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,27,this._ctx);
	            if(la_===1) {
	                this.state = 496;
	                this.identifier();

	            }
	            break;

	        case 14:
	            localctx = new AddTableColumnsContext(this, localctx);
	            this.enterOuterAlt(localctx, 14);
	            this.state = 499;
	            this.match(SqlBaseParser.ALTER);
	            this.state = 500;
	            this.match(SqlBaseParser.TABLE);
	            this.state = 501;
	            this.multipartIdentifier();
	            this.state = 502;
	            this.match(SqlBaseParser.ADD);
	            this.state = 503;
	            _la = this._input.LA(1);
	            if(!(_la===SqlBaseParser.COLUMN || _la===SqlBaseParser.COLUMNS)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 504;
	            localctx.columns = this.qualifiedColTypeWithPositionList();
	            break;

	        case 15:
	            localctx = new AddTableColumnsContext(this, localctx);
	            this.enterOuterAlt(localctx, 15);
	            this.state = 506;
	            this.match(SqlBaseParser.ALTER);
	            this.state = 507;
	            this.match(SqlBaseParser.TABLE);
	            this.state = 508;
	            this.multipartIdentifier();
	            this.state = 509;
	            this.match(SqlBaseParser.ADD);
	            this.state = 510;
	            _la = this._input.LA(1);
	            if(!(_la===SqlBaseParser.COLUMN || _la===SqlBaseParser.COLUMNS)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 511;
	            this.match(SqlBaseParser.T__1);
	            this.state = 512;
	            localctx.columns = this.qualifiedColTypeWithPositionList();
	            this.state = 513;
	            this.match(SqlBaseParser.T__3);
	            break;

	        case 16:
	            localctx = new RenameTableColumnContext(this, localctx);
	            this.enterOuterAlt(localctx, 16);
	            this.state = 515;
	            this.match(SqlBaseParser.ALTER);
	            this.state = 516;
	            this.match(SqlBaseParser.TABLE);
	            this.state = 517;
	            localctx.table = this.multipartIdentifier();
	            this.state = 518;
	            this.match(SqlBaseParser.RENAME);
	            this.state = 519;
	            this.match(SqlBaseParser.COLUMN);
	            this.state = 520;
	            localctx.from = this.multipartIdentifier();
	            this.state = 521;
	            this.match(SqlBaseParser.TO);
	            this.state = 522;
	            localctx.to = this.errorCapturingIdentifier();
	            break;

	        case 17:
	            localctx = new DropTableColumnsContext(this, localctx);
	            this.enterOuterAlt(localctx, 17);
	            this.state = 524;
	            this.match(SqlBaseParser.ALTER);
	            this.state = 525;
	            this.match(SqlBaseParser.TABLE);
	            this.state = 526;
	            this.multipartIdentifier();
	            this.state = 527;
	            this.match(SqlBaseParser.DROP);
	            this.state = 528;
	            _la = this._input.LA(1);
	            if(!(_la===SqlBaseParser.COLUMN || _la===SqlBaseParser.COLUMNS)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 529;
	            this.match(SqlBaseParser.T__1);
	            this.state = 530;
	            localctx.columns = this.multipartIdentifierList();
	            this.state = 531;
	            this.match(SqlBaseParser.T__3);
	            break;

	        case 18:
	            localctx = new DropTableColumnsContext(this, localctx);
	            this.enterOuterAlt(localctx, 18);
	            this.state = 533;
	            this.match(SqlBaseParser.ALTER);
	            this.state = 534;
	            this.match(SqlBaseParser.TABLE);
	            this.state = 535;
	            this.multipartIdentifier();
	            this.state = 536;
	            this.match(SqlBaseParser.DROP);
	            this.state = 537;
	            _la = this._input.LA(1);
	            if(!(_la===SqlBaseParser.COLUMN || _la===SqlBaseParser.COLUMNS)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 538;
	            localctx.columns = this.multipartIdentifierList();
	            break;

	        case 19:
	            localctx = new RenameTableContext(this, localctx);
	            this.enterOuterAlt(localctx, 19);
	            this.state = 540;
	            this.match(SqlBaseParser.ALTER);
	            this.state = 541;
	            _la = this._input.LA(1);
	            if(!(_la===SqlBaseParser.TABLE || _la===SqlBaseParser.VIEW)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 542;
	            localctx.from = this.multipartIdentifier();
	            this.state = 543;
	            this.match(SqlBaseParser.RENAME);
	            this.state = 544;
	            this.match(SqlBaseParser.TO);
	            this.state = 545;
	            localctx.to = this.multipartIdentifier();
	            break;

	        case 20:
	            localctx = new SetTablePropertiesContext(this, localctx);
	            this.enterOuterAlt(localctx, 20);
	            this.state = 547;
	            this.match(SqlBaseParser.ALTER);
	            this.state = 548;
	            _la = this._input.LA(1);
	            if(!(_la===SqlBaseParser.TABLE || _la===SqlBaseParser.VIEW)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 549;
	            this.multipartIdentifier();
	            this.state = 550;
	            this.match(SqlBaseParser.SET);
	            this.state = 551;
	            this.match(SqlBaseParser.TBLPROPERTIES);
	            this.state = 552;
	            this.tablePropertyList();
	            break;

	        case 21:
	            localctx = new UnsetTablePropertiesContext(this, localctx);
	            this.enterOuterAlt(localctx, 21);
	            this.state = 554;
	            this.match(SqlBaseParser.ALTER);
	            this.state = 555;
	            _la = this._input.LA(1);
	            if(!(_la===SqlBaseParser.TABLE || _la===SqlBaseParser.VIEW)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 556;
	            this.multipartIdentifier();
	            this.state = 557;
	            this.match(SqlBaseParser.UNSET);
	            this.state = 558;
	            this.match(SqlBaseParser.TBLPROPERTIES);
	            this.state = 561;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===SqlBaseParser.IF) {
	                this.state = 559;
	                this.match(SqlBaseParser.IF);
	                this.state = 560;
	                this.match(SqlBaseParser.EXISTS);
	            }

	            this.state = 563;
	            this.tablePropertyList();
	            break;

	        case 22:
	            localctx = new AlterTableAlterColumnContext(this, localctx);
	            this.enterOuterAlt(localctx, 22);
	            this.state = 565;
	            this.match(SqlBaseParser.ALTER);
	            this.state = 566;
	            this.match(SqlBaseParser.TABLE);
	            this.state = 567;
	            localctx.table = this.multipartIdentifier();
	            this.state = 568;
	            _la = this._input.LA(1);
	            if(!(_la===SqlBaseParser.ALTER || _la===SqlBaseParser.CHANGE)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 570;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,29,this._ctx);
	            if(la_===1) {
	                this.state = 569;
	                this.match(SqlBaseParser.COLUMN);

	            }
	            this.state = 572;
	            localctx.column = this.multipartIdentifier();
	            this.state = 574;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===SqlBaseParser.AFTER || _la===SqlBaseParser.COMMENT || _la===SqlBaseParser.DROP || _la===SqlBaseParser.FIRST || _la===SqlBaseParser.SET || _la===SqlBaseParser.TYPE) {
	                this.state = 573;
	                this.alterColumnAction();
	            }

	            break;

	        case 23:
	            localctx = new HiveChangeColumnContext(this, localctx);
	            this.enterOuterAlt(localctx, 23);
	            this.state = 576;
	            this.match(SqlBaseParser.ALTER);
	            this.state = 577;
	            this.match(SqlBaseParser.TABLE);
	            this.state = 578;
	            localctx.table = this.multipartIdentifier();
	            this.state = 580;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===SqlBaseParser.PARTITION) {
	                this.state = 579;
	                this.partitionSpec();
	            }

	            this.state = 582;
	            this.match(SqlBaseParser.CHANGE);
	            this.state = 584;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,32,this._ctx);
	            if(la_===1) {
	                this.state = 583;
	                this.match(SqlBaseParser.COLUMN);

	            }
	            this.state = 586;
	            localctx.colName = this.multipartIdentifier();
	            this.state = 587;
	            this.colType();
	            this.state = 589;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===SqlBaseParser.AFTER || _la===SqlBaseParser.FIRST) {
	                this.state = 588;
	                this.colPosition();
	            }

	            break;

	        case 24:
	            localctx = new HiveReplaceColumnsContext(this, localctx);
	            this.enterOuterAlt(localctx, 24);
	            this.state = 591;
	            this.match(SqlBaseParser.ALTER);
	            this.state = 592;
	            this.match(SqlBaseParser.TABLE);
	            this.state = 593;
	            localctx.table = this.multipartIdentifier();
	            this.state = 595;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===SqlBaseParser.PARTITION) {
	                this.state = 594;
	                this.partitionSpec();
	            }

	            this.state = 597;
	            this.match(SqlBaseParser.REPLACE);
	            this.state = 598;
	            this.match(SqlBaseParser.COLUMNS);
	            this.state = 599;
	            this.match(SqlBaseParser.T__1);
	            this.state = 600;
	            localctx.columns = this.qualifiedColTypeWithPositionList();
	            this.state = 601;
	            this.match(SqlBaseParser.T__3);
	            break;

	        case 25:
	            localctx = new SetTableSerDeContext(this, localctx);
	            this.enterOuterAlt(localctx, 25);
	            this.state = 603;
	            this.match(SqlBaseParser.ALTER);
	            this.state = 604;
	            this.match(SqlBaseParser.TABLE);
	            this.state = 605;
	            this.multipartIdentifier();
	            this.state = 607;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===SqlBaseParser.PARTITION) {
	                this.state = 606;
	                this.partitionSpec();
	            }

	            this.state = 609;
	            this.match(SqlBaseParser.SET);
	            this.state = 610;
	            this.match(SqlBaseParser.SERDE);
	            this.state = 611;
	            this.match(SqlBaseParser.STRING);
	            this.state = 615;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===SqlBaseParser.WITH) {
	                this.state = 612;
	                this.match(SqlBaseParser.WITH);
	                this.state = 613;
	                this.match(SqlBaseParser.SERDEPROPERTIES);
	                this.state = 614;
	                this.tablePropertyList();
	            }

	            break;

	        case 26:
	            localctx = new SetTableSerDeContext(this, localctx);
	            this.enterOuterAlt(localctx, 26);
	            this.state = 617;
	            this.match(SqlBaseParser.ALTER);
	            this.state = 618;
	            this.match(SqlBaseParser.TABLE);
	            this.state = 619;
	            this.multipartIdentifier();
	            this.state = 621;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===SqlBaseParser.PARTITION) {
	                this.state = 620;
	                this.partitionSpec();
	            }

	            this.state = 623;
	            this.match(SqlBaseParser.SET);
	            this.state = 624;
	            this.match(SqlBaseParser.SERDEPROPERTIES);
	            this.state = 625;
	            this.tablePropertyList();
	            break;

	        case 27:
	            localctx = new AddTablePartitionContext(this, localctx);
	            this.enterOuterAlt(localctx, 27);
	            this.state = 627;
	            this.match(SqlBaseParser.ALTER);
	            this.state = 628;
	            _la = this._input.LA(1);
	            if(!(_la===SqlBaseParser.TABLE || _la===SqlBaseParser.VIEW)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 629;
	            this.multipartIdentifier();
	            this.state = 630;
	            this.match(SqlBaseParser.ADD);
	            this.state = 634;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===SqlBaseParser.IF) {
	                this.state = 631;
	                this.match(SqlBaseParser.IF);
	                this.state = 632;
	                this.match(SqlBaseParser.NOT);
	                this.state = 633;
	                this.match(SqlBaseParser.EXISTS);
	            }

	            this.state = 637; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            do {
	                this.state = 636;
	                this.partitionSpecLocation();
	                this.state = 639; 
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            } while(_la===SqlBaseParser.PARTITION);
	            break;

	        case 28:
	            localctx = new RenameTablePartitionContext(this, localctx);
	            this.enterOuterAlt(localctx, 28);
	            this.state = 641;
	            this.match(SqlBaseParser.ALTER);
	            this.state = 642;
	            this.match(SqlBaseParser.TABLE);
	            this.state = 643;
	            this.multipartIdentifier();
	            this.state = 644;
	            localctx.from = this.partitionSpec();
	            this.state = 645;
	            this.match(SqlBaseParser.RENAME);
	            this.state = 646;
	            this.match(SqlBaseParser.TO);
	            this.state = 647;
	            localctx.to = this.partitionSpec();
	            break;

	        case 29:
	            localctx = new DropTablePartitionsContext(this, localctx);
	            this.enterOuterAlt(localctx, 29);
	            this.state = 649;
	            this.match(SqlBaseParser.ALTER);
	            this.state = 650;
	            _la = this._input.LA(1);
	            if(!(_la===SqlBaseParser.TABLE || _la===SqlBaseParser.VIEW)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 651;
	            this.multipartIdentifier();
	            this.state = 652;
	            this.match(SqlBaseParser.DROP);
	            this.state = 655;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===SqlBaseParser.IF) {
	                this.state = 653;
	                this.match(SqlBaseParser.IF);
	                this.state = 654;
	                this.match(SqlBaseParser.EXISTS);
	            }

	            this.state = 657;
	            this.partitionSpec();
	            this.state = 662;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===SqlBaseParser.T__2) {
	                this.state = 658;
	                this.match(SqlBaseParser.T__2);
	                this.state = 659;
	                this.partitionSpec();
	                this.state = 664;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 666;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===SqlBaseParser.PURGE) {
	                this.state = 665;
	                this.match(SqlBaseParser.PURGE);
	            }

	            break;

	        case 30:
	            localctx = new SetTableLocationContext(this, localctx);
	            this.enterOuterAlt(localctx, 30);
	            this.state = 668;
	            this.match(SqlBaseParser.ALTER);
	            this.state = 669;
	            this.match(SqlBaseParser.TABLE);
	            this.state = 670;
	            this.multipartIdentifier();
	            this.state = 672;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===SqlBaseParser.PARTITION) {
	                this.state = 671;
	                this.partitionSpec();
	            }

	            this.state = 674;
	            this.match(SqlBaseParser.SET);
	            this.state = 675;
	            this.locationSpec();
	            break;

	        case 31:
	            localctx = new RecoverPartitionsContext(this, localctx);
	            this.enterOuterAlt(localctx, 31);
	            this.state = 677;
	            this.match(SqlBaseParser.ALTER);
	            this.state = 678;
	            this.match(SqlBaseParser.TABLE);
	            this.state = 679;
	            this.multipartIdentifier();
	            this.state = 680;
	            this.match(SqlBaseParser.RECOVER);
	            this.state = 681;
	            this.match(SqlBaseParser.PARTITIONS);
	            break;

	        case 32:
	            localctx = new DropTableContext(this, localctx);
	            this.enterOuterAlt(localctx, 32);
	            this.state = 683;
	            this.match(SqlBaseParser.DROP);
	            this.state = 684;
	            this.match(SqlBaseParser.TABLE);
	            this.state = 687;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,44,this._ctx);
	            if(la_===1) {
	                this.state = 685;
	                this.match(SqlBaseParser.IF);
	                this.state = 686;
	                this.match(SqlBaseParser.EXISTS);

	            }
	            this.state = 689;
	            this.multipartIdentifier();
	            this.state = 691;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===SqlBaseParser.PURGE) {
	                this.state = 690;
	                this.match(SqlBaseParser.PURGE);
	            }

	            break;

	        case 33:
	            localctx = new DropViewContext(this, localctx);
	            this.enterOuterAlt(localctx, 33);
	            this.state = 693;
	            this.match(SqlBaseParser.DROP);
	            this.state = 694;
	            this.match(SqlBaseParser.VIEW);
	            this.state = 697;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,46,this._ctx);
	            if(la_===1) {
	                this.state = 695;
	                this.match(SqlBaseParser.IF);
	                this.state = 696;
	                this.match(SqlBaseParser.EXISTS);

	            }
	            this.state = 699;
	            this.multipartIdentifier();
	            break;

	        case 34:
	            localctx = new CreateViewContext(this, localctx);
	            this.enterOuterAlt(localctx, 34);
	            this.state = 700;
	            this.match(SqlBaseParser.CREATE);
	            this.state = 703;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===SqlBaseParser.OR) {
	                this.state = 701;
	                this.match(SqlBaseParser.OR);
	                this.state = 702;
	                this.match(SqlBaseParser.REPLACE);
	            }

	            this.state = 709;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===SqlBaseParser.GLOBAL || _la===SqlBaseParser.TEMPORARY) {
	                this.state = 706;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===SqlBaseParser.GLOBAL) {
	                    this.state = 705;
	                    this.match(SqlBaseParser.GLOBAL);
	                }

	                this.state = 708;
	                this.match(SqlBaseParser.TEMPORARY);
	            }

	            this.state = 711;
	            this.match(SqlBaseParser.VIEW);
	            this.state = 715;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,50,this._ctx);
	            if(la_===1) {
	                this.state = 712;
	                this.match(SqlBaseParser.IF);
	                this.state = 713;
	                this.match(SqlBaseParser.NOT);
	                this.state = 714;
	                this.match(SqlBaseParser.EXISTS);

	            }
	            this.state = 717;
	            this.multipartIdentifier();
	            this.state = 719;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===SqlBaseParser.T__1) {
	                this.state = 718;
	                this.identifierCommentList();
	            }

	            this.state = 729;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===SqlBaseParser.COMMENT || _la===SqlBaseParser.PARTITIONED || _la===SqlBaseParser.TBLPROPERTIES) {
	                this.state = 727;
	                this._errHandler.sync(this);
	                switch(this._input.LA(1)) {
	                case SqlBaseParser.COMMENT:
	                    this.state = 721;
	                    this.commentSpec();
	                    break;
	                case SqlBaseParser.PARTITIONED:
	                    this.state = 722;
	                    this.match(SqlBaseParser.PARTITIONED);
	                    this.state = 723;
	                    this.match(SqlBaseParser.ON);
	                    this.state = 724;
	                    this.identifierList();
	                    break;
	                case SqlBaseParser.TBLPROPERTIES:
	                    this.state = 725;
	                    this.match(SqlBaseParser.TBLPROPERTIES);
	                    this.state = 726;
	                    this.tablePropertyList();
	                    break;
	                default:
	                    throw new antlr4.error.NoViableAltException(this);
	                }
	                this.state = 731;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 732;
	            this.match(SqlBaseParser.AS);
	            this.state = 733;
	            localctx.selectStmt = this.query();
	            break;

	        case 35:
	            localctx = new CreateTempViewUsingContext(this, localctx);
	            this.enterOuterAlt(localctx, 35);
	            this.state = 735;
	            this.match(SqlBaseParser.CREATE);
	            this.state = 738;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===SqlBaseParser.OR) {
	                this.state = 736;
	                this.match(SqlBaseParser.OR);
	                this.state = 737;
	                this.match(SqlBaseParser.REPLACE);
	            }

	            this.state = 741;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===SqlBaseParser.GLOBAL) {
	                this.state = 740;
	                this.match(SqlBaseParser.GLOBAL);
	            }

	            this.state = 743;
	            this.match(SqlBaseParser.TEMPORARY);
	            this.state = 744;
	            this.match(SqlBaseParser.VIEW);
	            this.state = 745;
	            this.tableIdentifier();
	            this.state = 750;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===SqlBaseParser.T__1) {
	                this.state = 746;
	                this.match(SqlBaseParser.T__1);
	                this.state = 747;
	                this.colTypeList();
	                this.state = 748;
	                this.match(SqlBaseParser.T__3);
	            }

	            this.state = 752;
	            this.tableProvider();
	            this.state = 755;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===SqlBaseParser.OPTIONS) {
	                this.state = 753;
	                this.match(SqlBaseParser.OPTIONS);
	                this.state = 754;
	                this.tablePropertyList();
	            }

	            break;

	        case 36:
	            localctx = new AlterViewQueryContext(this, localctx);
	            this.enterOuterAlt(localctx, 36);
	            this.state = 757;
	            this.match(SqlBaseParser.ALTER);
	            this.state = 758;
	            this.match(SqlBaseParser.VIEW);
	            this.state = 759;
	            this.multipartIdentifier();
	            this.state = 761;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===SqlBaseParser.AS) {
	                this.state = 760;
	                this.match(SqlBaseParser.AS);
	            }

	            this.state = 763;
	            this.query();
	            break;

	        case 37:
	            localctx = new CreateFunctionContext(this, localctx);
	            this.enterOuterAlt(localctx, 37);
	            this.state = 765;
	            this.match(SqlBaseParser.CREATE);
	            this.state = 768;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===SqlBaseParser.OR) {
	                this.state = 766;
	                this.match(SqlBaseParser.OR);
	                this.state = 767;
	                this.match(SqlBaseParser.REPLACE);
	            }

	            this.state = 771;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===SqlBaseParser.TEMPORARY) {
	                this.state = 770;
	                this.match(SqlBaseParser.TEMPORARY);
	            }

	            this.state = 773;
	            this.match(SqlBaseParser.FUNCTION);
	            this.state = 777;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,61,this._ctx);
	            if(la_===1) {
	                this.state = 774;
	                this.match(SqlBaseParser.IF);
	                this.state = 775;
	                this.match(SqlBaseParser.NOT);
	                this.state = 776;
	                this.match(SqlBaseParser.EXISTS);

	            }
	            this.state = 779;
	            this.multipartIdentifier();
	            this.state = 780;
	            this.match(SqlBaseParser.AS);
	            this.state = 781;
	            localctx.className = this.match(SqlBaseParser.STRING);
	            this.state = 791;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===SqlBaseParser.USING) {
	                this.state = 782;
	                this.match(SqlBaseParser.USING);
	                this.state = 783;
	                this.resource();
	                this.state = 788;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                while(_la===SqlBaseParser.T__2) {
	                    this.state = 784;
	                    this.match(SqlBaseParser.T__2);
	                    this.state = 785;
	                    this.resource();
	                    this.state = 790;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                }
	            }

	            break;

	        case 38:
	            localctx = new DropFunctionContext(this, localctx);
	            this.enterOuterAlt(localctx, 38);
	            this.state = 793;
	            this.match(SqlBaseParser.DROP);
	            this.state = 795;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===SqlBaseParser.TEMPORARY) {
	                this.state = 794;
	                this.match(SqlBaseParser.TEMPORARY);
	            }

	            this.state = 797;
	            this.match(SqlBaseParser.FUNCTION);
	            this.state = 800;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,65,this._ctx);
	            if(la_===1) {
	                this.state = 798;
	                this.match(SqlBaseParser.IF);
	                this.state = 799;
	                this.match(SqlBaseParser.EXISTS);

	            }
	            this.state = 802;
	            this.multipartIdentifier();
	            break;

	        case 39:
	            localctx = new ExplainContext(this, localctx);
	            this.enterOuterAlt(localctx, 39);
	            this.state = 803;
	            this.match(SqlBaseParser.EXPLAIN);
	            this.state = 805;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===SqlBaseParser.CODEGEN || _la===SqlBaseParser.COST || _la===SqlBaseParser.EXTENDED || _la===SqlBaseParser.FORMATTED || _la===SqlBaseParser.LOGICAL) {
	                this.state = 804;
	                _la = this._input.LA(1);
	                if(!(_la===SqlBaseParser.CODEGEN || _la===SqlBaseParser.COST || _la===SqlBaseParser.EXTENDED || _la===SqlBaseParser.FORMATTED || _la===SqlBaseParser.LOGICAL)) {
	                this._errHandler.recoverInline(this);
	                }
	                else {
	                	this._errHandler.reportMatch(this);
	                    this.consume();
	                }
	            }

	            this.state = 807;
	            this.statement();
	            break;

	        case 40:
	            localctx = new ShowTablesContext(this, localctx);
	            this.enterOuterAlt(localctx, 40);
	            this.state = 808;
	            this.match(SqlBaseParser.SHOW);
	            this.state = 809;
	            this.match(SqlBaseParser.TABLES);
	            this.state = 812;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===SqlBaseParser.FROM || _la===SqlBaseParser.IN) {
	                this.state = 810;
	                _la = this._input.LA(1);
	                if(!(_la===SqlBaseParser.FROM || _la===SqlBaseParser.IN)) {
	                this._errHandler.recoverInline(this);
	                }
	                else {
	                	this._errHandler.reportMatch(this);
	                    this.consume();
	                }
	                this.state = 811;
	                this.multipartIdentifier();
	            }

	            this.state = 818;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===SqlBaseParser.LIKE || _la===SqlBaseParser.STRING) {
	                this.state = 815;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===SqlBaseParser.LIKE) {
	                    this.state = 814;
	                    this.match(SqlBaseParser.LIKE);
	                }

	                this.state = 817;
	                localctx.pattern = this.match(SqlBaseParser.STRING);
	            }

	            break;

	        case 41:
	            localctx = new ShowTableExtendedContext(this, localctx);
	            this.enterOuterAlt(localctx, 41);
	            this.state = 820;
	            this.match(SqlBaseParser.SHOW);
	            this.state = 821;
	            this.match(SqlBaseParser.TABLE);
	            this.state = 822;
	            this.match(SqlBaseParser.EXTENDED);
	            this.state = 825;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===SqlBaseParser.FROM || _la===SqlBaseParser.IN) {
	                this.state = 823;
	                _la = this._input.LA(1);
	                if(!(_la===SqlBaseParser.FROM || _la===SqlBaseParser.IN)) {
	                this._errHandler.recoverInline(this);
	                }
	                else {
	                	this._errHandler.reportMatch(this);
	                    this.consume();
	                }
	                this.state = 824;
	                localctx.ns = this.multipartIdentifier();
	            }

	            this.state = 827;
	            this.match(SqlBaseParser.LIKE);
	            this.state = 828;
	            localctx.pattern = this.match(SqlBaseParser.STRING);
	            this.state = 830;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===SqlBaseParser.PARTITION) {
	                this.state = 829;
	                this.partitionSpec();
	            }

	            break;

	        case 42:
	            localctx = new ShowTblPropertiesContext(this, localctx);
	            this.enterOuterAlt(localctx, 42);
	            this.state = 832;
	            this.match(SqlBaseParser.SHOW);
	            this.state = 833;
	            this.match(SqlBaseParser.TBLPROPERTIES);
	            this.state = 834;
	            localctx.table = this.multipartIdentifier();
	            this.state = 839;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===SqlBaseParser.T__1) {
	                this.state = 835;
	                this.match(SqlBaseParser.T__1);
	                this.state = 836;
	                localctx.key = this.tablePropertyKey();
	                this.state = 837;
	                this.match(SqlBaseParser.T__3);
	            }

	            break;

	        case 43:
	            localctx = new ShowColumnsContext(this, localctx);
	            this.enterOuterAlt(localctx, 43);
	            this.state = 841;
	            this.match(SqlBaseParser.SHOW);
	            this.state = 842;
	            this.match(SqlBaseParser.COLUMNS);
	            this.state = 843;
	            _la = this._input.LA(1);
	            if(!(_la===SqlBaseParser.FROM || _la===SqlBaseParser.IN)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 844;
	            localctx.table = this.multipartIdentifier();
	            this.state = 847;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===SqlBaseParser.FROM || _la===SqlBaseParser.IN) {
	                this.state = 845;
	                _la = this._input.LA(1);
	                if(!(_la===SqlBaseParser.FROM || _la===SqlBaseParser.IN)) {
	                this._errHandler.recoverInline(this);
	                }
	                else {
	                	this._errHandler.reportMatch(this);
	                    this.consume();
	                }
	                this.state = 846;
	                localctx.ns = this.multipartIdentifier();
	            }

	            break;

	        case 44:
	            localctx = new ShowViewsContext(this, localctx);
	            this.enterOuterAlt(localctx, 44);
	            this.state = 849;
	            this.match(SqlBaseParser.SHOW);
	            this.state = 850;
	            this.match(SqlBaseParser.VIEWS);
	            this.state = 853;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===SqlBaseParser.FROM || _la===SqlBaseParser.IN) {
	                this.state = 851;
	                _la = this._input.LA(1);
	                if(!(_la===SqlBaseParser.FROM || _la===SqlBaseParser.IN)) {
	                this._errHandler.recoverInline(this);
	                }
	                else {
	                	this._errHandler.reportMatch(this);
	                    this.consume();
	                }
	                this.state = 852;
	                this.multipartIdentifier();
	            }

	            this.state = 859;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===SqlBaseParser.LIKE || _la===SqlBaseParser.STRING) {
	                this.state = 856;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===SqlBaseParser.LIKE) {
	                    this.state = 855;
	                    this.match(SqlBaseParser.LIKE);
	                }

	                this.state = 858;
	                localctx.pattern = this.match(SqlBaseParser.STRING);
	            }

	            break;

	        case 45:
	            localctx = new ShowPartitionsContext(this, localctx);
	            this.enterOuterAlt(localctx, 45);
	            this.state = 861;
	            this.match(SqlBaseParser.SHOW);
	            this.state = 862;
	            this.match(SqlBaseParser.PARTITIONS);
	            this.state = 863;
	            this.multipartIdentifier();
	            this.state = 865;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===SqlBaseParser.PARTITION) {
	                this.state = 864;
	                this.partitionSpec();
	            }

	            break;

	        case 46:
	            localctx = new ShowFunctionsContext(this, localctx);
	            this.enterOuterAlt(localctx, 46);
	            this.state = 867;
	            this.match(SqlBaseParser.SHOW);
	            this.state = 869;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,78,this._ctx);
	            if(la_===1) {
	                this.state = 868;
	                this.identifier();

	            }
	            this.state = 871;
	            this.match(SqlBaseParser.FUNCTIONS);
	            this.state = 879;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,81,this._ctx);
	            if(la_===1) {
	                this.state = 873;
	                this._errHandler.sync(this);
	                var la_ = this._interp.adaptivePredict(this._input,79,this._ctx);
	                if(la_===1) {
	                    this.state = 872;
	                    this.match(SqlBaseParser.LIKE);

	                }
	                this.state = 877;
	                this._errHandler.sync(this);
	                var la_ = this._interp.adaptivePredict(this._input,80,this._ctx);
	                switch(la_) {
	                case 1:
	                    this.state = 875;
	                    this.multipartIdentifier();
	                    break;

	                case 2:
	                    this.state = 876;
	                    localctx.pattern = this.match(SqlBaseParser.STRING);
	                    break;

	                }

	            }
	            break;

	        case 47:
	            localctx = new ShowCreateTableContext(this, localctx);
	            this.enterOuterAlt(localctx, 47);
	            this.state = 881;
	            this.match(SqlBaseParser.SHOW);
	            this.state = 882;
	            this.match(SqlBaseParser.CREATE);
	            this.state = 883;
	            this.match(SqlBaseParser.TABLE);
	            this.state = 884;
	            this.multipartIdentifier();
	            this.state = 887;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===SqlBaseParser.AS) {
	                this.state = 885;
	                this.match(SqlBaseParser.AS);
	                this.state = 886;
	                this.match(SqlBaseParser.SERDE);
	            }

	            break;

	        case 48:
	            localctx = new ShowCurrentNamespaceContext(this, localctx);
	            this.enterOuterAlt(localctx, 48);
	            this.state = 889;
	            this.match(SqlBaseParser.SHOW);
	            this.state = 890;
	            this.match(SqlBaseParser.CURRENT);
	            this.state = 891;
	            this.match(SqlBaseParser.NAMESPACE);
	            break;

	        case 49:
	            localctx = new DescribeFunctionContext(this, localctx);
	            this.enterOuterAlt(localctx, 49);
	            this.state = 892;
	            _la = this._input.LA(1);
	            if(!(_la===SqlBaseParser.DESC || _la===SqlBaseParser.DESCRIBE)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 893;
	            this.match(SqlBaseParser.FUNCTION);
	            this.state = 895;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,83,this._ctx);
	            if(la_===1) {
	                this.state = 894;
	                this.match(SqlBaseParser.EXTENDED);

	            }
	            this.state = 897;
	            this.describeFuncName();
	            break;

	        case 50:
	            localctx = new DescribeNamespaceContext(this, localctx);
	            this.enterOuterAlt(localctx, 50);
	            this.state = 898;
	            _la = this._input.LA(1);
	            if(!(_la===SqlBaseParser.DESC || _la===SqlBaseParser.DESCRIBE)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 899;
	            this.namespace();
	            this.state = 901;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,84,this._ctx);
	            if(la_===1) {
	                this.state = 900;
	                this.match(SqlBaseParser.EXTENDED);

	            }
	            this.state = 903;
	            this.multipartIdentifier();
	            break;

	        case 51:
	            localctx = new DescribeRelationContext(this, localctx);
	            this.enterOuterAlt(localctx, 51);
	            this.state = 905;
	            _la = this._input.LA(1);
	            if(!(_la===SqlBaseParser.DESC || _la===SqlBaseParser.DESCRIBE)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 907;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,85,this._ctx);
	            if(la_===1) {
	                this.state = 906;
	                this.match(SqlBaseParser.TABLE);

	            }
	            this.state = 910;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,86,this._ctx);
	            if(la_===1) {
	                this.state = 909;
	                localctx.option = this._input.LT(1);
	                _la = this._input.LA(1);
	                if(!(_la===SqlBaseParser.EXTENDED || _la===SqlBaseParser.FORMATTED)) {
	                    localctx.option = this._errHandler.recoverInline(this);
	                }
	                else {
	                	this._errHandler.reportMatch(this);
	                    this.consume();
	                }

	            }
	            this.state = 912;
	            this.multipartIdentifier();
	            this.state = 914;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,87,this._ctx);
	            if(la_===1) {
	                this.state = 913;
	                this.partitionSpec();

	            }
	            this.state = 917;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,88,this._ctx);
	            if(la_===1) {
	                this.state = 916;
	                this.describeColName();

	            }
	            break;

	        case 52:
	            localctx = new DescribeQueryContext(this, localctx);
	            this.enterOuterAlt(localctx, 52);
	            this.state = 919;
	            _la = this._input.LA(1);
	            if(!(_la===SqlBaseParser.DESC || _la===SqlBaseParser.DESCRIBE)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 921;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===SqlBaseParser.QUERY) {
	                this.state = 920;
	                this.match(SqlBaseParser.QUERY);
	            }

	            this.state = 923;
	            this.query();
	            break;

	        case 53:
	            localctx = new CommentNamespaceContext(this, localctx);
	            this.enterOuterAlt(localctx, 53);
	            this.state = 924;
	            this.match(SqlBaseParser.COMMENT);
	            this.state = 925;
	            this.match(SqlBaseParser.ON);
	            this.state = 926;
	            this.namespace();
	            this.state = 927;
	            this.multipartIdentifier();
	            this.state = 928;
	            this.match(SqlBaseParser.IS);
	            this.state = 929;
	            localctx.comment = this._input.LT(1);
	            _la = this._input.LA(1);
	            if(!(_la===SqlBaseParser.NULL || _la===SqlBaseParser.STRING)) {
	                localctx.comment = this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            break;

	        case 54:
	            localctx = new CommentTableContext(this, localctx);
	            this.enterOuterAlt(localctx, 54);
	            this.state = 931;
	            this.match(SqlBaseParser.COMMENT);
	            this.state = 932;
	            this.match(SqlBaseParser.ON);
	            this.state = 933;
	            this.match(SqlBaseParser.TABLE);
	            this.state = 934;
	            this.multipartIdentifier();
	            this.state = 935;
	            this.match(SqlBaseParser.IS);
	            this.state = 936;
	            localctx.comment = this._input.LT(1);
	            _la = this._input.LA(1);
	            if(!(_la===SqlBaseParser.NULL || _la===SqlBaseParser.STRING)) {
	                localctx.comment = this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            break;

	        case 55:
	            localctx = new RefreshTableContext(this, localctx);
	            this.enterOuterAlt(localctx, 55);
	            this.state = 938;
	            this.match(SqlBaseParser.REFRESH);
	            this.state = 939;
	            this.match(SqlBaseParser.TABLE);
	            this.state = 940;
	            this.multipartIdentifier();
	            break;

	        case 56:
	            localctx = new RefreshFunctionContext(this, localctx);
	            this.enterOuterAlt(localctx, 56);
	            this.state = 941;
	            this.match(SqlBaseParser.REFRESH);
	            this.state = 942;
	            this.match(SqlBaseParser.FUNCTION);
	            this.state = 943;
	            this.multipartIdentifier();
	            break;

	        case 57:
	            localctx = new RefreshResourceContext(this, localctx);
	            this.enterOuterAlt(localctx, 57);
	            this.state = 944;
	            this.match(SqlBaseParser.REFRESH);
	            this.state = 952;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,91,this._ctx);
	            switch(la_) {
	            case 1:
	                this.state = 945;
	                this.match(SqlBaseParser.STRING);
	                break;

	            case 2:
	                this.state = 949;
	                this._errHandler.sync(this);
	                var _alt = this._interp.adaptivePredict(this._input,90,this._ctx)
	                while(_alt!=1 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                    if(_alt===1+1) {
	                        this.state = 946;
	                        this.matchWildcard(); 
	                    }
	                    this.state = 951;
	                    this._errHandler.sync(this);
	                    _alt = this._interp.adaptivePredict(this._input,90,this._ctx);
	                }

	                break;

	            }
	            break;

	        case 58:
	            localctx = new CacheTableContext(this, localctx);
	            this.enterOuterAlt(localctx, 58);
	            this.state = 954;
	            this.match(SqlBaseParser.CACHE);
	            this.state = 956;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===SqlBaseParser.LAZY) {
	                this.state = 955;
	                this.match(SqlBaseParser.LAZY);
	            }

	            this.state = 958;
	            this.match(SqlBaseParser.TABLE);
	            this.state = 959;
	            this.multipartIdentifier();
	            this.state = 962;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===SqlBaseParser.OPTIONS) {
	                this.state = 960;
	                this.match(SqlBaseParser.OPTIONS);
	                this.state = 961;
	                localctx.options = this.tablePropertyList();
	            }

	            this.state = 968;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===SqlBaseParser.T__1 || _la===SqlBaseParser.AS || _la===SqlBaseParser.FROM || _la===SqlBaseParser.MAP || _la===SqlBaseParser.REDUCE || _la===SqlBaseParser.SELECT || _la===SqlBaseParser.TABLE || _la===SqlBaseParser.VALUES || _la===SqlBaseParser.WITH) {
	                this.state = 965;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===SqlBaseParser.AS) {
	                    this.state = 964;
	                    this.match(SqlBaseParser.AS);
	                }

	                this.state = 967;
	                this.query();
	            }

	            break;

	        case 59:
	            localctx = new UncacheTableContext(this, localctx);
	            this.enterOuterAlt(localctx, 59);
	            this.state = 970;
	            this.match(SqlBaseParser.UNCACHE);
	            this.state = 971;
	            this.match(SqlBaseParser.TABLE);
	            this.state = 974;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,96,this._ctx);
	            if(la_===1) {
	                this.state = 972;
	                this.match(SqlBaseParser.IF);
	                this.state = 973;
	                this.match(SqlBaseParser.EXISTS);

	            }
	            this.state = 976;
	            this.multipartIdentifier();
	            break;

	        case 60:
	            localctx = new ClearCacheContext(this, localctx);
	            this.enterOuterAlt(localctx, 60);
	            this.state = 977;
	            this.match(SqlBaseParser.CLEAR);
	            this.state = 978;
	            this.match(SqlBaseParser.CACHE);
	            break;

	        case 61:
	            localctx = new LoadDataContext(this, localctx);
	            this.enterOuterAlt(localctx, 61);
	            this.state = 979;
	            this.match(SqlBaseParser.LOAD);
	            this.state = 980;
	            this.match(SqlBaseParser.DATA);
	            this.state = 982;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===SqlBaseParser.LOCAL) {
	                this.state = 981;
	                this.match(SqlBaseParser.LOCAL);
	            }

	            this.state = 984;
	            this.match(SqlBaseParser.INPATH);
	            this.state = 985;
	            localctx.path = this.match(SqlBaseParser.STRING);
	            this.state = 987;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===SqlBaseParser.OVERWRITE) {
	                this.state = 986;
	                this.match(SqlBaseParser.OVERWRITE);
	            }

	            this.state = 989;
	            this.match(SqlBaseParser.INTO);
	            this.state = 990;
	            this.match(SqlBaseParser.TABLE);
	            this.state = 991;
	            this.multipartIdentifier();
	            this.state = 993;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===SqlBaseParser.PARTITION) {
	                this.state = 992;
	                this.partitionSpec();
	            }

	            break;

	        case 62:
	            localctx = new TruncateTableContext(this, localctx);
	            this.enterOuterAlt(localctx, 62);
	            this.state = 995;
	            this.match(SqlBaseParser.TRUNCATE);
	            this.state = 996;
	            this.match(SqlBaseParser.TABLE);
	            this.state = 997;
	            this.multipartIdentifier();
	            this.state = 999;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===SqlBaseParser.PARTITION) {
	                this.state = 998;
	                this.partitionSpec();
	            }

	            break;

	        case 63:
	            localctx = new RepairTableContext(this, localctx);
	            this.enterOuterAlt(localctx, 63);
	            this.state = 1001;
	            this.match(SqlBaseParser.MSCK);
	            this.state = 1002;
	            this.match(SqlBaseParser.REPAIR);
	            this.state = 1003;
	            this.match(SqlBaseParser.TABLE);
	            this.state = 1004;
	            this.multipartIdentifier();
	            this.state = 1007;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===SqlBaseParser.ADD || _la===SqlBaseParser.DROP || _la===SqlBaseParser.SYNC) {
	                this.state = 1005;
	                localctx.option = this._input.LT(1);
	                _la = this._input.LA(1);
	                if(!(_la===SqlBaseParser.ADD || _la===SqlBaseParser.DROP || _la===SqlBaseParser.SYNC)) {
	                    localctx.option = this._errHandler.recoverInline(this);
	                }
	                else {
	                	this._errHandler.reportMatch(this);
	                    this.consume();
	                }
	                this.state = 1006;
	                this.match(SqlBaseParser.PARTITIONS);
	            }

	            break;

	        case 64:
	            localctx = new ManageResourceContext(this, localctx);
	            this.enterOuterAlt(localctx, 64);
	            this.state = 1009;
	            localctx.op = this._input.LT(1);
	            _la = this._input.LA(1);
	            if(!(_la===SqlBaseParser.ADD || _la===SqlBaseParser.LIST)) {
	                localctx.op = this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 1010;
	            this.identifier();
	            this.state = 1018;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,103,this._ctx);
	            switch(la_) {
	            case 1:
	                this.state = 1011;
	                this.match(SqlBaseParser.STRING);
	                break;

	            case 2:
	                this.state = 1015;
	                this._errHandler.sync(this);
	                var _alt = this._interp.adaptivePredict(this._input,102,this._ctx)
	                while(_alt!=1 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                    if(_alt===1+1) {
	                        this.state = 1012;
	                        this.matchWildcard(); 
	                    }
	                    this.state = 1017;
	                    this._errHandler.sync(this);
	                    _alt = this._interp.adaptivePredict(this._input,102,this._ctx);
	                }

	                break;

	            }
	            break;

	        case 65:
	            localctx = new FailNativeCommandContext(this, localctx);
	            this.enterOuterAlt(localctx, 65);
	            this.state = 1020;
	            this.match(SqlBaseParser.SET);
	            this.state = 1021;
	            this.match(SqlBaseParser.ROLE);
	            this.state = 1025;
	            this._errHandler.sync(this);
	            var _alt = this._interp.adaptivePredict(this._input,104,this._ctx)
	            while(_alt!=1 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                if(_alt===1+1) {
	                    this.state = 1022;
	                    this.matchWildcard(); 
	                }
	                this.state = 1027;
	                this._errHandler.sync(this);
	                _alt = this._interp.adaptivePredict(this._input,104,this._ctx);
	            }

	            break;

	        case 66:
	            localctx = new SetTimeZoneContext(this, localctx);
	            this.enterOuterAlt(localctx, 66);
	            this.state = 1028;
	            this.match(SqlBaseParser.SET);
	            this.state = 1029;
	            this.match(SqlBaseParser.TIME);
	            this.state = 1030;
	            this.match(SqlBaseParser.ZONE);
	            this.state = 1031;
	            this.interval();
	            break;

	        case 67:
	            localctx = new SetTimeZoneContext(this, localctx);
	            this.enterOuterAlt(localctx, 67);
	            this.state = 1032;
	            this.match(SqlBaseParser.SET);
	            this.state = 1033;
	            this.match(SqlBaseParser.TIME);
	            this.state = 1034;
	            this.match(SqlBaseParser.ZONE);
	            this.state = 1035;
	            localctx.timezone = this._input.LT(1);
	            _la = this._input.LA(1);
	            if(!(_la===SqlBaseParser.LOCAL || _la===SqlBaseParser.STRING)) {
	                localctx.timezone = this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            break;

	        case 68:
	            localctx = new SetTimeZoneContext(this, localctx);
	            this.enterOuterAlt(localctx, 68);
	            this.state = 1036;
	            this.match(SqlBaseParser.SET);
	            this.state = 1037;
	            this.match(SqlBaseParser.TIME);
	            this.state = 1038;
	            this.match(SqlBaseParser.ZONE);
	            this.state = 1042;
	            this._errHandler.sync(this);
	            var _alt = this._interp.adaptivePredict(this._input,105,this._ctx)
	            while(_alt!=1 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                if(_alt===1+1) {
	                    this.state = 1039;
	                    this.matchWildcard(); 
	                }
	                this.state = 1044;
	                this._errHandler.sync(this);
	                _alt = this._interp.adaptivePredict(this._input,105,this._ctx);
	            }

	            break;

	        case 69:
	            localctx = new SetQuotedConfigurationContext(this, localctx);
	            this.enterOuterAlt(localctx, 69);
	            this.state = 1045;
	            this.match(SqlBaseParser.SET);
	            this.state = 1046;
	            this.configKey();
	            this.state = 1047;
	            this.match(SqlBaseParser.EQ);
	            this.state = 1048;
	            this.configValue();
	            break;

	        case 70:
	            localctx = new SetQuotedConfigurationContext(this, localctx);
	            this.enterOuterAlt(localctx, 70);
	            this.state = 1050;
	            this.match(SqlBaseParser.SET);
	            this.state = 1051;
	            this.configKey();
	            this.state = 1059;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===SqlBaseParser.EQ) {
	                this.state = 1052;
	                this.match(SqlBaseParser.EQ);
	                this.state = 1056;
	                this._errHandler.sync(this);
	                var _alt = this._interp.adaptivePredict(this._input,106,this._ctx)
	                while(_alt!=1 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                    if(_alt===1+1) {
	                        this.state = 1053;
	                        this.matchWildcard(); 
	                    }
	                    this.state = 1058;
	                    this._errHandler.sync(this);
	                    _alt = this._interp.adaptivePredict(this._input,106,this._ctx);
	                }

	            }

	            break;

	        case 71:
	            localctx = new SetQuotedConfigurationContext(this, localctx);
	            this.enterOuterAlt(localctx, 71);
	            this.state = 1061;
	            this.match(SqlBaseParser.SET);
	            this.state = 1065;
	            this._errHandler.sync(this);
	            var _alt = this._interp.adaptivePredict(this._input,108,this._ctx)
	            while(_alt!=1 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                if(_alt===1+1) {
	                    this.state = 1062;
	                    this.matchWildcard(); 
	                }
	                this.state = 1067;
	                this._errHandler.sync(this);
	                _alt = this._interp.adaptivePredict(this._input,108,this._ctx);
	            }

	            this.state = 1068;
	            this.match(SqlBaseParser.EQ);
	            this.state = 1069;
	            this.configValue();
	            break;

	        case 72:
	            localctx = new SetConfigurationContext(this, localctx);
	            this.enterOuterAlt(localctx, 72);
	            this.state = 1070;
	            this.match(SqlBaseParser.SET);
	            this.state = 1074;
	            this._errHandler.sync(this);
	            var _alt = this._interp.adaptivePredict(this._input,109,this._ctx)
	            while(_alt!=1 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                if(_alt===1+1) {
	                    this.state = 1071;
	                    this.matchWildcard(); 
	                }
	                this.state = 1076;
	                this._errHandler.sync(this);
	                _alt = this._interp.adaptivePredict(this._input,109,this._ctx);
	            }

	            break;

	        case 73:
	            localctx = new ResetQuotedConfigurationContext(this, localctx);
	            this.enterOuterAlt(localctx, 73);
	            this.state = 1077;
	            this.match(SqlBaseParser.RESET);
	            this.state = 1078;
	            this.configKey();
	            break;

	        case 74:
	            localctx = new ResetConfigurationContext(this, localctx);
	            this.enterOuterAlt(localctx, 74);
	            this.state = 1079;
	            this.match(SqlBaseParser.RESET);
	            this.state = 1083;
	            this._errHandler.sync(this);
	            var _alt = this._interp.adaptivePredict(this._input,110,this._ctx)
	            while(_alt!=1 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                if(_alt===1+1) {
	                    this.state = 1080;
	                    this.matchWildcard(); 
	                }
	                this.state = 1085;
	                this._errHandler.sync(this);
	                _alt = this._interp.adaptivePredict(this._input,110,this._ctx);
	            }

	            break;

	        case 75:
	            localctx = new FailNativeCommandContext(this, localctx);
	            this.enterOuterAlt(localctx, 75);
	            this.state = 1086;
	            this.unsupportedHiveNativeCommands();
	            this.state = 1090;
	            this._errHandler.sync(this);
	            var _alt = this._interp.adaptivePredict(this._input,111,this._ctx)
	            while(_alt!=1 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                if(_alt===1+1) {
	                    this.state = 1087;
	                    this.matchWildcard(); 
	                }
	                this.state = 1092;
	                this._errHandler.sync(this);
	                _alt = this._interp.adaptivePredict(this._input,111,this._ctx);
	            }

	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	configKey() {
	    let localctx = new ConfigKeyContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 16, SqlBaseParser.RULE_configKey);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1095;
	        this.quotedIdentifier();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	configValue() {
	    let localctx = new ConfigValueContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 18, SqlBaseParser.RULE_configValue);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1097;
	        this.quotedIdentifier();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	unsupportedHiveNativeCommands() {
	    let localctx = new UnsupportedHiveNativeCommandsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 20, SqlBaseParser.RULE_unsupportedHiveNativeCommands);
	    var _la = 0; // Token type
	    try {
	        this.state = 1267;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,120,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1099;
	            localctx.kw1 = this.match(SqlBaseParser.CREATE);
	            this.state = 1100;
	            localctx.kw2 = this.match(SqlBaseParser.ROLE);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1101;
	            localctx.kw1 = this.match(SqlBaseParser.DROP);
	            this.state = 1102;
	            localctx.kw2 = this.match(SqlBaseParser.ROLE);
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1103;
	            localctx.kw1 = this.match(SqlBaseParser.GRANT);
	            this.state = 1105;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,113,this._ctx);
	            if(la_===1) {
	                this.state = 1104;
	                localctx.kw2 = this.match(SqlBaseParser.ROLE);

	            }
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 1107;
	            localctx.kw1 = this.match(SqlBaseParser.REVOKE);
	            this.state = 1109;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,114,this._ctx);
	            if(la_===1) {
	                this.state = 1108;
	                localctx.kw2 = this.match(SqlBaseParser.ROLE);

	            }
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 1111;
	            localctx.kw1 = this.match(SqlBaseParser.SHOW);
	            this.state = 1112;
	            localctx.kw2 = this.match(SqlBaseParser.GRANT);
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 1113;
	            localctx.kw1 = this.match(SqlBaseParser.SHOW);
	            this.state = 1114;
	            localctx.kw2 = this.match(SqlBaseParser.ROLE);
	            this.state = 1116;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,115,this._ctx);
	            if(la_===1) {
	                this.state = 1115;
	                localctx.kw3 = this.match(SqlBaseParser.GRANT);

	            }
	            break;

	        case 7:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 1118;
	            localctx.kw1 = this.match(SqlBaseParser.SHOW);
	            this.state = 1119;
	            localctx.kw2 = this.match(SqlBaseParser.PRINCIPALS);
	            break;

	        case 8:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 1120;
	            localctx.kw1 = this.match(SqlBaseParser.SHOW);
	            this.state = 1121;
	            localctx.kw2 = this.match(SqlBaseParser.ROLES);
	            break;

	        case 9:
	            this.enterOuterAlt(localctx, 9);
	            this.state = 1122;
	            localctx.kw1 = this.match(SqlBaseParser.SHOW);
	            this.state = 1123;
	            localctx.kw2 = this.match(SqlBaseParser.CURRENT);
	            this.state = 1124;
	            localctx.kw3 = this.match(SqlBaseParser.ROLES);
	            break;

	        case 10:
	            this.enterOuterAlt(localctx, 10);
	            this.state = 1125;
	            localctx.kw1 = this.match(SqlBaseParser.EXPORT);
	            this.state = 1126;
	            localctx.kw2 = this.match(SqlBaseParser.TABLE);
	            break;

	        case 11:
	            this.enterOuterAlt(localctx, 11);
	            this.state = 1127;
	            localctx.kw1 = this.match(SqlBaseParser.IMPORT);
	            this.state = 1128;
	            localctx.kw2 = this.match(SqlBaseParser.TABLE);
	            break;

	        case 12:
	            this.enterOuterAlt(localctx, 12);
	            this.state = 1129;
	            localctx.kw1 = this.match(SqlBaseParser.SHOW);
	            this.state = 1130;
	            localctx.kw2 = this.match(SqlBaseParser.COMPACTIONS);
	            break;

	        case 13:
	            this.enterOuterAlt(localctx, 13);
	            this.state = 1131;
	            localctx.kw1 = this.match(SqlBaseParser.SHOW);
	            this.state = 1132;
	            localctx.kw2 = this.match(SqlBaseParser.CREATE);
	            this.state = 1133;
	            localctx.kw3 = this.match(SqlBaseParser.TABLE);
	            break;

	        case 14:
	            this.enterOuterAlt(localctx, 14);
	            this.state = 1134;
	            localctx.kw1 = this.match(SqlBaseParser.SHOW);
	            this.state = 1135;
	            localctx.kw2 = this.match(SqlBaseParser.TRANSACTIONS);
	            break;

	        case 15:
	            this.enterOuterAlt(localctx, 15);
	            this.state = 1136;
	            localctx.kw1 = this.match(SqlBaseParser.SHOW);
	            this.state = 1137;
	            localctx.kw2 = this.match(SqlBaseParser.INDEXES);
	            break;

	        case 16:
	            this.enterOuterAlt(localctx, 16);
	            this.state = 1138;
	            localctx.kw1 = this.match(SqlBaseParser.SHOW);
	            this.state = 1139;
	            localctx.kw2 = this.match(SqlBaseParser.LOCKS);
	            break;

	        case 17:
	            this.enterOuterAlt(localctx, 17);
	            this.state = 1140;
	            localctx.kw1 = this.match(SqlBaseParser.CREATE);
	            this.state = 1141;
	            localctx.kw2 = this.match(SqlBaseParser.INDEX);
	            break;

	        case 18:
	            this.enterOuterAlt(localctx, 18);
	            this.state = 1142;
	            localctx.kw1 = this.match(SqlBaseParser.DROP);
	            this.state = 1143;
	            localctx.kw2 = this.match(SqlBaseParser.INDEX);
	            break;

	        case 19:
	            this.enterOuterAlt(localctx, 19);
	            this.state = 1144;
	            localctx.kw1 = this.match(SqlBaseParser.ALTER);
	            this.state = 1145;
	            localctx.kw2 = this.match(SqlBaseParser.INDEX);
	            break;

	        case 20:
	            this.enterOuterAlt(localctx, 20);
	            this.state = 1146;
	            localctx.kw1 = this.match(SqlBaseParser.LOCK);
	            this.state = 1147;
	            localctx.kw2 = this.match(SqlBaseParser.TABLE);
	            break;

	        case 21:
	            this.enterOuterAlt(localctx, 21);
	            this.state = 1148;
	            localctx.kw1 = this.match(SqlBaseParser.LOCK);
	            this.state = 1149;
	            localctx.kw2 = this.match(SqlBaseParser.DATABASE);
	            break;

	        case 22:
	            this.enterOuterAlt(localctx, 22);
	            this.state = 1150;
	            localctx.kw1 = this.match(SqlBaseParser.UNLOCK);
	            this.state = 1151;
	            localctx.kw2 = this.match(SqlBaseParser.TABLE);
	            break;

	        case 23:
	            this.enterOuterAlt(localctx, 23);
	            this.state = 1152;
	            localctx.kw1 = this.match(SqlBaseParser.UNLOCK);
	            this.state = 1153;
	            localctx.kw2 = this.match(SqlBaseParser.DATABASE);
	            break;

	        case 24:
	            this.enterOuterAlt(localctx, 24);
	            this.state = 1154;
	            localctx.kw1 = this.match(SqlBaseParser.CREATE);
	            this.state = 1155;
	            localctx.kw2 = this.match(SqlBaseParser.TEMPORARY);
	            this.state = 1156;
	            localctx.kw3 = this.match(SqlBaseParser.MACRO);
	            break;

	        case 25:
	            this.enterOuterAlt(localctx, 25);
	            this.state = 1157;
	            localctx.kw1 = this.match(SqlBaseParser.DROP);
	            this.state = 1158;
	            localctx.kw2 = this.match(SqlBaseParser.TEMPORARY);
	            this.state = 1159;
	            localctx.kw3 = this.match(SqlBaseParser.MACRO);
	            break;

	        case 26:
	            this.enterOuterAlt(localctx, 26);
	            this.state = 1160;
	            localctx.kw1 = this.match(SqlBaseParser.ALTER);
	            this.state = 1161;
	            localctx.kw2 = this.match(SqlBaseParser.TABLE);
	            this.state = 1162;
	            this.tableIdentifier();
	            this.state = 1163;
	            localctx.kw3 = this.match(SqlBaseParser.NOT);
	            this.state = 1164;
	            localctx.kw4 = this.match(SqlBaseParser.CLUSTERED);
	            break;

	        case 27:
	            this.enterOuterAlt(localctx, 27);
	            this.state = 1166;
	            localctx.kw1 = this.match(SqlBaseParser.ALTER);
	            this.state = 1167;
	            localctx.kw2 = this.match(SqlBaseParser.TABLE);
	            this.state = 1168;
	            this.tableIdentifier();
	            this.state = 1169;
	            localctx.kw3 = this.match(SqlBaseParser.CLUSTERED);
	            this.state = 1170;
	            localctx.kw4 = this.match(SqlBaseParser.BY);
	            break;

	        case 28:
	            this.enterOuterAlt(localctx, 28);
	            this.state = 1172;
	            localctx.kw1 = this.match(SqlBaseParser.ALTER);
	            this.state = 1173;
	            localctx.kw2 = this.match(SqlBaseParser.TABLE);
	            this.state = 1174;
	            this.tableIdentifier();
	            this.state = 1175;
	            localctx.kw3 = this.match(SqlBaseParser.NOT);
	            this.state = 1176;
	            localctx.kw4 = this.match(SqlBaseParser.SORTED);
	            break;

	        case 29:
	            this.enterOuterAlt(localctx, 29);
	            this.state = 1178;
	            localctx.kw1 = this.match(SqlBaseParser.ALTER);
	            this.state = 1179;
	            localctx.kw2 = this.match(SqlBaseParser.TABLE);
	            this.state = 1180;
	            this.tableIdentifier();
	            this.state = 1181;
	            localctx.kw3 = this.match(SqlBaseParser.SKEWED);
	            this.state = 1182;
	            localctx.kw4 = this.match(SqlBaseParser.BY);
	            break;

	        case 30:
	            this.enterOuterAlt(localctx, 30);
	            this.state = 1184;
	            localctx.kw1 = this.match(SqlBaseParser.ALTER);
	            this.state = 1185;
	            localctx.kw2 = this.match(SqlBaseParser.TABLE);
	            this.state = 1186;
	            this.tableIdentifier();
	            this.state = 1187;
	            localctx.kw3 = this.match(SqlBaseParser.NOT);
	            this.state = 1188;
	            localctx.kw4 = this.match(SqlBaseParser.SKEWED);
	            break;

	        case 31:
	            this.enterOuterAlt(localctx, 31);
	            this.state = 1190;
	            localctx.kw1 = this.match(SqlBaseParser.ALTER);
	            this.state = 1191;
	            localctx.kw2 = this.match(SqlBaseParser.TABLE);
	            this.state = 1192;
	            this.tableIdentifier();
	            this.state = 1193;
	            localctx.kw3 = this.match(SqlBaseParser.NOT);
	            this.state = 1194;
	            localctx.kw4 = this.match(SqlBaseParser.STORED);
	            this.state = 1195;
	            localctx.kw5 = this.match(SqlBaseParser.AS);
	            this.state = 1196;
	            localctx.kw6 = this.match(SqlBaseParser.DIRECTORIES);
	            break;

	        case 32:
	            this.enterOuterAlt(localctx, 32);
	            this.state = 1198;
	            localctx.kw1 = this.match(SqlBaseParser.ALTER);
	            this.state = 1199;
	            localctx.kw2 = this.match(SqlBaseParser.TABLE);
	            this.state = 1200;
	            this.tableIdentifier();
	            this.state = 1201;
	            localctx.kw3 = this.match(SqlBaseParser.SET);
	            this.state = 1202;
	            localctx.kw4 = this.match(SqlBaseParser.SKEWED);
	            this.state = 1203;
	            localctx.kw5 = this.match(SqlBaseParser.LOCATION);
	            break;

	        case 33:
	            this.enterOuterAlt(localctx, 33);
	            this.state = 1205;
	            localctx.kw1 = this.match(SqlBaseParser.ALTER);
	            this.state = 1206;
	            localctx.kw2 = this.match(SqlBaseParser.TABLE);
	            this.state = 1207;
	            this.tableIdentifier();
	            this.state = 1208;
	            localctx.kw3 = this.match(SqlBaseParser.EXCHANGE);
	            this.state = 1209;
	            localctx.kw4 = this.match(SqlBaseParser.PARTITION);
	            break;

	        case 34:
	            this.enterOuterAlt(localctx, 34);
	            this.state = 1211;
	            localctx.kw1 = this.match(SqlBaseParser.ALTER);
	            this.state = 1212;
	            localctx.kw2 = this.match(SqlBaseParser.TABLE);
	            this.state = 1213;
	            this.tableIdentifier();
	            this.state = 1214;
	            localctx.kw3 = this.match(SqlBaseParser.ARCHIVE);
	            this.state = 1215;
	            localctx.kw4 = this.match(SqlBaseParser.PARTITION);
	            break;

	        case 35:
	            this.enterOuterAlt(localctx, 35);
	            this.state = 1217;
	            localctx.kw1 = this.match(SqlBaseParser.ALTER);
	            this.state = 1218;
	            localctx.kw2 = this.match(SqlBaseParser.TABLE);
	            this.state = 1219;
	            this.tableIdentifier();
	            this.state = 1220;
	            localctx.kw3 = this.match(SqlBaseParser.UNARCHIVE);
	            this.state = 1221;
	            localctx.kw4 = this.match(SqlBaseParser.PARTITION);
	            break;

	        case 36:
	            this.enterOuterAlt(localctx, 36);
	            this.state = 1223;
	            localctx.kw1 = this.match(SqlBaseParser.ALTER);
	            this.state = 1224;
	            localctx.kw2 = this.match(SqlBaseParser.TABLE);
	            this.state = 1225;
	            this.tableIdentifier();
	            this.state = 1226;
	            localctx.kw3 = this.match(SqlBaseParser.TOUCH);
	            break;

	        case 37:
	            this.enterOuterAlt(localctx, 37);
	            this.state = 1228;
	            localctx.kw1 = this.match(SqlBaseParser.ALTER);
	            this.state = 1229;
	            localctx.kw2 = this.match(SqlBaseParser.TABLE);
	            this.state = 1230;
	            this.tableIdentifier();
	            this.state = 1232;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===SqlBaseParser.PARTITION) {
	                this.state = 1231;
	                this.partitionSpec();
	            }

	            this.state = 1234;
	            localctx.kw3 = this.match(SqlBaseParser.COMPACT);
	            break;

	        case 38:
	            this.enterOuterAlt(localctx, 38);
	            this.state = 1236;
	            localctx.kw1 = this.match(SqlBaseParser.ALTER);
	            this.state = 1237;
	            localctx.kw2 = this.match(SqlBaseParser.TABLE);
	            this.state = 1238;
	            this.tableIdentifier();
	            this.state = 1240;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===SqlBaseParser.PARTITION) {
	                this.state = 1239;
	                this.partitionSpec();
	            }

	            this.state = 1242;
	            localctx.kw3 = this.match(SqlBaseParser.CONCATENATE);
	            break;

	        case 39:
	            this.enterOuterAlt(localctx, 39);
	            this.state = 1244;
	            localctx.kw1 = this.match(SqlBaseParser.ALTER);
	            this.state = 1245;
	            localctx.kw2 = this.match(SqlBaseParser.TABLE);
	            this.state = 1246;
	            this.tableIdentifier();
	            this.state = 1248;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===SqlBaseParser.PARTITION) {
	                this.state = 1247;
	                this.partitionSpec();
	            }

	            this.state = 1250;
	            localctx.kw3 = this.match(SqlBaseParser.SET);
	            this.state = 1251;
	            localctx.kw4 = this.match(SqlBaseParser.FILEFORMAT);
	            break;

	        case 40:
	            this.enterOuterAlt(localctx, 40);
	            this.state = 1253;
	            localctx.kw1 = this.match(SqlBaseParser.ALTER);
	            this.state = 1254;
	            localctx.kw2 = this.match(SqlBaseParser.TABLE);
	            this.state = 1255;
	            this.tableIdentifier();
	            this.state = 1257;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===SqlBaseParser.PARTITION) {
	                this.state = 1256;
	                this.partitionSpec();
	            }

	            this.state = 1259;
	            localctx.kw3 = this.match(SqlBaseParser.REPLACE);
	            this.state = 1260;
	            localctx.kw4 = this.match(SqlBaseParser.COLUMNS);
	            break;

	        case 41:
	            this.enterOuterAlt(localctx, 41);
	            this.state = 1262;
	            localctx.kw1 = this.match(SqlBaseParser.START);
	            this.state = 1263;
	            localctx.kw2 = this.match(SqlBaseParser.TRANSACTION);
	            break;

	        case 42:
	            this.enterOuterAlt(localctx, 42);
	            this.state = 1264;
	            localctx.kw1 = this.match(SqlBaseParser.COMMIT);
	            break;

	        case 43:
	            this.enterOuterAlt(localctx, 43);
	            this.state = 1265;
	            localctx.kw1 = this.match(SqlBaseParser.ROLLBACK);
	            break;

	        case 44:
	            this.enterOuterAlt(localctx, 44);
	            this.state = 1266;
	            localctx.kw1 = this.match(SqlBaseParser.DFS);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	createTableHeader() {
	    let localctx = new CreateTableHeaderContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 22, SqlBaseParser.RULE_createTableHeader);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1269;
	        this.match(SqlBaseParser.CREATE);
	        this.state = 1271;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===SqlBaseParser.TEMPORARY) {
	            this.state = 1270;
	            this.match(SqlBaseParser.TEMPORARY);
	        }

	        this.state = 1274;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===SqlBaseParser.EXTERNAL) {
	            this.state = 1273;
	            this.match(SqlBaseParser.EXTERNAL);
	        }

	        this.state = 1276;
	        this.match(SqlBaseParser.TABLE);
	        this.state = 1280;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,123,this._ctx);
	        if(la_===1) {
	            this.state = 1277;
	            this.match(SqlBaseParser.IF);
	            this.state = 1278;
	            this.match(SqlBaseParser.NOT);
	            this.state = 1279;
	            this.match(SqlBaseParser.EXISTS);

	        }
	        this.state = 1282;
	        this.multipartIdentifier();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	replaceTableHeader() {
	    let localctx = new ReplaceTableHeaderContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 24, SqlBaseParser.RULE_replaceTableHeader);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1286;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===SqlBaseParser.CREATE) {
	            this.state = 1284;
	            this.match(SqlBaseParser.CREATE);
	            this.state = 1285;
	            this.match(SqlBaseParser.OR);
	        }

	        this.state = 1288;
	        this.match(SqlBaseParser.REPLACE);
	        this.state = 1289;
	        this.match(SqlBaseParser.TABLE);
	        this.state = 1290;
	        this.multipartIdentifier();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	bucketSpec() {
	    let localctx = new BucketSpecContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 26, SqlBaseParser.RULE_bucketSpec);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1292;
	        this.match(SqlBaseParser.CLUSTERED);
	        this.state = 1293;
	        this.match(SqlBaseParser.BY);
	        this.state = 1294;
	        this.identifierList();
	        this.state = 1298;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===SqlBaseParser.SORTED) {
	            this.state = 1295;
	            this.match(SqlBaseParser.SORTED);
	            this.state = 1296;
	            this.match(SqlBaseParser.BY);
	            this.state = 1297;
	            this.orderedIdentifierList();
	        }

	        this.state = 1300;
	        this.match(SqlBaseParser.INTO);
	        this.state = 1301;
	        this.match(SqlBaseParser.INTEGER_VALUE);
	        this.state = 1302;
	        this.match(SqlBaseParser.BUCKETS);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	skewSpec() {
	    let localctx = new SkewSpecContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 28, SqlBaseParser.RULE_skewSpec);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1304;
	        this.match(SqlBaseParser.SKEWED);
	        this.state = 1305;
	        this.match(SqlBaseParser.BY);
	        this.state = 1306;
	        this.identifierList();
	        this.state = 1307;
	        this.match(SqlBaseParser.ON);
	        this.state = 1310;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,126,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 1308;
	            this.constantList();
	            break;

	        case 2:
	            this.state = 1309;
	            this.nestedConstantList();
	            break;

	        }
	        this.state = 1315;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,127,this._ctx);
	        if(la_===1) {
	            this.state = 1312;
	            this.match(SqlBaseParser.STORED);
	            this.state = 1313;
	            this.match(SqlBaseParser.AS);
	            this.state = 1314;
	            this.match(SqlBaseParser.DIRECTORIES);

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	locationSpec() {
	    let localctx = new LocationSpecContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 30, SqlBaseParser.RULE_locationSpec);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1317;
	        this.match(SqlBaseParser.LOCATION);
	        this.state = 1318;
	        localctx.location = this.match(SqlBaseParser.STRING);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	commentSpec() {
	    let localctx = new CommentSpecContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 32, SqlBaseParser.RULE_commentSpec);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1320;
	        this.match(SqlBaseParser.COMMENT);
	        this.state = 1321;
	        localctx.comment = this.match(SqlBaseParser.STRING);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	query() {
	    let localctx = new QueryContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 34, SqlBaseParser.RULE_query);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1324;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===SqlBaseParser.WITH) {
	            this.state = 1323;
	            this.ctes();
	        }

	        this.state = 1326;
	        this.queryTerm(0);
	        this.state = 1327;
	        this.queryOrganization();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	insertInto() {
	    let localctx = new InsertIntoContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 36, SqlBaseParser.RULE_insertInto);
	    var _la = 0; // Token type
	    try {
	        this.state = 1390;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,143,this._ctx);
	        switch(la_) {
	        case 1:
	            localctx = new InsertOverwriteTableContext(this, localctx);
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1329;
	            this.match(SqlBaseParser.INSERT);
	            this.state = 1330;
	            this.match(SqlBaseParser.OVERWRITE);
	            this.state = 1332;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,129,this._ctx);
	            if(la_===1) {
	                this.state = 1331;
	                this.match(SqlBaseParser.TABLE);

	            }
	            this.state = 1334;
	            this.multipartIdentifier();
	            this.state = 1341;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===SqlBaseParser.PARTITION) {
	                this.state = 1335;
	                this.partitionSpec();
	                this.state = 1339;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===SqlBaseParser.IF) {
	                    this.state = 1336;
	                    this.match(SqlBaseParser.IF);
	                    this.state = 1337;
	                    this.match(SqlBaseParser.NOT);
	                    this.state = 1338;
	                    this.match(SqlBaseParser.EXISTS);
	                }

	            }

	            this.state = 1344;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,132,this._ctx);
	            if(la_===1) {
	                this.state = 1343;
	                this.identifierList();

	            }
	            break;

	        case 2:
	            localctx = new InsertIntoTableContext(this, localctx);
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1346;
	            this.match(SqlBaseParser.INSERT);
	            this.state = 1347;
	            this.match(SqlBaseParser.INTO);
	            this.state = 1349;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,133,this._ctx);
	            if(la_===1) {
	                this.state = 1348;
	                this.match(SqlBaseParser.TABLE);

	            }
	            this.state = 1351;
	            this.multipartIdentifier();
	            this.state = 1353;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===SqlBaseParser.PARTITION) {
	                this.state = 1352;
	                this.partitionSpec();
	            }

	            this.state = 1358;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===SqlBaseParser.IF) {
	                this.state = 1355;
	                this.match(SqlBaseParser.IF);
	                this.state = 1356;
	                this.match(SqlBaseParser.NOT);
	                this.state = 1357;
	                this.match(SqlBaseParser.EXISTS);
	            }

	            this.state = 1361;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,136,this._ctx);
	            if(la_===1) {
	                this.state = 1360;
	                this.identifierList();

	            }
	            break;

	        case 3:
	            localctx = new InsertOverwriteHiveDirContext(this, localctx);
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1363;
	            this.match(SqlBaseParser.INSERT);
	            this.state = 1364;
	            this.match(SqlBaseParser.OVERWRITE);
	            this.state = 1366;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===SqlBaseParser.LOCAL) {
	                this.state = 1365;
	                this.match(SqlBaseParser.LOCAL);
	            }

	            this.state = 1368;
	            this.match(SqlBaseParser.DIRECTORY);
	            this.state = 1369;
	            localctx.path = this.match(SqlBaseParser.STRING);
	            this.state = 1371;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===SqlBaseParser.ROW) {
	                this.state = 1370;
	                this.rowFormat();
	            }

	            this.state = 1374;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===SqlBaseParser.STORED) {
	                this.state = 1373;
	                this.createFileFormat();
	            }

	            break;

	        case 4:
	            localctx = new InsertOverwriteDirContext(this, localctx);
	            this.enterOuterAlt(localctx, 4);
	            this.state = 1376;
	            this.match(SqlBaseParser.INSERT);
	            this.state = 1377;
	            this.match(SqlBaseParser.OVERWRITE);
	            this.state = 1379;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===SqlBaseParser.LOCAL) {
	                this.state = 1378;
	                this.match(SqlBaseParser.LOCAL);
	            }

	            this.state = 1381;
	            this.match(SqlBaseParser.DIRECTORY);
	            this.state = 1383;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===SqlBaseParser.STRING) {
	                this.state = 1382;
	                localctx.path = this.match(SqlBaseParser.STRING);
	            }

	            this.state = 1385;
	            this.tableProvider();
	            this.state = 1388;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===SqlBaseParser.OPTIONS) {
	                this.state = 1386;
	                this.match(SqlBaseParser.OPTIONS);
	                this.state = 1387;
	                localctx.options = this.tablePropertyList();
	            }

	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	partitionSpecLocation() {
	    let localctx = new PartitionSpecLocationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 38, SqlBaseParser.RULE_partitionSpecLocation);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1392;
	        this.partitionSpec();
	        this.state = 1394;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===SqlBaseParser.LOCATION) {
	            this.state = 1393;
	            this.locationSpec();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	partitionSpec() {
	    let localctx = new PartitionSpecContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 40, SqlBaseParser.RULE_partitionSpec);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1396;
	        this.match(SqlBaseParser.PARTITION);
	        this.state = 1397;
	        this.match(SqlBaseParser.T__1);
	        this.state = 1398;
	        this.partitionVal();
	        this.state = 1403;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===SqlBaseParser.T__2) {
	            this.state = 1399;
	            this.match(SqlBaseParser.T__2);
	            this.state = 1400;
	            this.partitionVal();
	            this.state = 1405;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 1406;
	        this.match(SqlBaseParser.T__3);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	partitionVal() {
	    let localctx = new PartitionValContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 42, SqlBaseParser.RULE_partitionVal);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1408;
	        this.identifier();
	        this.state = 1411;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===SqlBaseParser.EQ) {
	            this.state = 1409;
	            this.match(SqlBaseParser.EQ);
	            this.state = 1410;
	            this.constant();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	namespace() {
	    let localctx = new NamespaceContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 44, SqlBaseParser.RULE_namespace);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1413;
	        _la = this._input.LA(1);
	        if(!(_la===SqlBaseParser.DATABASE || _la===SqlBaseParser.NAMESPACE || _la===SqlBaseParser.SCHEMA)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	describeFuncName() {
	    let localctx = new DescribeFuncNameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 46, SqlBaseParser.RULE_describeFuncName);
	    try {
	        this.state = 1420;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,147,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1415;
	            this.qualifiedName();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1416;
	            this.match(SqlBaseParser.STRING);
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1417;
	            this.comparisonOperator();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 1418;
	            this.arithmeticOperator();
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 1419;
	            this.predicateOperator();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	describeColName() {
	    let localctx = new DescribeColNameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 48, SqlBaseParser.RULE_describeColName);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1422;
	        localctx._identifier = this.identifier();
	        localctx.nameParts.push(localctx._identifier);
	        this.state = 1427;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===SqlBaseParser.T__4) {
	            this.state = 1423;
	            this.match(SqlBaseParser.T__4);
	            this.state = 1424;
	            localctx._identifier = this.identifier();
	            localctx.nameParts.push(localctx._identifier);
	            this.state = 1429;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	ctes() {
	    let localctx = new CtesContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 50, SqlBaseParser.RULE_ctes);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1430;
	        this.match(SqlBaseParser.WITH);
	        this.state = 1431;
	        this.namedQuery();
	        this.state = 1436;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===SqlBaseParser.T__2) {
	            this.state = 1432;
	            this.match(SqlBaseParser.T__2);
	            this.state = 1433;
	            this.namedQuery();
	            this.state = 1438;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	namedQuery() {
	    let localctx = new NamedQueryContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 52, SqlBaseParser.RULE_namedQuery);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1439;
	        localctx.name = this.errorCapturingIdentifier();
	        this.state = 1441;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,150,this._ctx);
	        if(la_===1) {
	            this.state = 1440;
	            localctx.columnAliases = this.identifierList();

	        }
	        this.state = 1444;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===SqlBaseParser.AS) {
	            this.state = 1443;
	            this.match(SqlBaseParser.AS);
	        }

	        this.state = 1446;
	        this.match(SqlBaseParser.T__1);
	        this.state = 1447;
	        this.query();
	        this.state = 1448;
	        this.match(SqlBaseParser.T__3);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	tableProvider() {
	    let localctx = new TableProviderContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 54, SqlBaseParser.RULE_tableProvider);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1450;
	        this.match(SqlBaseParser.USING);
	        this.state = 1451;
	        this.multipartIdentifier();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	createTableClauses() {
	    let localctx = new CreateTableClausesContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 56, SqlBaseParser.RULE_createTableClauses);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1466;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===SqlBaseParser.CLUSTERED || _la===SqlBaseParser.COMMENT || ((((_la - 137)) & ~0x1f) == 0 && ((1 << (_la - 137)) & ((1 << (SqlBaseParser.LOCATION - 137)) | (1 << (SqlBaseParser.OPTIONS - 137)) | (1 << (SqlBaseParser.PARTITIONED - 137)))) !== 0) || ((((_la - 200)) & ~0x1f) == 0 && ((1 << (_la - 200)) & ((1 << (SqlBaseParser.ROW - 200)) | (1 << (SqlBaseParser.SKEWED - 200)) | (1 << (SqlBaseParser.STORED - 200)) | (1 << (SqlBaseParser.TBLPROPERTIES - 200)))) !== 0)) {
	            this.state = 1464;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case SqlBaseParser.OPTIONS:
	                this.state = 1453;
	                this.tableOptions();
	                break;
	            case SqlBaseParser.PARTITIONED:
	                this.state = 1454;
	                this.match(SqlBaseParser.PARTITIONED);
	                this.state = 1455;
	                this.match(SqlBaseParser.BY);
	                this.state = 1456;
	                localctx.partitioning = this.partitionFieldList();
	                break;
	            case SqlBaseParser.SKEWED:
	                this.state = 1457;
	                this.skewSpec();
	                break;
	            case SqlBaseParser.CLUSTERED:
	                this.state = 1458;
	                this.bucketSpec();
	                break;
	            case SqlBaseParser.ROW:
	                this.state = 1459;
	                this.rowFormat();
	                break;
	            case SqlBaseParser.STORED:
	                this.state = 1460;
	                this.createFileFormat();
	                break;
	            case SqlBaseParser.LOCATION:
	                this.state = 1461;
	                this.locationSpec();
	                break;
	            case SqlBaseParser.COMMENT:
	                this.state = 1462;
	                this.commentSpec();
	                break;
	            case SqlBaseParser.TBLPROPERTIES:
	                this.state = 1463;
	                this.tableProperties();
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            this.state = 1468;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	tableProperties() {
	    let localctx = new TablePropertiesContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 58, SqlBaseParser.RULE_tableProperties);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1469;
	        this.match(SqlBaseParser.TBLPROPERTIES);
	        this.state = 1470;
	        localctx.tableProps = this.tablePropertyList();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	tableOptions() {
	    let localctx = new TableOptionsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 60, SqlBaseParser.RULE_tableOptions);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1472;
	        this.match(SqlBaseParser.OPTIONS);
	        this.state = 1473;
	        localctx.tableOpts = this.tablePropertyList();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	tablePropertyList() {
	    let localctx = new TablePropertyListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 62, SqlBaseParser.RULE_tablePropertyList);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1475;
	        this.match(SqlBaseParser.T__1);
	        this.state = 1476;
	        this.tableProperty();
	        this.state = 1481;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===SqlBaseParser.T__2) {
	            this.state = 1477;
	            this.match(SqlBaseParser.T__2);
	            this.state = 1478;
	            this.tableProperty();
	            this.state = 1483;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 1484;
	        this.match(SqlBaseParser.T__3);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	tableProperty() {
	    let localctx = new TablePropertyContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 64, SqlBaseParser.RULE_tableProperty);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1486;
	        localctx.key = this.tablePropertyKey();
	        this.state = 1491;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===SqlBaseParser.FALSE || _la===SqlBaseParser.TRUE || ((((_la - 277)) & ~0x1f) == 0 && ((1 << (_la - 277)) & ((1 << (SqlBaseParser.EQ - 277)) | (1 << (SqlBaseParser.STRING - 277)) | (1 << (SqlBaseParser.INTEGER_VALUE - 277)) | (1 << (SqlBaseParser.DECIMAL_VALUE - 277)))) !== 0)) {
	            this.state = 1488;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===SqlBaseParser.EQ) {
	                this.state = 1487;
	                this.match(SqlBaseParser.EQ);
	            }

	            this.state = 1490;
	            localctx.value = this.tablePropertyValue();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	tablePropertyKey() {
	    let localctx = new TablePropertyKeyContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 66, SqlBaseParser.RULE_tablePropertyKey);
	    var _la = 0; // Token type
	    try {
	        this.state = 1502;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,158,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1493;
	            this.identifier();
	            this.state = 1498;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===SqlBaseParser.T__4) {
	                this.state = 1494;
	                this.match(SqlBaseParser.T__4);
	                this.state = 1495;
	                this.identifier();
	                this.state = 1500;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1501;
	            this.match(SqlBaseParser.STRING);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	tablePropertyValue() {
	    let localctx = new TablePropertyValueContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 68, SqlBaseParser.RULE_tablePropertyValue);
	    try {
	        this.state = 1508;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case SqlBaseParser.INTEGER_VALUE:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1504;
	            this.match(SqlBaseParser.INTEGER_VALUE);
	            break;
	        case SqlBaseParser.DECIMAL_VALUE:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1505;
	            this.match(SqlBaseParser.DECIMAL_VALUE);
	            break;
	        case SqlBaseParser.FALSE:
	        case SqlBaseParser.TRUE:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1506;
	            this.booleanValue();
	            break;
	        case SqlBaseParser.STRING:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 1507;
	            this.match(SqlBaseParser.STRING);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	constantList() {
	    let localctx = new ConstantListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 70, SqlBaseParser.RULE_constantList);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1510;
	        this.match(SqlBaseParser.T__1);
	        this.state = 1511;
	        this.constant();
	        this.state = 1516;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===SqlBaseParser.T__2) {
	            this.state = 1512;
	            this.match(SqlBaseParser.T__2);
	            this.state = 1513;
	            this.constant();
	            this.state = 1518;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 1519;
	        this.match(SqlBaseParser.T__3);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	nestedConstantList() {
	    let localctx = new NestedConstantListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 72, SqlBaseParser.RULE_nestedConstantList);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1521;
	        this.match(SqlBaseParser.T__1);
	        this.state = 1522;
	        this.constantList();
	        this.state = 1527;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===SqlBaseParser.T__2) {
	            this.state = 1523;
	            this.match(SqlBaseParser.T__2);
	            this.state = 1524;
	            this.constantList();
	            this.state = 1529;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 1530;
	        this.match(SqlBaseParser.T__3);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	createFileFormat() {
	    let localctx = new CreateFileFormatContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 74, SqlBaseParser.RULE_createFileFormat);
	    try {
	        this.state = 1538;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,162,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1532;
	            this.match(SqlBaseParser.STORED);
	            this.state = 1533;
	            this.match(SqlBaseParser.AS);
	            this.state = 1534;
	            this.fileFormat();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1535;
	            this.match(SqlBaseParser.STORED);
	            this.state = 1536;
	            this.match(SqlBaseParser.BY);
	            this.state = 1537;
	            this.storageHandler();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	fileFormat() {
	    let localctx = new FileFormatContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 76, SqlBaseParser.RULE_fileFormat);
	    try {
	        this.state = 1545;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,163,this._ctx);
	        switch(la_) {
	        case 1:
	            localctx = new TableFileFormatContext(this, localctx);
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1540;
	            this.match(SqlBaseParser.INPUTFORMAT);
	            this.state = 1541;
	            localctx.inFmt = this.match(SqlBaseParser.STRING);
	            this.state = 1542;
	            this.match(SqlBaseParser.OUTPUTFORMAT);
	            this.state = 1543;
	            localctx.outFmt = this.match(SqlBaseParser.STRING);
	            break;

	        case 2:
	            localctx = new GenericFileFormatContext(this, localctx);
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1544;
	            this.identifier();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	storageHandler() {
	    let localctx = new StorageHandlerContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 78, SqlBaseParser.RULE_storageHandler);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1547;
	        this.match(SqlBaseParser.STRING);
	        this.state = 1551;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,164,this._ctx);
	        if(la_===1) {
	            this.state = 1548;
	            this.match(SqlBaseParser.WITH);
	            this.state = 1549;
	            this.match(SqlBaseParser.SERDEPROPERTIES);
	            this.state = 1550;
	            this.tablePropertyList();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	resource() {
	    let localctx = new ResourceContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 80, SqlBaseParser.RULE_resource);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1553;
	        this.identifier();
	        this.state = 1554;
	        this.match(SqlBaseParser.STRING);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	dmlStatementNoWith() {
	    let localctx = new DmlStatementNoWithContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 82, SqlBaseParser.RULE_dmlStatementNoWith);
	    var _la = 0; // Token type
	    try {
	        this.state = 1607;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case SqlBaseParser.INSERT:
	            localctx = new SingleInsertQueryContext(this, localctx);
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1556;
	            this.insertInto();
	            this.state = 1557;
	            this.queryTerm(0);
	            this.state = 1558;
	            this.queryOrganization();
	            break;
	        case SqlBaseParser.FROM:
	            localctx = new MultiInsertQueryContext(this, localctx);
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1560;
	            this.fromClause();
	            this.state = 1562; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            do {
	                this.state = 1561;
	                this.multiInsertQueryBody();
	                this.state = 1564; 
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            } while(_la===SqlBaseParser.INSERT);
	            break;
	        case SqlBaseParser.DELETE:
	            localctx = new DeleteFromTableContext(this, localctx);
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1566;
	            this.match(SqlBaseParser.DELETE);
	            this.state = 1567;
	            this.match(SqlBaseParser.FROM);
	            this.state = 1568;
	            this.multipartIdentifier();
	            this.state = 1569;
	            this.tableAlias();
	            this.state = 1571;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===SqlBaseParser.WHERE) {
	                this.state = 1570;
	                this.whereClause();
	            }

	            break;
	        case SqlBaseParser.UPDATE:
	            localctx = new UpdateTableContext(this, localctx);
	            this.enterOuterAlt(localctx, 4);
	            this.state = 1573;
	            this.match(SqlBaseParser.UPDATE);
	            this.state = 1574;
	            this.multipartIdentifier();
	            this.state = 1575;
	            this.tableAlias();
	            this.state = 1576;
	            this.setClause();
	            this.state = 1578;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===SqlBaseParser.WHERE) {
	                this.state = 1577;
	                this.whereClause();
	            }

	            break;
	        case SqlBaseParser.MERGE:
	            localctx = new MergeIntoTableContext(this, localctx);
	            this.enterOuterAlt(localctx, 5);
	            this.state = 1580;
	            this.match(SqlBaseParser.MERGE);
	            this.state = 1581;
	            this.match(SqlBaseParser.INTO);
	            this.state = 1582;
	            localctx.target = this.multipartIdentifier();
	            this.state = 1583;
	            localctx.targetAlias = this.tableAlias();
	            this.state = 1584;
	            this.match(SqlBaseParser.USING);
	            this.state = 1590;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,168,this._ctx);
	            switch(la_) {
	            case 1:
	                this.state = 1585;
	                localctx.source = this.multipartIdentifier();
	                break;

	            case 2:
	                this.state = 1586;
	                this.match(SqlBaseParser.T__1);
	                this.state = 1587;
	                localctx.sourceQuery = this.query();
	                this.state = 1588;
	                this.match(SqlBaseParser.T__3);
	                break;

	            }
	            this.state = 1592;
	            localctx.sourceAlias = this.tableAlias();
	            this.state = 1593;
	            this.match(SqlBaseParser.ON);
	            this.state = 1594;
	            localctx.mergeCondition = this.booleanExpression(0);
	            this.state = 1598;
	            this._errHandler.sync(this);
	            var _alt = this._interp.adaptivePredict(this._input,169,this._ctx)
	            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                if(_alt===1) {
	                    this.state = 1595;
	                    this.matchedClause(); 
	                }
	                this.state = 1600;
	                this._errHandler.sync(this);
	                _alt = this._interp.adaptivePredict(this._input,169,this._ctx);
	            }

	            this.state = 1604;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===SqlBaseParser.WHEN) {
	                this.state = 1601;
	                this.notMatchedClause();
	                this.state = 1606;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	queryOrganization() {
	    let localctx = new QueryOrganizationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 84, SqlBaseParser.RULE_queryOrganization);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1619;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,173,this._ctx);
	        if(la_===1) {
	            this.state = 1609;
	            this.match(SqlBaseParser.ORDER);
	            this.state = 1610;
	            this.match(SqlBaseParser.BY);
	            this.state = 1611;
	            localctx._sortItem = this.sortItem();
	            localctx.order.push(localctx._sortItem);
	            this.state = 1616;
	            this._errHandler.sync(this);
	            var _alt = this._interp.adaptivePredict(this._input,172,this._ctx)
	            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                if(_alt===1) {
	                    this.state = 1612;
	                    this.match(SqlBaseParser.T__2);
	                    this.state = 1613;
	                    localctx._sortItem = this.sortItem();
	                    localctx.order.push(localctx._sortItem); 
	                }
	                this.state = 1618;
	                this._errHandler.sync(this);
	                _alt = this._interp.adaptivePredict(this._input,172,this._ctx);
	            }


	        }
	        this.state = 1631;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,175,this._ctx);
	        if(la_===1) {
	            this.state = 1621;
	            this.match(SqlBaseParser.CLUSTER);
	            this.state = 1622;
	            this.match(SqlBaseParser.BY);
	            this.state = 1623;
	            localctx._expression = this.expression();
	            localctx.clusterBy.push(localctx._expression);
	            this.state = 1628;
	            this._errHandler.sync(this);
	            var _alt = this._interp.adaptivePredict(this._input,174,this._ctx)
	            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                if(_alt===1) {
	                    this.state = 1624;
	                    this.match(SqlBaseParser.T__2);
	                    this.state = 1625;
	                    localctx._expression = this.expression();
	                    localctx.clusterBy.push(localctx._expression); 
	                }
	                this.state = 1630;
	                this._errHandler.sync(this);
	                _alt = this._interp.adaptivePredict(this._input,174,this._ctx);
	            }


	        }
	        this.state = 1643;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,177,this._ctx);
	        if(la_===1) {
	            this.state = 1633;
	            this.match(SqlBaseParser.DISTRIBUTE);
	            this.state = 1634;
	            this.match(SqlBaseParser.BY);
	            this.state = 1635;
	            localctx._expression = this.expression();
	            localctx.distributeBy.push(localctx._expression);
	            this.state = 1640;
	            this._errHandler.sync(this);
	            var _alt = this._interp.adaptivePredict(this._input,176,this._ctx)
	            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                if(_alt===1) {
	                    this.state = 1636;
	                    this.match(SqlBaseParser.T__2);
	                    this.state = 1637;
	                    localctx._expression = this.expression();
	                    localctx.distributeBy.push(localctx._expression); 
	                }
	                this.state = 1642;
	                this._errHandler.sync(this);
	                _alt = this._interp.adaptivePredict(this._input,176,this._ctx);
	            }


	        }
	        this.state = 1655;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,179,this._ctx);
	        if(la_===1) {
	            this.state = 1645;
	            this.match(SqlBaseParser.SORT);
	            this.state = 1646;
	            this.match(SqlBaseParser.BY);
	            this.state = 1647;
	            localctx._sortItem = this.sortItem();
	            localctx.sort.push(localctx._sortItem);
	            this.state = 1652;
	            this._errHandler.sync(this);
	            var _alt = this._interp.adaptivePredict(this._input,178,this._ctx)
	            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                if(_alt===1) {
	                    this.state = 1648;
	                    this.match(SqlBaseParser.T__2);
	                    this.state = 1649;
	                    localctx._sortItem = this.sortItem();
	                    localctx.sort.push(localctx._sortItem); 
	                }
	                this.state = 1654;
	                this._errHandler.sync(this);
	                _alt = this._interp.adaptivePredict(this._input,178,this._ctx);
	            }


	        }
	        this.state = 1658;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,180,this._ctx);
	        if(la_===1) {
	            this.state = 1657;
	            this.windowClause();

	        }
	        this.state = 1665;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,182,this._ctx);
	        if(la_===1) {
	            this.state = 1660;
	            this.match(SqlBaseParser.LIMIT);
	            this.state = 1663;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,181,this._ctx);
	            switch(la_) {
	            case 1:
	                this.state = 1661;
	                this.match(SqlBaseParser.ALL);
	                break;

	            case 2:
	                this.state = 1662;
	                localctx.limit = this.expression();
	                break;

	            }

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	multiInsertQueryBody() {
	    let localctx = new MultiInsertQueryBodyContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 86, SqlBaseParser.RULE_multiInsertQueryBody);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1667;
	        this.insertInto();
	        this.state = 1668;
	        this.fromStatementBody();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}


	queryTerm(_p) {
		if(_p===undefined) {
		    _p = 0;
		}
	    const _parentctx = this._ctx;
	    const _parentState = this.state;
	    let localctx = new QueryTermContext(this, this._ctx, _parentState);
	    let _prevctx = localctx;
	    const _startState = 88;
	    this.enterRecursionRule(localctx, 88, SqlBaseParser.RULE_queryTerm, _p);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        localctx = new QueryTermDefaultContext(this, localctx);
	        this._ctx = localctx;
	        _prevctx = localctx;

	        this.state = 1671;
	        this.queryPrimary();
	        this._ctx.stop = this._input.LT(-1);
	        this.state = 1696;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,187,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                if(this._parseListeners!==null) {
	                    this.triggerExitRuleEvent();
	                }
	                _prevctx = localctx;
	                this.state = 1694;
	                this._errHandler.sync(this);
	                var la_ = this._interp.adaptivePredict(this._input,186,this._ctx);
	                switch(la_) {
	                case 1:
	                    localctx = new SetOperationContext(this, new QueryTermContext(this, _parentctx, _parentState));
	                    localctx.left = _prevctx;
	                    this.pushNewRecursionContext(localctx, _startState, SqlBaseParser.RULE_queryTerm);
	                    this.state = 1673;
	                    if (!( this.precpred(this._ctx, 3))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 3)");
	                    }
	                    this.state = 1674;
	                    if (!( legacy_setops_precedence_enabled)) {
	                        throw new antlr4.error.FailedPredicateException(this, "legacy_setops_precedence_enabled");
	                    }
	                    this.state = 1675;
	                    localctx.operator = this._input.LT(1);
	                    _la = this._input.LA(1);
	                    if(!(_la===SqlBaseParser.EXCEPT || _la===SqlBaseParser.INTERSECT || _la===SqlBaseParser.SETMINUS || _la===SqlBaseParser.UNION)) {
	                        localctx.operator = this._errHandler.recoverInline(this);
	                    }
	                    else {
	                    	this._errHandler.reportMatch(this);
	                        this.consume();
	                    }
	                    this.state = 1677;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                    if(_la===SqlBaseParser.ALL || _la===SqlBaseParser.DISTINCT) {
	                        this.state = 1676;
	                        this.setQuantifier();
	                    }

	                    this.state = 1679;
	                    localctx.right = this.queryTerm(4);
	                    break;

	                case 2:
	                    localctx = new SetOperationContext(this, new QueryTermContext(this, _parentctx, _parentState));
	                    localctx.left = _prevctx;
	                    this.pushNewRecursionContext(localctx, _startState, SqlBaseParser.RULE_queryTerm);
	                    this.state = 1680;
	                    if (!( this.precpred(this._ctx, 2))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 2)");
	                    }
	                    this.state = 1681;
	                    if (!( !legacy_setops_precedence_enabled)) {
	                        throw new antlr4.error.FailedPredicateException(this, "!legacy_setops_precedence_enabled");
	                    }
	                    this.state = 1682;
	                    localctx.operator = this.match(SqlBaseParser.INTERSECT);
	                    this.state = 1684;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                    if(_la===SqlBaseParser.ALL || _la===SqlBaseParser.DISTINCT) {
	                        this.state = 1683;
	                        this.setQuantifier();
	                    }

	                    this.state = 1686;
	                    localctx.right = this.queryTerm(3);
	                    break;

	                case 3:
	                    localctx = new SetOperationContext(this, new QueryTermContext(this, _parentctx, _parentState));
	                    localctx.left = _prevctx;
	                    this.pushNewRecursionContext(localctx, _startState, SqlBaseParser.RULE_queryTerm);
	                    this.state = 1687;
	                    if (!( this.precpred(this._ctx, 1))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
	                    }
	                    this.state = 1688;
	                    if (!( !legacy_setops_precedence_enabled)) {
	                        throw new antlr4.error.FailedPredicateException(this, "!legacy_setops_precedence_enabled");
	                    }
	                    this.state = 1689;
	                    localctx.operator = this._input.LT(1);
	                    _la = this._input.LA(1);
	                    if(!(_la===SqlBaseParser.EXCEPT || _la===SqlBaseParser.SETMINUS || _la===SqlBaseParser.UNION)) {
	                        localctx.operator = this._errHandler.recoverInline(this);
	                    }
	                    else {
	                    	this._errHandler.reportMatch(this);
	                        this.consume();
	                    }
	                    this.state = 1691;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                    if(_la===SqlBaseParser.ALL || _la===SqlBaseParser.DISTINCT) {
	                        this.state = 1690;
	                        this.setQuantifier();
	                    }

	                    this.state = 1693;
	                    localctx.right = this.queryTerm(2);
	                    break;

	                } 
	            }
	            this.state = 1698;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,187,this._ctx);
	        }

	    } catch( error) {
	        if(error instanceof antlr4.error.RecognitionException) {
		        localctx.exception = error;
		        this._errHandler.reportError(this, error);
		        this._errHandler.recover(this, error);
		    } else {
		    	throw error;
		    }
	    } finally {
	        this.unrollRecursionContexts(_parentctx)
	    }
	    return localctx;
	}



	queryPrimary() {
	    let localctx = new QueryPrimaryContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 90, SqlBaseParser.RULE_queryPrimary);
	    try {
	        this.state = 1708;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case SqlBaseParser.MAP:
	        case SqlBaseParser.REDUCE:
	        case SqlBaseParser.SELECT:
	            localctx = new QueryPrimaryDefaultContext(this, localctx);
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1699;
	            this.querySpecification();
	            break;
	        case SqlBaseParser.FROM:
	            localctx = new FromStmtContext(this, localctx);
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1700;
	            this.fromStatement();
	            break;
	        case SqlBaseParser.TABLE:
	            localctx = new TableContext(this, localctx);
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1701;
	            this.match(SqlBaseParser.TABLE);
	            this.state = 1702;
	            this.multipartIdentifier();
	            break;
	        case SqlBaseParser.VALUES:
	            localctx = new InlineTableDefault1Context(this, localctx);
	            this.enterOuterAlt(localctx, 4);
	            this.state = 1703;
	            this.inlineTable();
	            break;
	        case SqlBaseParser.T__1:
	            localctx = new SubqueryContext(this, localctx);
	            this.enterOuterAlt(localctx, 5);
	            this.state = 1704;
	            this.match(SqlBaseParser.T__1);
	            this.state = 1705;
	            this.query();
	            this.state = 1706;
	            this.match(SqlBaseParser.T__3);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	sortItem() {
	    let localctx = new SortItemContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 92, SqlBaseParser.RULE_sortItem);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1710;
	        this.expression();
	        this.state = 1712;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,189,this._ctx);
	        if(la_===1) {
	            this.state = 1711;
	            localctx.ordering = this._input.LT(1);
	            _la = this._input.LA(1);
	            if(!(_la===SqlBaseParser.ASC || _la===SqlBaseParser.DESC)) {
	                localctx.ordering = this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }

	        }
	        this.state = 1716;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,190,this._ctx);
	        if(la_===1) {
	            this.state = 1714;
	            this.match(SqlBaseParser.NULLS);
	            this.state = 1715;
	            localctx.nullOrder = this._input.LT(1);
	            _la = this._input.LA(1);
	            if(!(_la===SqlBaseParser.FIRST || _la===SqlBaseParser.LAST)) {
	                localctx.nullOrder = this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	fromStatement() {
	    let localctx = new FromStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 94, SqlBaseParser.RULE_fromStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1718;
	        this.fromClause();
	        this.state = 1720; 
	        this._errHandler.sync(this);
	        var _alt = 1;
	        do {
	        	switch (_alt) {
	        	case 1:
	        		this.state = 1719;
	        		this.fromStatementBody();
	        		break;
	        	default:
	        		throw new antlr4.error.NoViableAltException(this);
	        	}
	        	this.state = 1722; 
	        	this._errHandler.sync(this);
	        	_alt = this._interp.adaptivePredict(this._input,191, this._ctx);
	        } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	fromStatementBody() {
	    let localctx = new FromStatementBodyContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 96, SqlBaseParser.RULE_fromStatementBody);
	    try {
	        this.state = 1751;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,198,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1724;
	            this.transformClause();
	            this.state = 1726;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,192,this._ctx);
	            if(la_===1) {
	                this.state = 1725;
	                this.whereClause();

	            }
	            this.state = 1728;
	            this.queryOrganization();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1730;
	            this.selectClause();
	            this.state = 1734;
	            this._errHandler.sync(this);
	            var _alt = this._interp.adaptivePredict(this._input,193,this._ctx)
	            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                if(_alt===1) {
	                    this.state = 1731;
	                    this.lateralView(); 
	                }
	                this.state = 1736;
	                this._errHandler.sync(this);
	                _alt = this._interp.adaptivePredict(this._input,193,this._ctx);
	            }

	            this.state = 1738;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,194,this._ctx);
	            if(la_===1) {
	                this.state = 1737;
	                this.whereClause();

	            }
	            this.state = 1741;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,195,this._ctx);
	            if(la_===1) {
	                this.state = 1740;
	                this.aggregationClause();

	            }
	            this.state = 1744;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,196,this._ctx);
	            if(la_===1) {
	                this.state = 1743;
	                this.havingClause();

	            }
	            this.state = 1747;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,197,this._ctx);
	            if(la_===1) {
	                this.state = 1746;
	                this.windowClause();

	            }
	            this.state = 1749;
	            this.queryOrganization();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	querySpecification() {
	    let localctx = new QuerySpecificationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 98, SqlBaseParser.RULE_querySpecification);
	    try {
	        this.state = 1782;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,207,this._ctx);
	        switch(la_) {
	        case 1:
	            localctx = new TransformQuerySpecificationContext(this, localctx);
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1753;
	            this.transformClause();
	            this.state = 1755;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,199,this._ctx);
	            if(la_===1) {
	                this.state = 1754;
	                this.fromClause();

	            }
	            this.state = 1758;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,200,this._ctx);
	            if(la_===1) {
	                this.state = 1757;
	                this.whereClause();

	            }
	            break;

	        case 2:
	            localctx = new RegularQuerySpecificationContext(this, localctx);
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1760;
	            this.selectClause();
	            this.state = 1762;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,201,this._ctx);
	            if(la_===1) {
	                this.state = 1761;
	                this.fromClause();

	            }
	            this.state = 1767;
	            this._errHandler.sync(this);
	            var _alt = this._interp.adaptivePredict(this._input,202,this._ctx)
	            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                if(_alt===1) {
	                    this.state = 1764;
	                    this.lateralView(); 
	                }
	                this.state = 1769;
	                this._errHandler.sync(this);
	                _alt = this._interp.adaptivePredict(this._input,202,this._ctx);
	            }

	            this.state = 1771;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,203,this._ctx);
	            if(la_===1) {
	                this.state = 1770;
	                this.whereClause();

	            }
	            this.state = 1774;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,204,this._ctx);
	            if(la_===1) {
	                this.state = 1773;
	                this.aggregationClause();

	            }
	            this.state = 1777;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,205,this._ctx);
	            if(la_===1) {
	                this.state = 1776;
	                this.havingClause();

	            }
	            this.state = 1780;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,206,this._ctx);
	            if(la_===1) {
	                this.state = 1779;
	                this.windowClause();

	            }
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	transformClause() {
	    let localctx = new TransformClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 100, SqlBaseParser.RULE_transformClause);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1794;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case SqlBaseParser.SELECT:
	            this.state = 1784;
	            this.match(SqlBaseParser.SELECT);
	            this.state = 1785;
	            localctx.kind = this.match(SqlBaseParser.TRANSFORM);
	            this.state = 1786;
	            this.match(SqlBaseParser.T__1);
	            this.state = 1787;
	            this.namedExpressionSeq();
	            this.state = 1788;
	            this.match(SqlBaseParser.T__3);
	            break;
	        case SqlBaseParser.MAP:
	            this.state = 1790;
	            localctx.kind = this.match(SqlBaseParser.MAP);
	            this.state = 1791;
	            this.namedExpressionSeq();
	            break;
	        case SqlBaseParser.REDUCE:
	            this.state = 1792;
	            localctx.kind = this.match(SqlBaseParser.REDUCE);
	            this.state = 1793;
	            this.namedExpressionSeq();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	        this.state = 1797;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===SqlBaseParser.ROW) {
	            this.state = 1796;
	            localctx.inRowFormat = this.rowFormat();
	        }

	        this.state = 1801;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===SqlBaseParser.RECORDWRITER) {
	            this.state = 1799;
	            this.match(SqlBaseParser.RECORDWRITER);
	            this.state = 1800;
	            localctx.recordWriter = this.match(SqlBaseParser.STRING);
	        }

	        this.state = 1803;
	        this.match(SqlBaseParser.USING);
	        this.state = 1804;
	        localctx.script = this.match(SqlBaseParser.STRING);
	        this.state = 1817;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,213,this._ctx);
	        if(la_===1) {
	            this.state = 1805;
	            this.match(SqlBaseParser.AS);
	            this.state = 1815;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,212,this._ctx);
	            switch(la_) {
	            case 1:
	                this.state = 1806;
	                this.identifierSeq();
	                break;

	            case 2:
	                this.state = 1807;
	                this.colTypeList();
	                break;

	            case 3:
	                this.state = 1808;
	                this.match(SqlBaseParser.T__1);
	                this.state = 1811;
	                this._errHandler.sync(this);
	                var la_ = this._interp.adaptivePredict(this._input,211,this._ctx);
	                switch(la_) {
	                case 1:
	                    this.state = 1809;
	                    this.identifierSeq();
	                    break;

	                case 2:
	                    this.state = 1810;
	                    this.colTypeList();
	                    break;

	                }
	                this.state = 1813;
	                this.match(SqlBaseParser.T__3);
	                break;

	            }

	        }
	        this.state = 1820;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,214,this._ctx);
	        if(la_===1) {
	            this.state = 1819;
	            localctx.outRowFormat = this.rowFormat();

	        }
	        this.state = 1824;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,215,this._ctx);
	        if(la_===1) {
	            this.state = 1822;
	            this.match(SqlBaseParser.RECORDREADER);
	            this.state = 1823;
	            localctx.recordReader = this.match(SqlBaseParser.STRING);

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	selectClause() {
	    let localctx = new SelectClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 102, SqlBaseParser.RULE_selectClause);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1826;
	        this.match(SqlBaseParser.SELECT);
	        this.state = 1830;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,216,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 1827;
	                localctx._hint = this.hint();
	                localctx.hints.push(localctx._hint); 
	            }
	            this.state = 1832;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,216,this._ctx);
	        }

	        this.state = 1834;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,217,this._ctx);
	        if(la_===1) {
	            this.state = 1833;
	            this.setQuantifier();

	        }
	        this.state = 1836;
	        this.namedExpressionSeq();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	setClause() {
	    let localctx = new SetClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 104, SqlBaseParser.RULE_setClause);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1838;
	        this.match(SqlBaseParser.SET);
	        this.state = 1839;
	        this.assignmentList();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	matchedClause() {
	    let localctx = new MatchedClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 106, SqlBaseParser.RULE_matchedClause);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1841;
	        this.match(SqlBaseParser.WHEN);
	        this.state = 1842;
	        this.match(SqlBaseParser.MATCHED);
	        this.state = 1845;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===SqlBaseParser.AND) {
	            this.state = 1843;
	            this.match(SqlBaseParser.AND);
	            this.state = 1844;
	            localctx.matchedCond = this.booleanExpression(0);
	        }

	        this.state = 1847;
	        this.match(SqlBaseParser.THEN);
	        this.state = 1848;
	        this.matchedAction();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	notMatchedClause() {
	    let localctx = new NotMatchedClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 108, SqlBaseParser.RULE_notMatchedClause);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1850;
	        this.match(SqlBaseParser.WHEN);
	        this.state = 1851;
	        this.match(SqlBaseParser.NOT);
	        this.state = 1852;
	        this.match(SqlBaseParser.MATCHED);
	        this.state = 1855;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===SqlBaseParser.AND) {
	            this.state = 1853;
	            this.match(SqlBaseParser.AND);
	            this.state = 1854;
	            localctx.notMatchedCond = this.booleanExpression(0);
	        }

	        this.state = 1857;
	        this.match(SqlBaseParser.THEN);
	        this.state = 1858;
	        this.notMatchedAction();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	matchedAction() {
	    let localctx = new MatchedActionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 110, SqlBaseParser.RULE_matchedAction);
	    try {
	        this.state = 1867;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,220,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1860;
	            this.match(SqlBaseParser.DELETE);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1861;
	            this.match(SqlBaseParser.UPDATE);
	            this.state = 1862;
	            this.match(SqlBaseParser.SET);
	            this.state = 1863;
	            this.match(SqlBaseParser.ASTERISK);
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1864;
	            this.match(SqlBaseParser.UPDATE);
	            this.state = 1865;
	            this.match(SqlBaseParser.SET);
	            this.state = 1866;
	            this.assignmentList();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	notMatchedAction() {
	    let localctx = new NotMatchedActionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 112, SqlBaseParser.RULE_notMatchedAction);
	    var _la = 0; // Token type
	    try {
	        this.state = 1887;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,222,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1869;
	            this.match(SqlBaseParser.INSERT);
	            this.state = 1870;
	            this.match(SqlBaseParser.ASTERISK);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1871;
	            this.match(SqlBaseParser.INSERT);
	            this.state = 1872;
	            this.match(SqlBaseParser.T__1);
	            this.state = 1873;
	            localctx.columns = this.multipartIdentifierList();
	            this.state = 1874;
	            this.match(SqlBaseParser.T__3);
	            this.state = 1875;
	            this.match(SqlBaseParser.VALUES);
	            this.state = 1876;
	            this.match(SqlBaseParser.T__1);
	            this.state = 1877;
	            this.expression();
	            this.state = 1882;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===SqlBaseParser.T__2) {
	                this.state = 1878;
	                this.match(SqlBaseParser.T__2);
	                this.state = 1879;
	                this.expression();
	                this.state = 1884;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 1885;
	            this.match(SqlBaseParser.T__3);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	assignmentList() {
	    let localctx = new AssignmentListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 114, SqlBaseParser.RULE_assignmentList);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1889;
	        this.assignment();
	        this.state = 1894;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===SqlBaseParser.T__2) {
	            this.state = 1890;
	            this.match(SqlBaseParser.T__2);
	            this.state = 1891;
	            this.assignment();
	            this.state = 1896;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	assignment() {
	    let localctx = new AssignmentContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 116, SqlBaseParser.RULE_assignment);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1897;
	        localctx.key = this.multipartIdentifier();
	        this.state = 1898;
	        this.match(SqlBaseParser.EQ);
	        this.state = 1899;
	        localctx.value = this.expression();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	whereClause() {
	    let localctx = new WhereClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 118, SqlBaseParser.RULE_whereClause);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1901;
	        this.match(SqlBaseParser.WHERE);
	        this.state = 1902;
	        this.booleanExpression(0);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	havingClause() {
	    let localctx = new HavingClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 120, SqlBaseParser.RULE_havingClause);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1904;
	        this.match(SqlBaseParser.HAVING);
	        this.state = 1905;
	        this.booleanExpression(0);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	hint() {
	    let localctx = new HintContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 122, SqlBaseParser.RULE_hint);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1907;
	        this.match(SqlBaseParser.T__5);
	        this.state = 1908;
	        localctx._hintStatement = this.hintStatement();
	        localctx.hintStatements.push(localctx._hintStatement);
	        this.state = 1915;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,225,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 1910;
	                this._errHandler.sync(this);
	                var la_ = this._interp.adaptivePredict(this._input,224,this._ctx);
	                if(la_===1) {
	                    this.state = 1909;
	                    this.match(SqlBaseParser.T__2);

	                }
	                this.state = 1912;
	                localctx._hintStatement = this.hintStatement();
	                localctx.hintStatements.push(localctx._hintStatement); 
	            }
	            this.state = 1917;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,225,this._ctx);
	        }

	        this.state = 1918;
	        this.match(SqlBaseParser.T__6);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	hintStatement() {
	    let localctx = new HintStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 124, SqlBaseParser.RULE_hintStatement);
	    var _la = 0; // Token type
	    try {
	        this.state = 1933;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,227,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1920;
	            localctx.hintName = this.identifier();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1921;
	            localctx.hintName = this.identifier();
	            this.state = 1922;
	            this.match(SqlBaseParser.T__1);
	            this.state = 1923;
	            localctx._primaryExpression = this.primaryExpression(0);
	            localctx.parameters.push(localctx._primaryExpression);
	            this.state = 1928;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===SqlBaseParser.T__2) {
	                this.state = 1924;
	                this.match(SqlBaseParser.T__2);
	                this.state = 1925;
	                localctx._primaryExpression = this.primaryExpression(0);
	                localctx.parameters.push(localctx._primaryExpression);
	                this.state = 1930;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 1931;
	            this.match(SqlBaseParser.T__3);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	fromClause() {
	    let localctx = new FromClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 126, SqlBaseParser.RULE_fromClause);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1935;
	        this.match(SqlBaseParser.FROM);
	        this.state = 1936;
	        this.relation();
	        this.state = 1941;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,228,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 1937;
	                this.match(SqlBaseParser.T__2);
	                this.state = 1938;
	                this.relation(); 
	            }
	            this.state = 1943;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,228,this._ctx);
	        }

	        this.state = 1947;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,229,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 1944;
	                this.lateralView(); 
	            }
	            this.state = 1949;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,229,this._ctx);
	        }

	        this.state = 1951;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,230,this._ctx);
	        if(la_===1) {
	            this.state = 1950;
	            this.pivotClause();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	aggregationClause() {
	    let localctx = new AggregationClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 128, SqlBaseParser.RULE_aggregationClause);
	    var _la = 0; // Token type
	    try {
	        this.state = 1992;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,235,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1953;
	            this.match(SqlBaseParser.GROUP);
	            this.state = 1954;
	            this.match(SqlBaseParser.BY);
	            this.state = 1955;
	            localctx._groupByClause = this.groupByClause();
	            localctx.groupingExpressionsWithGroupingAnalytics.push(localctx._groupByClause);
	            this.state = 1960;
	            this._errHandler.sync(this);
	            var _alt = this._interp.adaptivePredict(this._input,231,this._ctx)
	            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                if(_alt===1) {
	                    this.state = 1956;
	                    this.match(SqlBaseParser.T__2);
	                    this.state = 1957;
	                    localctx._groupByClause = this.groupByClause();
	                    localctx.groupingExpressionsWithGroupingAnalytics.push(localctx._groupByClause); 
	                }
	                this.state = 1962;
	                this._errHandler.sync(this);
	                _alt = this._interp.adaptivePredict(this._input,231,this._ctx);
	            }

	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1963;
	            this.match(SqlBaseParser.GROUP);
	            this.state = 1964;
	            this.match(SqlBaseParser.BY);
	            this.state = 1965;
	            localctx._expression = this.expression();
	            localctx.groupingExpressions.push(localctx._expression);
	            this.state = 1970;
	            this._errHandler.sync(this);
	            var _alt = this._interp.adaptivePredict(this._input,232,this._ctx)
	            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                if(_alt===1) {
	                    this.state = 1966;
	                    this.match(SqlBaseParser.T__2);
	                    this.state = 1967;
	                    localctx._expression = this.expression();
	                    localctx.groupingExpressions.push(localctx._expression); 
	                }
	                this.state = 1972;
	                this._errHandler.sync(this);
	                _alt = this._interp.adaptivePredict(this._input,232,this._ctx);
	            }

	            this.state = 1990;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,234,this._ctx);
	            if(la_===1) {
	                this.state = 1973;
	                this.match(SqlBaseParser.WITH);
	                this.state = 1974;
	                localctx.kind = this.match(SqlBaseParser.ROLLUP);

	            } else if(la_===2) {
	                this.state = 1975;
	                this.match(SqlBaseParser.WITH);
	                this.state = 1976;
	                localctx.kind = this.match(SqlBaseParser.CUBE);

	            } else if(la_===3) {
	                this.state = 1977;
	                localctx.kind = this.match(SqlBaseParser.GROUPING);
	                this.state = 1978;
	                this.match(SqlBaseParser.SETS);
	                this.state = 1979;
	                this.match(SqlBaseParser.T__1);
	                this.state = 1980;
	                this.groupingSet();
	                this.state = 1985;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                while(_la===SqlBaseParser.T__2) {
	                    this.state = 1981;
	                    this.match(SqlBaseParser.T__2);
	                    this.state = 1982;
	                    this.groupingSet();
	                    this.state = 1987;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                }
	                this.state = 1988;
	                this.match(SqlBaseParser.T__3);

	            }
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	groupByClause() {
	    let localctx = new GroupByClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 130, SqlBaseParser.RULE_groupByClause);
	    try {
	        this.state = 1996;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,236,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1994;
	            this.groupingAnalytics();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1995;
	            this.expression();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	groupingAnalytics() {
	    let localctx = new GroupingAnalyticsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 132, SqlBaseParser.RULE_groupingAnalytics);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2002;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case SqlBaseParser.ROLLUP:
	            this.state = 1998;
	            this.match(SqlBaseParser.ROLLUP);
	            break;
	        case SqlBaseParser.CUBE:
	            this.state = 1999;
	            this.match(SqlBaseParser.CUBE);
	            break;
	        case SqlBaseParser.GROUPING:
	            this.state = 2000;
	            this.match(SqlBaseParser.GROUPING);
	            this.state = 2001;
	            this.match(SqlBaseParser.SETS);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	        this.state = 2004;
	        this.match(SqlBaseParser.T__1);
	        this.state = 2005;
	        this.groupingSet();
	        this.state = 2010;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===SqlBaseParser.T__2) {
	            this.state = 2006;
	            this.match(SqlBaseParser.T__2);
	            this.state = 2007;
	            this.groupingSet();
	            this.state = 2012;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 2013;
	        this.match(SqlBaseParser.T__3);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	groupingSet() {
	    let localctx = new GroupingSetContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 134, SqlBaseParser.RULE_groupingSet);
	    var _la = 0; // Token type
	    try {
	        this.state = 2028;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,241,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2015;
	            this.match(SqlBaseParser.T__1);
	            this.state = 2024;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,240,this._ctx);
	            if(la_===1) {
	                this.state = 2016;
	                this.expression();
	                this.state = 2021;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                while(_la===SqlBaseParser.T__2) {
	                    this.state = 2017;
	                    this.match(SqlBaseParser.T__2);
	                    this.state = 2018;
	                    this.expression();
	                    this.state = 2023;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                }

	            }
	            this.state = 2026;
	            this.match(SqlBaseParser.T__3);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2027;
	            this.expression();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	pivotClause() {
	    let localctx = new PivotClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 136, SqlBaseParser.RULE_pivotClause);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2030;
	        this.match(SqlBaseParser.PIVOT);
	        this.state = 2031;
	        this.match(SqlBaseParser.T__1);
	        this.state = 2032;
	        localctx.aggregates = this.namedExpressionSeq();
	        this.state = 2033;
	        this.match(SqlBaseParser.FOR);
	        this.state = 2034;
	        this.pivotColumn();
	        this.state = 2035;
	        this.match(SqlBaseParser.IN);
	        this.state = 2036;
	        this.match(SqlBaseParser.T__1);
	        this.state = 2037;
	        localctx._pivotValue = this.pivotValue();
	        localctx.pivotValues.push(localctx._pivotValue);
	        this.state = 2042;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===SqlBaseParser.T__2) {
	            this.state = 2038;
	            this.match(SqlBaseParser.T__2);
	            this.state = 2039;
	            localctx._pivotValue = this.pivotValue();
	            localctx.pivotValues.push(localctx._pivotValue);
	            this.state = 2044;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 2045;
	        this.match(SqlBaseParser.T__3);
	        this.state = 2046;
	        this.match(SqlBaseParser.T__3);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	pivotColumn() {
	    let localctx = new PivotColumnContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 138, SqlBaseParser.RULE_pivotColumn);
	    var _la = 0; // Token type
	    try {
	        this.state = 2060;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,244,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2048;
	            localctx._identifier = this.identifier();
	            localctx.identifiers.push(localctx._identifier);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2049;
	            this.match(SqlBaseParser.T__1);
	            this.state = 2050;
	            localctx._identifier = this.identifier();
	            localctx.identifiers.push(localctx._identifier);
	            this.state = 2055;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===SqlBaseParser.T__2) {
	                this.state = 2051;
	                this.match(SqlBaseParser.T__2);
	                this.state = 2052;
	                localctx._identifier = this.identifier();
	                localctx.identifiers.push(localctx._identifier);
	                this.state = 2057;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 2058;
	            this.match(SqlBaseParser.T__3);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	pivotValue() {
	    let localctx = new PivotValueContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 140, SqlBaseParser.RULE_pivotValue);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2062;
	        this.expression();
	        this.state = 2067;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,246,this._ctx);
	        if(la_===1) {
	            this.state = 2064;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,245,this._ctx);
	            if(la_===1) {
	                this.state = 2063;
	                this.match(SqlBaseParser.AS);

	            }
	            this.state = 2066;
	            this.identifier();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	lateralView() {
	    let localctx = new LateralViewContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 142, SqlBaseParser.RULE_lateralView);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2069;
	        this.match(SqlBaseParser.LATERAL);
	        this.state = 2070;
	        this.match(SqlBaseParser.VIEW);
	        this.state = 2072;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,247,this._ctx);
	        if(la_===1) {
	            this.state = 2071;
	            this.match(SqlBaseParser.OUTER);

	        }
	        this.state = 2074;
	        this.qualifiedName();
	        this.state = 2075;
	        this.match(SqlBaseParser.T__1);
	        this.state = 2084;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,249,this._ctx);
	        if(la_===1) {
	            this.state = 2076;
	            this.expression();
	            this.state = 2081;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===SqlBaseParser.T__2) {
	                this.state = 2077;
	                this.match(SqlBaseParser.T__2);
	                this.state = 2078;
	                this.expression();
	                this.state = 2083;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }

	        }
	        this.state = 2086;
	        this.match(SqlBaseParser.T__3);
	        this.state = 2087;
	        localctx.tblName = this.identifier();
	        this.state = 2099;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,252,this._ctx);
	        if(la_===1) {
	            this.state = 2089;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,250,this._ctx);
	            if(la_===1) {
	                this.state = 2088;
	                this.match(SqlBaseParser.AS);

	            }
	            this.state = 2091;
	            localctx._identifier = this.identifier();
	            localctx.colName.push(localctx._identifier);
	            this.state = 2096;
	            this._errHandler.sync(this);
	            var _alt = this._interp.adaptivePredict(this._input,251,this._ctx)
	            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                if(_alt===1) {
	                    this.state = 2092;
	                    this.match(SqlBaseParser.T__2);
	                    this.state = 2093;
	                    localctx._identifier = this.identifier();
	                    localctx.colName.push(localctx._identifier); 
	                }
	                this.state = 2098;
	                this._errHandler.sync(this);
	                _alt = this._interp.adaptivePredict(this._input,251,this._ctx);
	            }


	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	setQuantifier() {
	    let localctx = new SetQuantifierContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 144, SqlBaseParser.RULE_setQuantifier);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2101;
	        _la = this._input.LA(1);
	        if(!(_la===SqlBaseParser.ALL || _la===SqlBaseParser.DISTINCT)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	relation() {
	    let localctx = new RelationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 146, SqlBaseParser.RULE_relation);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2103;
	        this.relationPrimary();
	        this.state = 2107;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,253,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 2104;
	                this.joinRelation(); 
	            }
	            this.state = 2109;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,253,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	joinRelation() {
	    let localctx = new JoinRelationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 148, SqlBaseParser.RULE_joinRelation);
	    try {
	        this.state = 2121;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case SqlBaseParser.ANTI:
	        case SqlBaseParser.CROSS:
	        case SqlBaseParser.FULL:
	        case SqlBaseParser.INNER:
	        case SqlBaseParser.JOIN:
	        case SqlBaseParser.LEFT:
	        case SqlBaseParser.RIGHT:
	        case SqlBaseParser.SEMI:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2110;
	            this.joinType();
	            this.state = 2111;
	            this.match(SqlBaseParser.JOIN);
	            this.state = 2112;
	            localctx.right = this.relationPrimary();
	            this.state = 2114;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,254,this._ctx);
	            if(la_===1) {
	                this.state = 2113;
	                this.joinCriteria();

	            }
	            break;
	        case SqlBaseParser.NATURAL:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2116;
	            this.match(SqlBaseParser.NATURAL);
	            this.state = 2117;
	            this.joinType();
	            this.state = 2118;
	            this.match(SqlBaseParser.JOIN);
	            this.state = 2119;
	            localctx.right = this.relationPrimary();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	joinType() {
	    let localctx = new JoinTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 150, SqlBaseParser.RULE_joinType);
	    var _la = 0; // Token type
	    try {
	        this.state = 2147;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,262,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2124;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===SqlBaseParser.INNER) {
	                this.state = 2123;
	                this.match(SqlBaseParser.INNER);
	            }

	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2126;
	            this.match(SqlBaseParser.CROSS);
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 2127;
	            this.match(SqlBaseParser.LEFT);
	            this.state = 2129;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===SqlBaseParser.OUTER) {
	                this.state = 2128;
	                this.match(SqlBaseParser.OUTER);
	            }

	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 2132;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===SqlBaseParser.LEFT) {
	                this.state = 2131;
	                this.match(SqlBaseParser.LEFT);
	            }

	            this.state = 2134;
	            this.match(SqlBaseParser.SEMI);
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 2135;
	            this.match(SqlBaseParser.RIGHT);
	            this.state = 2137;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===SqlBaseParser.OUTER) {
	                this.state = 2136;
	                this.match(SqlBaseParser.OUTER);
	            }

	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 2139;
	            this.match(SqlBaseParser.FULL);
	            this.state = 2141;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===SqlBaseParser.OUTER) {
	                this.state = 2140;
	                this.match(SqlBaseParser.OUTER);
	            }

	            break;

	        case 7:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 2144;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===SqlBaseParser.LEFT) {
	                this.state = 2143;
	                this.match(SqlBaseParser.LEFT);
	            }

	            this.state = 2146;
	            this.match(SqlBaseParser.ANTI);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	joinCriteria() {
	    let localctx = new JoinCriteriaContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 152, SqlBaseParser.RULE_joinCriteria);
	    try {
	        this.state = 2153;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case SqlBaseParser.ON:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2149;
	            this.match(SqlBaseParser.ON);
	            this.state = 2150;
	            this.booleanExpression(0);
	            break;
	        case SqlBaseParser.USING:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2151;
	            this.match(SqlBaseParser.USING);
	            this.state = 2152;
	            this.identifierList();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	sample() {
	    let localctx = new SampleContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 154, SqlBaseParser.RULE_sample);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2155;
	        this.match(SqlBaseParser.TABLESAMPLE);
	        this.state = 2156;
	        this.match(SqlBaseParser.T__1);
	        this.state = 2158;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,264,this._ctx);
	        if(la_===1) {
	            this.state = 2157;
	            this.sampleMethod();

	        }
	        this.state = 2160;
	        this.match(SqlBaseParser.T__3);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	sampleMethod() {
	    let localctx = new SampleMethodContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 156, SqlBaseParser.RULE_sampleMethod);
	    var _la = 0; // Token type
	    try {
	        this.state = 2186;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,268,this._ctx);
	        switch(la_) {
	        case 1:
	            localctx = new SampleByPercentileContext(this, localctx);
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2163;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===SqlBaseParser.MINUS) {
	                this.state = 2162;
	                localctx.negativeSign = this.match(SqlBaseParser.MINUS);
	            }

	            this.state = 2165;
	            localctx.percentage = this._input.LT(1);
	            _la = this._input.LA(1);
	            if(!(_la===SqlBaseParser.INTEGER_VALUE || _la===SqlBaseParser.DECIMAL_VALUE)) {
	                localctx.percentage = this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 2166;
	            this.match(SqlBaseParser.PERCENTLIT);
	            break;

	        case 2:
	            localctx = new SampleByRowsContext(this, localctx);
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2167;
	            this.expression();
	            this.state = 2168;
	            this.match(SqlBaseParser.ROWS);
	            break;

	        case 3:
	            localctx = new SampleByBucketContext(this, localctx);
	            this.enterOuterAlt(localctx, 3);
	            this.state = 2170;
	            localctx.sampleType = this.match(SqlBaseParser.BUCKET);
	            this.state = 2171;
	            localctx.numerator = this.match(SqlBaseParser.INTEGER_VALUE);
	            this.state = 2172;
	            this.match(SqlBaseParser.OUT);
	            this.state = 2173;
	            this.match(SqlBaseParser.OF);
	            this.state = 2174;
	            localctx.denominator = this.match(SqlBaseParser.INTEGER_VALUE);
	            this.state = 2183;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===SqlBaseParser.ON) {
	                this.state = 2175;
	                this.match(SqlBaseParser.ON);
	                this.state = 2181;
	                this._errHandler.sync(this);
	                var la_ = this._interp.adaptivePredict(this._input,266,this._ctx);
	                switch(la_) {
	                case 1:
	                    this.state = 2176;
	                    this.identifier();
	                    break;

	                case 2:
	                    this.state = 2177;
	                    this.qualifiedName();
	                    this.state = 2178;
	                    this.match(SqlBaseParser.T__1);
	                    this.state = 2179;
	                    this.match(SqlBaseParser.T__3);
	                    break;

	                }
	            }

	            break;

	        case 4:
	            localctx = new SampleByBytesContext(this, localctx);
	            this.enterOuterAlt(localctx, 4);
	            this.state = 2185;
	            localctx.bytes = this.expression();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	identifierList() {
	    let localctx = new IdentifierListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 158, SqlBaseParser.RULE_identifierList);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2188;
	        this.match(SqlBaseParser.T__1);
	        this.state = 2189;
	        this.identifierSeq();
	        this.state = 2190;
	        this.match(SqlBaseParser.T__3);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	identifierSeq() {
	    let localctx = new IdentifierSeqContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 160, SqlBaseParser.RULE_identifierSeq);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2192;
	        localctx._errorCapturingIdentifier = this.errorCapturingIdentifier();
	        localctx.ident.push(localctx._errorCapturingIdentifier);
	        this.state = 2197;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,269,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 2193;
	                this.match(SqlBaseParser.T__2);
	                this.state = 2194;
	                localctx._errorCapturingIdentifier = this.errorCapturingIdentifier();
	                localctx.ident.push(localctx._errorCapturingIdentifier); 
	            }
	            this.state = 2199;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,269,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	orderedIdentifierList() {
	    let localctx = new OrderedIdentifierListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 162, SqlBaseParser.RULE_orderedIdentifierList);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2200;
	        this.match(SqlBaseParser.T__1);
	        this.state = 2201;
	        this.orderedIdentifier();
	        this.state = 2206;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===SqlBaseParser.T__2) {
	            this.state = 2202;
	            this.match(SqlBaseParser.T__2);
	            this.state = 2203;
	            this.orderedIdentifier();
	            this.state = 2208;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 2209;
	        this.match(SqlBaseParser.T__3);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	orderedIdentifier() {
	    let localctx = new OrderedIdentifierContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 164, SqlBaseParser.RULE_orderedIdentifier);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2211;
	        localctx.ident = this.errorCapturingIdentifier();
	        this.state = 2213;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===SqlBaseParser.ASC || _la===SqlBaseParser.DESC) {
	            this.state = 2212;
	            localctx.ordering = this._input.LT(1);
	            _la = this._input.LA(1);
	            if(!(_la===SqlBaseParser.ASC || _la===SqlBaseParser.DESC)) {
	                localctx.ordering = this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	identifierCommentList() {
	    let localctx = new IdentifierCommentListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 166, SqlBaseParser.RULE_identifierCommentList);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2215;
	        this.match(SqlBaseParser.T__1);
	        this.state = 2216;
	        this.identifierComment();
	        this.state = 2221;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===SqlBaseParser.T__2) {
	            this.state = 2217;
	            this.match(SqlBaseParser.T__2);
	            this.state = 2218;
	            this.identifierComment();
	            this.state = 2223;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 2224;
	        this.match(SqlBaseParser.T__3);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	identifierComment() {
	    let localctx = new IdentifierCommentContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 168, SqlBaseParser.RULE_identifierComment);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2226;
	        this.identifier();
	        this.state = 2228;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===SqlBaseParser.COMMENT) {
	            this.state = 2227;
	            this.commentSpec();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	relationPrimary() {
	    let localctx = new RelationPrimaryContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 170, SqlBaseParser.RULE_relationPrimary);
	    try {
	        this.state = 2254;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,277,this._ctx);
	        switch(la_) {
	        case 1:
	            localctx = new TableNameContext(this, localctx);
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2230;
	            this.multipartIdentifier();
	            this.state = 2232;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,274,this._ctx);
	            if(la_===1) {
	                this.state = 2231;
	                this.sample();

	            }
	            this.state = 2234;
	            this.tableAlias();
	            break;

	        case 2:
	            localctx = new AliasedQueryContext(this, localctx);
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2236;
	            this.match(SqlBaseParser.T__1);
	            this.state = 2237;
	            this.query();
	            this.state = 2238;
	            this.match(SqlBaseParser.T__3);
	            this.state = 2240;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,275,this._ctx);
	            if(la_===1) {
	                this.state = 2239;
	                this.sample();

	            }
	            this.state = 2242;
	            this.tableAlias();
	            break;

	        case 3:
	            localctx = new AliasedRelationContext(this, localctx);
	            this.enterOuterAlt(localctx, 3);
	            this.state = 2244;
	            this.match(SqlBaseParser.T__1);
	            this.state = 2245;
	            this.relation();
	            this.state = 2246;
	            this.match(SqlBaseParser.T__3);
	            this.state = 2248;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,276,this._ctx);
	            if(la_===1) {
	                this.state = 2247;
	                this.sample();

	            }
	            this.state = 2250;
	            this.tableAlias();
	            break;

	        case 4:
	            localctx = new InlineTableDefault2Context(this, localctx);
	            this.enterOuterAlt(localctx, 4);
	            this.state = 2252;
	            this.inlineTable();
	            break;

	        case 5:
	            localctx = new TableValuedFunctionContext(this, localctx);
	            this.enterOuterAlt(localctx, 5);
	            this.state = 2253;
	            this.functionTable();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	inlineTable() {
	    let localctx = new InlineTableContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 172, SqlBaseParser.RULE_inlineTable);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2256;
	        this.match(SqlBaseParser.VALUES);
	        this.state = 2257;
	        this.expression();
	        this.state = 2262;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,278,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 2258;
	                this.match(SqlBaseParser.T__2);
	                this.state = 2259;
	                this.expression(); 
	            }
	            this.state = 2264;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,278,this._ctx);
	        }

	        this.state = 2265;
	        this.tableAlias();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	functionTable() {
	    let localctx = new FunctionTableContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 174, SqlBaseParser.RULE_functionTable);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2267;
	        localctx.funcName = this.functionName();
	        this.state = 2268;
	        this.match(SqlBaseParser.T__1);
	        this.state = 2277;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,280,this._ctx);
	        if(la_===1) {
	            this.state = 2269;
	            this.expression();
	            this.state = 2274;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===SqlBaseParser.T__2) {
	                this.state = 2270;
	                this.match(SqlBaseParser.T__2);
	                this.state = 2271;
	                this.expression();
	                this.state = 2276;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }

	        }
	        this.state = 2279;
	        this.match(SqlBaseParser.T__3);
	        this.state = 2280;
	        this.tableAlias();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	tableAlias() {
	    let localctx = new TableAliasContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 176, SqlBaseParser.RULE_tableAlias);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2289;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,283,this._ctx);
	        if(la_===1) {
	            this.state = 2283;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,281,this._ctx);
	            if(la_===1) {
	                this.state = 2282;
	                this.match(SqlBaseParser.AS);

	            }
	            this.state = 2285;
	            this.strictIdentifier();
	            this.state = 2287;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,282,this._ctx);
	            if(la_===1) {
	                this.state = 2286;
	                this.identifierList();

	            }

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	rowFormat() {
	    let localctx = new RowFormatContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 178, SqlBaseParser.RULE_rowFormat);
	    try {
	        this.state = 2340;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,291,this._ctx);
	        switch(la_) {
	        case 1:
	            localctx = new RowFormatSerdeContext(this, localctx);
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2291;
	            this.match(SqlBaseParser.ROW);
	            this.state = 2292;
	            this.match(SqlBaseParser.FORMAT);
	            this.state = 2293;
	            this.match(SqlBaseParser.SERDE);
	            this.state = 2294;
	            localctx.name = this.match(SqlBaseParser.STRING);
	            this.state = 2298;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,284,this._ctx);
	            if(la_===1) {
	                this.state = 2295;
	                this.match(SqlBaseParser.WITH);
	                this.state = 2296;
	                this.match(SqlBaseParser.SERDEPROPERTIES);
	                this.state = 2297;
	                localctx.props = this.tablePropertyList();

	            }
	            break;

	        case 2:
	            localctx = new RowFormatDelimitedContext(this, localctx);
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2300;
	            this.match(SqlBaseParser.ROW);
	            this.state = 2301;
	            this.match(SqlBaseParser.FORMAT);
	            this.state = 2302;
	            this.match(SqlBaseParser.DELIMITED);
	            this.state = 2312;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,286,this._ctx);
	            if(la_===1) {
	                this.state = 2303;
	                this.match(SqlBaseParser.FIELDS);
	                this.state = 2304;
	                this.match(SqlBaseParser.TERMINATED);
	                this.state = 2305;
	                this.match(SqlBaseParser.BY);
	                this.state = 2306;
	                localctx.fieldsTerminatedBy = this.match(SqlBaseParser.STRING);
	                this.state = 2310;
	                this._errHandler.sync(this);
	                var la_ = this._interp.adaptivePredict(this._input,285,this._ctx);
	                if(la_===1) {
	                    this.state = 2307;
	                    this.match(SqlBaseParser.ESCAPED);
	                    this.state = 2308;
	                    this.match(SqlBaseParser.BY);
	                    this.state = 2309;
	                    localctx.escapedBy = this.match(SqlBaseParser.STRING);

	                }

	            }
	            this.state = 2319;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,287,this._ctx);
	            if(la_===1) {
	                this.state = 2314;
	                this.match(SqlBaseParser.COLLECTION);
	                this.state = 2315;
	                this.match(SqlBaseParser.ITEMS);
	                this.state = 2316;
	                this.match(SqlBaseParser.TERMINATED);
	                this.state = 2317;
	                this.match(SqlBaseParser.BY);
	                this.state = 2318;
	                localctx.collectionItemsTerminatedBy = this.match(SqlBaseParser.STRING);

	            }
	            this.state = 2326;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,288,this._ctx);
	            if(la_===1) {
	                this.state = 2321;
	                this.match(SqlBaseParser.MAP);
	                this.state = 2322;
	                this.match(SqlBaseParser.KEYS);
	                this.state = 2323;
	                this.match(SqlBaseParser.TERMINATED);
	                this.state = 2324;
	                this.match(SqlBaseParser.BY);
	                this.state = 2325;
	                localctx.keysTerminatedBy = this.match(SqlBaseParser.STRING);

	            }
	            this.state = 2332;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,289,this._ctx);
	            if(la_===1) {
	                this.state = 2328;
	                this.match(SqlBaseParser.LINES);
	                this.state = 2329;
	                this.match(SqlBaseParser.TERMINATED);
	                this.state = 2330;
	                this.match(SqlBaseParser.BY);
	                this.state = 2331;
	                localctx.linesSeparatedBy = this.match(SqlBaseParser.STRING);

	            }
	            this.state = 2338;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,290,this._ctx);
	            if(la_===1) {
	                this.state = 2334;
	                this.match(SqlBaseParser.NULL);
	                this.state = 2335;
	                this.match(SqlBaseParser.DEFINED);
	                this.state = 2336;
	                this.match(SqlBaseParser.AS);
	                this.state = 2337;
	                localctx.nullDefinedAs = this.match(SqlBaseParser.STRING);

	            }
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	multipartIdentifierList() {
	    let localctx = new MultipartIdentifierListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 180, SqlBaseParser.RULE_multipartIdentifierList);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2342;
	        this.multipartIdentifier();
	        this.state = 2347;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===SqlBaseParser.T__2) {
	            this.state = 2343;
	            this.match(SqlBaseParser.T__2);
	            this.state = 2344;
	            this.multipartIdentifier();
	            this.state = 2349;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	multipartIdentifier() {
	    let localctx = new MultipartIdentifierContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 182, SqlBaseParser.RULE_multipartIdentifier);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2350;
	        localctx._errorCapturingIdentifier = this.errorCapturingIdentifier();
	        localctx.parts.push(localctx._errorCapturingIdentifier);
	        this.state = 2355;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,293,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 2351;
	                this.match(SqlBaseParser.T__4);
	                this.state = 2352;
	                localctx._errorCapturingIdentifier = this.errorCapturingIdentifier();
	                localctx.parts.push(localctx._errorCapturingIdentifier); 
	            }
	            this.state = 2357;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,293,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	tableIdentifier() {
	    let localctx = new TableIdentifierContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 184, SqlBaseParser.RULE_tableIdentifier);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2361;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,294,this._ctx);
	        if(la_===1) {
	            this.state = 2358;
	            localctx.db = this.errorCapturingIdentifier();
	            this.state = 2359;
	            this.match(SqlBaseParser.T__4);

	        }
	        this.state = 2363;
	        localctx.table = this.errorCapturingIdentifier();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	functionIdentifier() {
	    let localctx = new FunctionIdentifierContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 186, SqlBaseParser.RULE_functionIdentifier);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2368;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,295,this._ctx);
	        if(la_===1) {
	            this.state = 2365;
	            localctx.db = this.errorCapturingIdentifier();
	            this.state = 2366;
	            this.match(SqlBaseParser.T__4);

	        }
	        this.state = 2370;
	        localctx.func = this.errorCapturingIdentifier();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	namedExpression() {
	    let localctx = new NamedExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 188, SqlBaseParser.RULE_namedExpression);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2372;
	        this.expression();
	        this.state = 2380;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,298,this._ctx);
	        if(la_===1) {
	            this.state = 2374;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,296,this._ctx);
	            if(la_===1) {
	                this.state = 2373;
	                this.match(SqlBaseParser.AS);

	            }
	            this.state = 2378;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,297,this._ctx);
	            switch(la_) {
	            case 1:
	                this.state = 2376;
	                localctx.name = this.errorCapturingIdentifier();
	                break;

	            case 2:
	                this.state = 2377;
	                this.identifierList();
	                break;

	            }

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	namedExpressionSeq() {
	    let localctx = new NamedExpressionSeqContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 190, SqlBaseParser.RULE_namedExpressionSeq);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2382;
	        this.namedExpression();
	        this.state = 2387;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,299,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 2383;
	                this.match(SqlBaseParser.T__2);
	                this.state = 2384;
	                this.namedExpression(); 
	            }
	            this.state = 2389;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,299,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	partitionFieldList() {
	    let localctx = new PartitionFieldListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 192, SqlBaseParser.RULE_partitionFieldList);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2390;
	        this.match(SqlBaseParser.T__1);
	        this.state = 2391;
	        localctx._partitionField = this.partitionField();
	        localctx.fields.push(localctx._partitionField);
	        this.state = 2396;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===SqlBaseParser.T__2) {
	            this.state = 2392;
	            this.match(SqlBaseParser.T__2);
	            this.state = 2393;
	            localctx._partitionField = this.partitionField();
	            localctx.fields.push(localctx._partitionField);
	            this.state = 2398;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 2399;
	        this.match(SqlBaseParser.T__3);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	partitionField() {
	    let localctx = new PartitionFieldContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 194, SqlBaseParser.RULE_partitionField);
	    try {
	        this.state = 2403;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,301,this._ctx);
	        switch(la_) {
	        case 1:
	            localctx = new PartitionTransformContext(this, localctx);
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2401;
	            this.transform();
	            break;

	        case 2:
	            localctx = new PartitionColumnContext(this, localctx);
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2402;
	            this.colType();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	transform() {
	    let localctx = new TransformContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 196, SqlBaseParser.RULE_transform);
	    var _la = 0; // Token type
	    try {
	        this.state = 2418;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,303,this._ctx);
	        switch(la_) {
	        case 1:
	            localctx = new IdentityTransformContext(this, localctx);
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2405;
	            this.qualifiedName();
	            break;

	        case 2:
	            localctx = new ApplyTransformContext(this, localctx);
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2406;
	            localctx.transformName = this.identifier();
	            this.state = 2407;
	            this.match(SqlBaseParser.T__1);
	            this.state = 2408;
	            localctx._transformArgument = this.transformArgument();
	            localctx.argument.push(localctx._transformArgument);
	            this.state = 2413;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===SqlBaseParser.T__2) {
	                this.state = 2409;
	                this.match(SqlBaseParser.T__2);
	                this.state = 2410;
	                localctx._transformArgument = this.transformArgument();
	                localctx.argument.push(localctx._transformArgument);
	                this.state = 2415;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 2416;
	            this.match(SqlBaseParser.T__3);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	transformArgument() {
	    let localctx = new TransformArgumentContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 198, SqlBaseParser.RULE_transformArgument);
	    try {
	        this.state = 2422;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,304,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2420;
	            this.qualifiedName();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2421;
	            this.constant();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	expression() {
	    let localctx = new ExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 200, SqlBaseParser.RULE_expression);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2424;
	        this.booleanExpression(0);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}


	booleanExpression(_p) {
		if(_p===undefined) {
		    _p = 0;
		}
	    const _parentctx = this._ctx;
	    const _parentState = this.state;
	    let localctx = new BooleanExpressionContext(this, this._ctx, _parentState);
	    let _prevctx = localctx;
	    const _startState = 202;
	    this.enterRecursionRule(localctx, 202, SqlBaseParser.RULE_booleanExpression, _p);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2438;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,306,this._ctx);
	        switch(la_) {
	        case 1:
	            localctx = new LogicalNotContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;

	            this.state = 2427;
	            this.match(SqlBaseParser.NOT);
	            this.state = 2428;
	            this.booleanExpression(5);
	            break;

	        case 2:
	            localctx = new ExistsContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 2429;
	            this.match(SqlBaseParser.EXISTS);
	            this.state = 2430;
	            this.match(SqlBaseParser.T__1);
	            this.state = 2431;
	            this.query();
	            this.state = 2432;
	            this.match(SqlBaseParser.T__3);
	            break;

	        case 3:
	            localctx = new PredicatedContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 2434;
	            this.valueExpression(0);
	            this.state = 2436;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,305,this._ctx);
	            if(la_===1) {
	                this.state = 2435;
	                this.predicate();

	            }
	            break;

	        }
	        this._ctx.stop = this._input.LT(-1);
	        this.state = 2448;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,308,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                if(this._parseListeners!==null) {
	                    this.triggerExitRuleEvent();
	                }
	                _prevctx = localctx;
	                this.state = 2446;
	                this._errHandler.sync(this);
	                var la_ = this._interp.adaptivePredict(this._input,307,this._ctx);
	                switch(la_) {
	                case 1:
	                    localctx = new LogicalBinaryContext(this, new BooleanExpressionContext(this, _parentctx, _parentState));
	                    localctx.left = _prevctx;
	                    this.pushNewRecursionContext(localctx, _startState, SqlBaseParser.RULE_booleanExpression);
	                    this.state = 2440;
	                    if (!( this.precpred(this._ctx, 2))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 2)");
	                    }
	                    this.state = 2441;
	                    localctx.operator = this.match(SqlBaseParser.AND);
	                    this.state = 2442;
	                    localctx.right = this.booleanExpression(3);
	                    break;

	                case 2:
	                    localctx = new LogicalBinaryContext(this, new BooleanExpressionContext(this, _parentctx, _parentState));
	                    localctx.left = _prevctx;
	                    this.pushNewRecursionContext(localctx, _startState, SqlBaseParser.RULE_booleanExpression);
	                    this.state = 2443;
	                    if (!( this.precpred(this._ctx, 1))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
	                    }
	                    this.state = 2444;
	                    localctx.operator = this.match(SqlBaseParser.OR);
	                    this.state = 2445;
	                    localctx.right = this.booleanExpression(2);
	                    break;

	                } 
	            }
	            this.state = 2450;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,308,this._ctx);
	        }

	    } catch( error) {
	        if(error instanceof antlr4.error.RecognitionException) {
		        localctx.exception = error;
		        this._errHandler.reportError(this, error);
		        this._errHandler.recover(this, error);
		    } else {
		    	throw error;
		    }
	    } finally {
	        this.unrollRecursionContexts(_parentctx)
	    }
	    return localctx;
	}



	predicate() {
	    let localctx = new PredicateContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 204, SqlBaseParser.RULE_predicate);
	    var _la = 0; // Token type
	    try {
	        this.state = 2533;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,322,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2452;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===SqlBaseParser.NOT) {
	                this.state = 2451;
	                this.match(SqlBaseParser.NOT);
	            }

	            this.state = 2454;
	            localctx.kind = this.match(SqlBaseParser.BETWEEN);
	            this.state = 2455;
	            localctx.lower = this.valueExpression(0);
	            this.state = 2456;
	            this.match(SqlBaseParser.AND);
	            this.state = 2457;
	            localctx.upper = this.valueExpression(0);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2460;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===SqlBaseParser.NOT) {
	                this.state = 2459;
	                this.match(SqlBaseParser.NOT);
	            }

	            this.state = 2462;
	            localctx.kind = this.match(SqlBaseParser.IN);
	            this.state = 2463;
	            this.match(SqlBaseParser.T__1);
	            this.state = 2464;
	            this.expression();
	            this.state = 2469;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===SqlBaseParser.T__2) {
	                this.state = 2465;
	                this.match(SqlBaseParser.T__2);
	                this.state = 2466;
	                this.expression();
	                this.state = 2471;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 2472;
	            this.match(SqlBaseParser.T__3);
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 2475;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===SqlBaseParser.NOT) {
	                this.state = 2474;
	                this.match(SqlBaseParser.NOT);
	            }

	            this.state = 2477;
	            localctx.kind = this.match(SqlBaseParser.IN);
	            this.state = 2478;
	            this.match(SqlBaseParser.T__1);
	            this.state = 2479;
	            this.query();
	            this.state = 2480;
	            this.match(SqlBaseParser.T__3);
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 2483;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===SqlBaseParser.NOT) {
	                this.state = 2482;
	                this.match(SqlBaseParser.NOT);
	            }

	            this.state = 2485;
	            localctx.kind = this.match(SqlBaseParser.RLIKE);
	            this.state = 2486;
	            localctx.pattern = this.valueExpression(0);
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 2488;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===SqlBaseParser.NOT) {
	                this.state = 2487;
	                this.match(SqlBaseParser.NOT);
	            }

	            this.state = 2490;
	            localctx.kind = this.match(SqlBaseParser.LIKE);
	            this.state = 2491;
	            localctx.quantifier = this._input.LT(1);
	            _la = this._input.LA(1);
	            if(!(_la===SqlBaseParser.ALL || _la===SqlBaseParser.ANY || _la===SqlBaseParser.SOME)) {
	                localctx.quantifier = this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 2505;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,316,this._ctx);
	            switch(la_) {
	            case 1:
	                this.state = 2492;
	                this.match(SqlBaseParser.T__1);
	                this.state = 2493;
	                this.match(SqlBaseParser.T__3);
	                break;

	            case 2:
	                this.state = 2494;
	                this.match(SqlBaseParser.T__1);
	                this.state = 2495;
	                this.expression();
	                this.state = 2500;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                while(_la===SqlBaseParser.T__2) {
	                    this.state = 2496;
	                    this.match(SqlBaseParser.T__2);
	                    this.state = 2497;
	                    this.expression();
	                    this.state = 2502;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                }
	                this.state = 2503;
	                this.match(SqlBaseParser.T__3);
	                break;

	            }
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 2508;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===SqlBaseParser.NOT) {
	                this.state = 2507;
	                this.match(SqlBaseParser.NOT);
	            }

	            this.state = 2510;
	            localctx.kind = this.match(SqlBaseParser.LIKE);
	            this.state = 2511;
	            localctx.pattern = this.valueExpression(0);
	            this.state = 2514;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,318,this._ctx);
	            if(la_===1) {
	                this.state = 2512;
	                this.match(SqlBaseParser.ESCAPE);
	                this.state = 2513;
	                localctx.escapeChar = this.match(SqlBaseParser.STRING);

	            }
	            break;

	        case 7:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 2516;
	            this.match(SqlBaseParser.IS);
	            this.state = 2518;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===SqlBaseParser.NOT) {
	                this.state = 2517;
	                this.match(SqlBaseParser.NOT);
	            }

	            this.state = 2520;
	            localctx.kind = this.match(SqlBaseParser.NULL);
	            break;

	        case 8:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 2521;
	            this.match(SqlBaseParser.IS);
	            this.state = 2523;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===SqlBaseParser.NOT) {
	                this.state = 2522;
	                this.match(SqlBaseParser.NOT);
	            }

	            this.state = 2525;
	            localctx.kind = this._input.LT(1);
	            _la = this._input.LA(1);
	            if(!(_la===SqlBaseParser.FALSE || _la===SqlBaseParser.TRUE || _la===SqlBaseParser.UNKNOWN)) {
	                localctx.kind = this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            break;

	        case 9:
	            this.enterOuterAlt(localctx, 9);
	            this.state = 2526;
	            this.match(SqlBaseParser.IS);
	            this.state = 2528;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===SqlBaseParser.NOT) {
	                this.state = 2527;
	                this.match(SqlBaseParser.NOT);
	            }

	            this.state = 2530;
	            localctx.kind = this.match(SqlBaseParser.DISTINCT);
	            this.state = 2531;
	            this.match(SqlBaseParser.FROM);
	            this.state = 2532;
	            localctx.right = this.valueExpression(0);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}


	valueExpression(_p) {
		if(_p===undefined) {
		    _p = 0;
		}
	    const _parentctx = this._ctx;
	    const _parentState = this.state;
	    let localctx = new ValueExpressionContext(this, this._ctx, _parentState);
	    let _prevctx = localctx;
	    const _startState = 206;
	    this.enterRecursionRule(localctx, 206, SqlBaseParser.RULE_valueExpression, _p);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2539;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,323,this._ctx);
	        switch(la_) {
	        case 1:
	            localctx = new ValueExpressionDefaultContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;

	            this.state = 2536;
	            this.primaryExpression(0);
	            break;

	        case 2:
	            localctx = new ArithmeticUnaryContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 2537;
	            localctx.operator = this._input.LT(1);
	            _la = this._input.LA(1);
	            if(!(((((_la - 285)) & ~0x1f) == 0 && ((1 << (_la - 285)) & ((1 << (SqlBaseParser.PLUS - 285)) | (1 << (SqlBaseParser.MINUS - 285)) | (1 << (SqlBaseParser.TILDE - 285)))) !== 0))) {
	                localctx.operator = this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 2538;
	            this.valueExpression(6);
	            break;

	        }
	        this._ctx.stop = this._input.LT(-1);
	        this.state = 2562;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,325,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                if(this._parseListeners!==null) {
	                    this.triggerExitRuleEvent();
	                }
	                _prevctx = localctx;
	                this.state = 2560;
	                this._errHandler.sync(this);
	                var la_ = this._interp.adaptivePredict(this._input,324,this._ctx);
	                switch(la_) {
	                case 1:
	                    localctx = new ComparisonContext(this, new ValueExpressionContext(this, _parentctx, _parentState));
	                    localctx.left = _prevctx;
	                    this.pushNewRecursionContext(localctx, _startState, SqlBaseParser.RULE_valueExpression);
	                    this.state = 2541;
	                    if (!( this.precpred(this._ctx, 7))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 7)");
	                    }
	                    this.state = 2542;
	                    this.comparisonOperator();
	                    this.state = 2543;
	                    localctx.right = this.valueExpression(8);
	                    break;

	                case 2:
	                    localctx = new ArithmeticBinaryContext(this, new ValueExpressionContext(this, _parentctx, _parentState));
	                    localctx.left = _prevctx;
	                    this.pushNewRecursionContext(localctx, _startState, SqlBaseParser.RULE_valueExpression);
	                    this.state = 2545;
	                    if (!( this.precpred(this._ctx, 5))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 5)");
	                    }
	                    this.state = 2546;
	                    localctx.operator = this._input.LT(1);
	                    _la = this._input.LA(1);
	                    if(!(_la===SqlBaseParser.DIV || ((((_la - 287)) & ~0x1f) == 0 && ((1 << (_la - 287)) & ((1 << (SqlBaseParser.ASTERISK - 287)) | (1 << (SqlBaseParser.SLASH - 287)) | (1 << (SqlBaseParser.PERCENT - 287)))) !== 0))) {
	                        localctx.operator = this._errHandler.recoverInline(this);
	                    }
	                    else {
	                    	this._errHandler.reportMatch(this);
	                        this.consume();
	                    }
	                    this.state = 2547;
	                    localctx.right = this.valueExpression(6);
	                    break;

	                case 3:
	                    localctx = new ArithmeticBinaryContext(this, new ValueExpressionContext(this, _parentctx, _parentState));
	                    localctx.left = _prevctx;
	                    this.pushNewRecursionContext(localctx, _startState, SqlBaseParser.RULE_valueExpression);
	                    this.state = 2548;
	                    if (!( this.precpred(this._ctx, 4))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 4)");
	                    }
	                    this.state = 2549;
	                    localctx.operator = this._input.LT(1);
	                    _la = this._input.LA(1);
	                    if(!(((((_la - 285)) & ~0x1f) == 0 && ((1 << (_la - 285)) & ((1 << (SqlBaseParser.PLUS - 285)) | (1 << (SqlBaseParser.MINUS - 285)) | (1 << (SqlBaseParser.CONCAT_PIPE - 285)))) !== 0))) {
	                        localctx.operator = this._errHandler.recoverInline(this);
	                    }
	                    else {
	                    	this._errHandler.reportMatch(this);
	                        this.consume();
	                    }
	                    this.state = 2550;
	                    localctx.right = this.valueExpression(5);
	                    break;

	                case 4:
	                    localctx = new ArithmeticBinaryContext(this, new ValueExpressionContext(this, _parentctx, _parentState));
	                    localctx.left = _prevctx;
	                    this.pushNewRecursionContext(localctx, _startState, SqlBaseParser.RULE_valueExpression);
	                    this.state = 2551;
	                    if (!( this.precpred(this._ctx, 3))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 3)");
	                    }
	                    this.state = 2552;
	                    localctx.operator = this.match(SqlBaseParser.AMPERSAND);
	                    this.state = 2553;
	                    localctx.right = this.valueExpression(4);
	                    break;

	                case 5:
	                    localctx = new ArithmeticBinaryContext(this, new ValueExpressionContext(this, _parentctx, _parentState));
	                    localctx.left = _prevctx;
	                    this.pushNewRecursionContext(localctx, _startState, SqlBaseParser.RULE_valueExpression);
	                    this.state = 2554;
	                    if (!( this.precpred(this._ctx, 2))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 2)");
	                    }
	                    this.state = 2555;
	                    localctx.operator = this.match(SqlBaseParser.HAT);
	                    this.state = 2556;
	                    localctx.right = this.valueExpression(3);
	                    break;

	                case 6:
	                    localctx = new ArithmeticBinaryContext(this, new ValueExpressionContext(this, _parentctx, _parentState));
	                    localctx.left = _prevctx;
	                    this.pushNewRecursionContext(localctx, _startState, SqlBaseParser.RULE_valueExpression);
	                    this.state = 2557;
	                    if (!( this.precpred(this._ctx, 1))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
	                    }
	                    this.state = 2558;
	                    localctx.operator = this.match(SqlBaseParser.PIPE);
	                    this.state = 2559;
	                    localctx.right = this.valueExpression(2);
	                    break;

	                } 
	            }
	            this.state = 2564;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,325,this._ctx);
	        }

	    } catch( error) {
	        if(error instanceof antlr4.error.RecognitionException) {
		        localctx.exception = error;
		        this._errHandler.reportError(this, error);
		        this._errHandler.recover(this, error);
		    } else {
		    	throw error;
		    }
	    } finally {
	        this.unrollRecursionContexts(_parentctx)
	    }
	    return localctx;
	}


	primaryExpression(_p) {
		if(_p===undefined) {
		    _p = 0;
		}
	    const _parentctx = this._ctx;
	    const _parentState = this.state;
	    let localctx = new PrimaryExpressionContext(this, this._ctx, _parentState);
	    let _prevctx = localctx;
	    const _startState = 208;
	    this.enterRecursionRule(localctx, 208, SqlBaseParser.RULE_primaryExpression, _p);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2753;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,346,this._ctx);
	        switch(la_) {
	        case 1:
	            localctx = new CurrentDatetimeContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;

	            this.state = 2566;
	            localctx.name = this._input.LT(1);
	            _la = this._input.LA(1);
	            if(!(_la===SqlBaseParser.CURRENT_DATE || _la===SqlBaseParser.CURRENT_TIMESTAMP)) {
	                localctx.name = this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            break;

	        case 2:
	            localctx = new SearchedCaseContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 2567;
	            this.match(SqlBaseParser.CASE);
	            this.state = 2569; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            do {
	                this.state = 2568;
	                this.whenClause();
	                this.state = 2571; 
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            } while(_la===SqlBaseParser.WHEN);
	            this.state = 2575;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===SqlBaseParser.ELSE) {
	                this.state = 2573;
	                this.match(SqlBaseParser.ELSE);
	                this.state = 2574;
	                localctx.elseExpression = this.expression();
	            }

	            this.state = 2577;
	            this.match(SqlBaseParser.END);
	            break;

	        case 3:
	            localctx = new SimpleCaseContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 2579;
	            this.match(SqlBaseParser.CASE);
	            this.state = 2580;
	            localctx.value = this.expression();
	            this.state = 2582; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            do {
	                this.state = 2581;
	                this.whenClause();
	                this.state = 2584; 
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            } while(_la===SqlBaseParser.WHEN);
	            this.state = 2588;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===SqlBaseParser.ELSE) {
	                this.state = 2586;
	                this.match(SqlBaseParser.ELSE);
	                this.state = 2587;
	                localctx.elseExpression = this.expression();
	            }

	            this.state = 2590;
	            this.match(SqlBaseParser.END);
	            break;

	        case 4:
	            localctx = new CastContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 2592;
	            localctx.name = this._input.LT(1);
	            _la = this._input.LA(1);
	            if(!(_la===SqlBaseParser.CAST || _la===SqlBaseParser.TRY_CAST)) {
	                localctx.name = this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 2593;
	            this.match(SqlBaseParser.T__1);
	            this.state = 2594;
	            this.expression();
	            this.state = 2595;
	            this.match(SqlBaseParser.AS);
	            this.state = 2596;
	            this.dataType();
	            this.state = 2597;
	            this.match(SqlBaseParser.T__3);
	            break;

	        case 5:
	            localctx = new StructContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 2599;
	            this.match(SqlBaseParser.STRUCT);
	            this.state = 2600;
	            this.match(SqlBaseParser.T__1);
	            this.state = 2609;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,331,this._ctx);
	            if(la_===1) {
	                this.state = 2601;
	                localctx._namedExpression = this.namedExpression();
	                localctx.argument.push(localctx._namedExpression);
	                this.state = 2606;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                while(_la===SqlBaseParser.T__2) {
	                    this.state = 2602;
	                    this.match(SqlBaseParser.T__2);
	                    this.state = 2603;
	                    localctx._namedExpression = this.namedExpression();
	                    localctx.argument.push(localctx._namedExpression);
	                    this.state = 2608;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                }

	            }
	            this.state = 2611;
	            this.match(SqlBaseParser.T__3);
	            break;

	        case 6:
	            localctx = new FirstContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 2612;
	            this.match(SqlBaseParser.FIRST);
	            this.state = 2613;
	            this.match(SqlBaseParser.T__1);
	            this.state = 2614;
	            this.expression();
	            this.state = 2617;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===SqlBaseParser.IGNORE) {
	                this.state = 2615;
	                this.match(SqlBaseParser.IGNORE);
	                this.state = 2616;
	                this.match(SqlBaseParser.NULLS);
	            }

	            this.state = 2619;
	            this.match(SqlBaseParser.T__3);
	            break;

	        case 7:
	            localctx = new LastContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 2621;
	            this.match(SqlBaseParser.LAST);
	            this.state = 2622;
	            this.match(SqlBaseParser.T__1);
	            this.state = 2623;
	            this.expression();
	            this.state = 2626;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===SqlBaseParser.IGNORE) {
	                this.state = 2624;
	                this.match(SqlBaseParser.IGNORE);
	                this.state = 2625;
	                this.match(SqlBaseParser.NULLS);
	            }

	            this.state = 2628;
	            this.match(SqlBaseParser.T__3);
	            break;

	        case 8:
	            localctx = new PositionContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 2630;
	            this.match(SqlBaseParser.POSITION);
	            this.state = 2631;
	            this.match(SqlBaseParser.T__1);
	            this.state = 2632;
	            localctx.substr = this.valueExpression(0);
	            this.state = 2633;
	            this.match(SqlBaseParser.IN);
	            this.state = 2634;
	            localctx.str = this.valueExpression(0);
	            this.state = 2635;
	            this.match(SqlBaseParser.T__3);
	            break;

	        case 9:
	            localctx = new ConstantDefaultContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 2637;
	            this.constant();
	            break;

	        case 10:
	            localctx = new StarContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 2638;
	            this.match(SqlBaseParser.ASTERISK);
	            break;

	        case 11:
	            localctx = new StarContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 2639;
	            this.qualifiedName();
	            this.state = 2640;
	            this.match(SqlBaseParser.T__4);
	            this.state = 2641;
	            this.match(SqlBaseParser.ASTERISK);
	            break;

	        case 12:
	            localctx = new RowConstructorContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 2643;
	            this.match(SqlBaseParser.T__1);
	            this.state = 2644;
	            this.namedExpression();
	            this.state = 2647; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            do {
	                this.state = 2645;
	                this.match(SqlBaseParser.T__2);
	                this.state = 2646;
	                this.namedExpression();
	                this.state = 2649; 
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            } while(_la===SqlBaseParser.T__2);
	            this.state = 2651;
	            this.match(SqlBaseParser.T__3);
	            break;

	        case 13:
	            localctx = new SubqueryExpressionContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 2653;
	            this.match(SqlBaseParser.T__1);
	            this.state = 2654;
	            this.query();
	            this.state = 2655;
	            this.match(SqlBaseParser.T__3);
	            break;

	        case 14:
	            localctx = new FunctionCallContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 2657;
	            this.functionName();
	            this.state = 2658;
	            this.match(SqlBaseParser.T__1);
	            this.state = 2670;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,337,this._ctx);
	            if(la_===1) {
	                this.state = 2660;
	                this._errHandler.sync(this);
	                var la_ = this._interp.adaptivePredict(this._input,335,this._ctx);
	                if(la_===1) {
	                    this.state = 2659;
	                    this.setQuantifier();

	                }
	                this.state = 2662;
	                localctx._expression = this.expression();
	                localctx.argument.push(localctx._expression);
	                this.state = 2667;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                while(_la===SqlBaseParser.T__2) {
	                    this.state = 2663;
	                    this.match(SqlBaseParser.T__2);
	                    this.state = 2664;
	                    localctx._expression = this.expression();
	                    localctx.argument.push(localctx._expression);
	                    this.state = 2669;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                }

	            }
	            this.state = 2672;
	            this.match(SqlBaseParser.T__3);
	            this.state = 2679;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,338,this._ctx);
	            if(la_===1) {
	                this.state = 2673;
	                this.match(SqlBaseParser.FILTER);
	                this.state = 2674;
	                this.match(SqlBaseParser.T__1);
	                this.state = 2675;
	                this.match(SqlBaseParser.WHERE);
	                this.state = 2676;
	                localctx.where = this.booleanExpression(0);
	                this.state = 2677;
	                this.match(SqlBaseParser.T__3);

	            }
	            this.state = 2683;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,339,this._ctx);
	            if(la_===1) {
	                this.state = 2681;
	                localctx.nullsOption = this._input.LT(1);
	                _la = this._input.LA(1);
	                if(!(_la===SqlBaseParser.IGNORE || _la===SqlBaseParser.RESPECT)) {
	                    localctx.nullsOption = this._errHandler.recoverInline(this);
	                }
	                else {
	                	this._errHandler.reportMatch(this);
	                    this.consume();
	                }
	                this.state = 2682;
	                this.match(SqlBaseParser.NULLS);

	            }
	            this.state = 2687;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,340,this._ctx);
	            if(la_===1) {
	                this.state = 2685;
	                this.match(SqlBaseParser.OVER);
	                this.state = 2686;
	                this.windowSpec();

	            }
	            break;

	        case 15:
	            localctx = new LambdaContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 2689;
	            this.identifier();
	            this.state = 2690;
	            this.match(SqlBaseParser.T__7);
	            this.state = 2691;
	            this.expression();
	            break;

	        case 16:
	            localctx = new LambdaContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 2693;
	            this.match(SqlBaseParser.T__1);
	            this.state = 2694;
	            this.identifier();
	            this.state = 2697; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            do {
	                this.state = 2695;
	                this.match(SqlBaseParser.T__2);
	                this.state = 2696;
	                this.identifier();
	                this.state = 2699; 
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            } while(_la===SqlBaseParser.T__2);
	            this.state = 2701;
	            this.match(SqlBaseParser.T__3);
	            this.state = 2702;
	            this.match(SqlBaseParser.T__7);
	            this.state = 2703;
	            this.expression();
	            break;

	        case 17:
	            localctx = new ColumnReferenceContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 2705;
	            this.identifier();
	            break;

	        case 18:
	            localctx = new ParenthesizedExpressionContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 2706;
	            this.match(SqlBaseParser.T__1);
	            this.state = 2707;
	            this.expression();
	            this.state = 2708;
	            this.match(SqlBaseParser.T__3);
	            break;

	        case 19:
	            localctx = new ExtractContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 2710;
	            this.match(SqlBaseParser.EXTRACT);
	            this.state = 2711;
	            this.match(SqlBaseParser.T__1);
	            this.state = 2712;
	            localctx.field = this.identifier();
	            this.state = 2713;
	            this.match(SqlBaseParser.FROM);
	            this.state = 2714;
	            localctx.source = this.valueExpression(0);
	            this.state = 2715;
	            this.match(SqlBaseParser.T__3);
	            break;

	        case 20:
	            localctx = new SubstringContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 2717;
	            _la = this._input.LA(1);
	            if(!(_la===SqlBaseParser.SUBSTR || _la===SqlBaseParser.SUBSTRING)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 2718;
	            this.match(SqlBaseParser.T__1);
	            this.state = 2719;
	            localctx.str = this.valueExpression(0);
	            this.state = 2720;
	            _la = this._input.LA(1);
	            if(!(_la===SqlBaseParser.T__2 || _la===SqlBaseParser.FROM)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 2721;
	            localctx.pos = this.valueExpression(0);
	            this.state = 2724;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===SqlBaseParser.T__2 || _la===SqlBaseParser.FOR) {
	                this.state = 2722;
	                _la = this._input.LA(1);
	                if(!(_la===SqlBaseParser.T__2 || _la===SqlBaseParser.FOR)) {
	                this._errHandler.recoverInline(this);
	                }
	                else {
	                	this._errHandler.reportMatch(this);
	                    this.consume();
	                }
	                this.state = 2723;
	                localctx.len = this.valueExpression(0);
	            }

	            this.state = 2726;
	            this.match(SqlBaseParser.T__3);
	            break;

	        case 21:
	            localctx = new TrimContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 2728;
	            this.match(SqlBaseParser.TRIM);
	            this.state = 2729;
	            this.match(SqlBaseParser.T__1);
	            this.state = 2731;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,343,this._ctx);
	            if(la_===1) {
	                this.state = 2730;
	                localctx.trimOption = this._input.LT(1);
	                _la = this._input.LA(1);
	                if(!(_la===SqlBaseParser.BOTH || _la===SqlBaseParser.LEADING || _la===SqlBaseParser.TRAILING)) {
	                    localctx.trimOption = this._errHandler.recoverInline(this);
	                }
	                else {
	                	this._errHandler.reportMatch(this);
	                    this.consume();
	                }

	            }
	            this.state = 2734;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,344,this._ctx);
	            if(la_===1) {
	                this.state = 2733;
	                localctx.trimStr = this.valueExpression(0);

	            }
	            this.state = 2736;
	            this.match(SqlBaseParser.FROM);
	            this.state = 2737;
	            localctx.srcStr = this.valueExpression(0);
	            this.state = 2738;
	            this.match(SqlBaseParser.T__3);
	            break;

	        case 22:
	            localctx = new OverlayContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 2740;
	            this.match(SqlBaseParser.OVERLAY);
	            this.state = 2741;
	            this.match(SqlBaseParser.T__1);
	            this.state = 2742;
	            localctx.input = this.valueExpression(0);
	            this.state = 2743;
	            this.match(SqlBaseParser.PLACING);
	            this.state = 2744;
	            localctx.replace = this.valueExpression(0);
	            this.state = 2745;
	            this.match(SqlBaseParser.FROM);
	            this.state = 2746;
	            localctx.position = this.valueExpression(0);
	            this.state = 2749;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===SqlBaseParser.FOR) {
	                this.state = 2747;
	                this.match(SqlBaseParser.FOR);
	                this.state = 2748;
	                localctx.length = this.valueExpression(0);
	            }

	            this.state = 2751;
	            this.match(SqlBaseParser.T__3);
	            break;

	        }
	        this._ctx.stop = this._input.LT(-1);
	        this.state = 2765;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,348,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                if(this._parseListeners!==null) {
	                    this.triggerExitRuleEvent();
	                }
	                _prevctx = localctx;
	                this.state = 2763;
	                this._errHandler.sync(this);
	                var la_ = this._interp.adaptivePredict(this._input,347,this._ctx);
	                switch(la_) {
	                case 1:
	                    localctx = new SubscriptContext(this, new PrimaryExpressionContext(this, _parentctx, _parentState));
	                    localctx.value = _prevctx;
	                    this.pushNewRecursionContext(localctx, _startState, SqlBaseParser.RULE_primaryExpression);
	                    this.state = 2755;
	                    if (!( this.precpred(this._ctx, 8))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 8)");
	                    }
	                    this.state = 2756;
	                    this.match(SqlBaseParser.T__8);
	                    this.state = 2757;
	                    localctx.index = this.valueExpression(0);
	                    this.state = 2758;
	                    this.match(SqlBaseParser.T__9);
	                    break;

	                case 2:
	                    localctx = new DereferenceContext(this, new PrimaryExpressionContext(this, _parentctx, _parentState));
	                    localctx.base = _prevctx;
	                    this.pushNewRecursionContext(localctx, _startState, SqlBaseParser.RULE_primaryExpression);
	                    this.state = 2760;
	                    if (!( this.precpred(this._ctx, 6))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 6)");
	                    }
	                    this.state = 2761;
	                    this.match(SqlBaseParser.T__4);
	                    this.state = 2762;
	                    localctx.fieldName = this.identifier();
	                    break;

	                } 
	            }
	            this.state = 2767;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,348,this._ctx);
	        }

	    } catch( error) {
	        if(error instanceof antlr4.error.RecognitionException) {
		        localctx.exception = error;
		        this._errHandler.reportError(this, error);
		        this._errHandler.recover(this, error);
		    } else {
		    	throw error;
		    }
	    } finally {
	        this.unrollRecursionContexts(_parentctx)
	    }
	    return localctx;
	}



	constant() {
	    let localctx = new ConstantContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 210, SqlBaseParser.RULE_constant);
	    try {
	        this.state = 2780;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,350,this._ctx);
	        switch(la_) {
	        case 1:
	            localctx = new NullLiteralContext(this, localctx);
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2768;
	            this.match(SqlBaseParser.NULL);
	            break;

	        case 2:
	            localctx = new IntervalLiteralContext(this, localctx);
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2769;
	            this.interval();
	            break;

	        case 3:
	            localctx = new TypeConstructorContext(this, localctx);
	            this.enterOuterAlt(localctx, 3);
	            this.state = 2770;
	            this.identifier();
	            this.state = 2771;
	            this.match(SqlBaseParser.STRING);
	            break;

	        case 4:
	            localctx = new NumericLiteralContext(this, localctx);
	            this.enterOuterAlt(localctx, 4);
	            this.state = 2773;
	            this.number();
	            break;

	        case 5:
	            localctx = new BooleanLiteralContext(this, localctx);
	            this.enterOuterAlt(localctx, 5);
	            this.state = 2774;
	            this.booleanValue();
	            break;

	        case 6:
	            localctx = new StringLiteralContext(this, localctx);
	            this.enterOuterAlt(localctx, 6);
	            this.state = 2776; 
	            this._errHandler.sync(this);
	            var _alt = 1;
	            do {
	            	switch (_alt) {
	            	case 1:
	            		this.state = 2775;
	            		this.match(SqlBaseParser.STRING);
	            		break;
	            	default:
	            		throw new antlr4.error.NoViableAltException(this);
	            	}
	            	this.state = 2778; 
	            	this._errHandler.sync(this);
	            	_alt = this._interp.adaptivePredict(this._input,349, this._ctx);
	            } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	comparisonOperator() {
	    let localctx = new ComparisonOperatorContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 212, SqlBaseParser.RULE_comparisonOperator);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2782;
	        _la = this._input.LA(1);
	        if(!(((((_la - 277)) & ~0x1f) == 0 && ((1 << (_la - 277)) & ((1 << (SqlBaseParser.EQ - 277)) | (1 << (SqlBaseParser.NSEQ - 277)) | (1 << (SqlBaseParser.NEQ - 277)) | (1 << (SqlBaseParser.NEQJ - 277)) | (1 << (SqlBaseParser.LT - 277)) | (1 << (SqlBaseParser.LTE - 277)) | (1 << (SqlBaseParser.GT - 277)) | (1 << (SqlBaseParser.GTE - 277)))) !== 0))) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	arithmeticOperator() {
	    let localctx = new ArithmeticOperatorContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 214, SqlBaseParser.RULE_arithmeticOperator);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2784;
	        _la = this._input.LA(1);
	        if(!(_la===SqlBaseParser.DIV || ((((_la - 285)) & ~0x1f) == 0 && ((1 << (_la - 285)) & ((1 << (SqlBaseParser.PLUS - 285)) | (1 << (SqlBaseParser.MINUS - 285)) | (1 << (SqlBaseParser.ASTERISK - 285)) | (1 << (SqlBaseParser.SLASH - 285)) | (1 << (SqlBaseParser.PERCENT - 285)) | (1 << (SqlBaseParser.TILDE - 285)) | (1 << (SqlBaseParser.AMPERSAND - 285)) | (1 << (SqlBaseParser.PIPE - 285)) | (1 << (SqlBaseParser.CONCAT_PIPE - 285)) | (1 << (SqlBaseParser.HAT - 285)))) !== 0))) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	predicateOperator() {
	    let localctx = new PredicateOperatorContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 216, SqlBaseParser.RULE_predicateOperator);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2786;
	        _la = this._input.LA(1);
	        if(!(_la===SqlBaseParser.AND || _la===SqlBaseParser.IN || _la===SqlBaseParser.NOT || _la===SqlBaseParser.OR)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	booleanValue() {
	    let localctx = new BooleanValueContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 218, SqlBaseParser.RULE_booleanValue);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2788;
	        _la = this._input.LA(1);
	        if(!(_la===SqlBaseParser.FALSE || _la===SqlBaseParser.TRUE)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	interval() {
	    let localctx = new IntervalContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 220, SqlBaseParser.RULE_interval);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2790;
	        this.match(SqlBaseParser.INTERVAL);
	        this.state = 2793;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,351,this._ctx);
	        if(la_===1) {
	            this.state = 2791;
	            this.errorCapturingMultiUnitsInterval();

	        } else if(la_===2) {
	            this.state = 2792;
	            this.errorCapturingUnitToUnitInterval();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	errorCapturingMultiUnitsInterval() {
	    let localctx = new ErrorCapturingMultiUnitsIntervalContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 222, SqlBaseParser.RULE_errorCapturingMultiUnitsInterval);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2795;
	        this.multiUnitsInterval();
	        this.state = 2797;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,352,this._ctx);
	        if(la_===1) {
	            this.state = 2796;
	            this.unitToUnitInterval();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	multiUnitsInterval() {
	    let localctx = new MultiUnitsIntervalContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 224, SqlBaseParser.RULE_multiUnitsInterval);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2802; 
	        this._errHandler.sync(this);
	        var _alt = 1;
	        do {
	        	switch (_alt) {
	        	case 1:
	        		this.state = 2799;
	        		this.intervalValue();
	        		this.state = 2800;
	        		localctx._identifier = this.identifier();
	        		localctx.unit.push(localctx._identifier);
	        		break;
	        	default:
	        		throw new antlr4.error.NoViableAltException(this);
	        	}
	        	this.state = 2804; 
	        	this._errHandler.sync(this);
	        	_alt = this._interp.adaptivePredict(this._input,353, this._ctx);
	        } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	errorCapturingUnitToUnitInterval() {
	    let localctx = new ErrorCapturingUnitToUnitIntervalContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 226, SqlBaseParser.RULE_errorCapturingUnitToUnitInterval);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2806;
	        localctx.body = this.unitToUnitInterval();
	        this.state = 2809;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,354,this._ctx);
	        if(la_===1) {
	            this.state = 2807;
	            localctx.error1 = this.multiUnitsInterval();

	        } else if(la_===2) {
	            this.state = 2808;
	            localctx.error2 = this.unitToUnitInterval();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	unitToUnitInterval() {
	    let localctx = new UnitToUnitIntervalContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 228, SqlBaseParser.RULE_unitToUnitInterval);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2811;
	        localctx.value = this.intervalValue();
	        this.state = 2812;
	        localctx.from = this.identifier();
	        this.state = 2813;
	        this.match(SqlBaseParser.TO);
	        this.state = 2814;
	        localctx.to = this.identifier();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	intervalValue() {
	    let localctx = new IntervalValueContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 230, SqlBaseParser.RULE_intervalValue);
	    var _la = 0; // Token type
	    try {
	        this.state = 2821;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case SqlBaseParser.PLUS:
	        case SqlBaseParser.MINUS:
	        case SqlBaseParser.INTEGER_VALUE:
	        case SqlBaseParser.DECIMAL_VALUE:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2817;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===SqlBaseParser.PLUS || _la===SqlBaseParser.MINUS) {
	                this.state = 2816;
	                _la = this._input.LA(1);
	                if(!(_la===SqlBaseParser.PLUS || _la===SqlBaseParser.MINUS)) {
	                this._errHandler.recoverInline(this);
	                }
	                else {
	                	this._errHandler.reportMatch(this);
	                    this.consume();
	                }
	            }

	            this.state = 2819;
	            _la = this._input.LA(1);
	            if(!(_la===SqlBaseParser.INTEGER_VALUE || _la===SqlBaseParser.DECIMAL_VALUE)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            break;
	        case SqlBaseParser.STRING:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2820;
	            this.match(SqlBaseParser.STRING);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	colPosition() {
	    let localctx = new ColPositionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 232, SqlBaseParser.RULE_colPosition);
	    try {
	        this.state = 2826;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case SqlBaseParser.FIRST:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2823;
	            localctx.position = this.match(SqlBaseParser.FIRST);
	            break;
	        case SqlBaseParser.AFTER:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2824;
	            localctx.position = this.match(SqlBaseParser.AFTER);
	            this.state = 2825;
	            localctx.afterCol = this.errorCapturingIdentifier();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	dataType() {
	    let localctx = new DataTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 234, SqlBaseParser.RULE_dataType);
	    var _la = 0; // Token type
	    try {
	        this.state = 2862;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,362,this._ctx);
	        switch(la_) {
	        case 1:
	            localctx = new ArrayDataTypeContext(this, localctx);
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2828;
	            localctx.complex = this.match(SqlBaseParser.ARRAY);
	            this.state = 2829;
	            this.match(SqlBaseParser.LT);
	            this.state = 2830;
	            this.dataType();
	            this.state = 2831;
	            this.match(SqlBaseParser.GT);
	            break;

	        case 2:
	            localctx = new MapDataTypeContext(this, localctx);
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2833;
	            localctx.complex = this.match(SqlBaseParser.MAP);
	            this.state = 2834;
	            this.match(SqlBaseParser.LT);
	            this.state = 2835;
	            localctx.key = this.dataType();
	            this.state = 2836;
	            this.match(SqlBaseParser.T__2);
	            this.state = 2837;
	            localctx.val = this.dataType();
	            this.state = 2838;
	            this.match(SqlBaseParser.GT);
	            break;

	        case 3:
	            localctx = new StructDataTypeContext(this, localctx);
	            this.enterOuterAlt(localctx, 3);
	            this.state = 2840;
	            localctx.complex = this.match(SqlBaseParser.STRUCT);
	            this.state = 2847;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case SqlBaseParser.LT:
	                this.state = 2841;
	                this.match(SqlBaseParser.LT);
	                this.state = 2843;
	                this._errHandler.sync(this);
	                var la_ = this._interp.adaptivePredict(this._input,358,this._ctx);
	                if(la_===1) {
	                    this.state = 2842;
	                    this.complexColTypeList();

	                }
	                this.state = 2845;
	                this.match(SqlBaseParser.GT);
	                break;
	            case SqlBaseParser.NEQ:
	                this.state = 2846;
	                this.match(SqlBaseParser.NEQ);
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            break;

	        case 4:
	            localctx = new PrimitiveDataTypeContext(this, localctx);
	            this.enterOuterAlt(localctx, 4);
	            this.state = 2849;
	            this.identifier();
	            this.state = 2860;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,361,this._ctx);
	            if(la_===1) {
	                this.state = 2850;
	                this.match(SqlBaseParser.T__1);
	                this.state = 2851;
	                localctx.precision = this.match(SqlBaseParser.INTEGER_VALUE);
	                this.state = 2856;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                while(_la===SqlBaseParser.T__2) {
	                    this.state = 2852;
	                    this.match(SqlBaseParser.T__2);
	                    this.state = 2853;
	                    localctx.scale = this.match(SqlBaseParser.INTEGER_VALUE);
	                    this.state = 2858;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                }
	                this.state = 2859;
	                this.match(SqlBaseParser.T__3);

	            }
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	qualifiedColTypeWithPositionList() {
	    let localctx = new QualifiedColTypeWithPositionListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 236, SqlBaseParser.RULE_qualifiedColTypeWithPositionList);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2864;
	        this.qualifiedColTypeWithPosition();
	        this.state = 2869;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===SqlBaseParser.T__2) {
	            this.state = 2865;
	            this.match(SqlBaseParser.T__2);
	            this.state = 2866;
	            this.qualifiedColTypeWithPosition();
	            this.state = 2871;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	qualifiedColTypeWithPosition() {
	    let localctx = new QualifiedColTypeWithPositionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 238, SqlBaseParser.RULE_qualifiedColTypeWithPosition);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2872;
	        localctx.name = this.multipartIdentifier();
	        this.state = 2873;
	        this.dataType();
	        this.state = 2875;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===SqlBaseParser.NOT || _la===SqlBaseParser.PRIMARY || _la===SqlBaseParser.KW_GENERATED) {
	            this.state = 2874;
	            this.columnConstraint();
	        }

	        this.state = 2878;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===SqlBaseParser.COMMENT) {
	            this.state = 2877;
	            this.commentSpec();
	        }

	        this.state = 2881;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===SqlBaseParser.AFTER || _la===SqlBaseParser.FIRST) {
	            this.state = 2880;
	            this.colPosition();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	colTypeList() {
	    let localctx = new ColTypeListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 240, SqlBaseParser.RULE_colTypeList);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2883;
	        this.colType();
	        this.state = 2888;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,367,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 2884;
	                this.match(SqlBaseParser.T__2);
	                this.state = 2885;
	                this.colType(); 
	            }
	            this.state = 2890;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,367,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	colType() {
	    let localctx = new ColTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 242, SqlBaseParser.RULE_colType);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2891;
	        localctx.colName = this.errorCapturingIdentifier();
	        this.state = 2892;
	        this.dataType();
	        this.state = 2894;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,368,this._ctx);
	        if(la_===1) {
	            this.state = 2893;
	            this.columnConstraint();

	        }
	        this.state = 2897;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,369,this._ctx);
	        if(la_===1) {
	            this.state = 2896;
	            this.commentSpec();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	tableConstraint() {
	    let localctx = new TableConstraintContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 244, SqlBaseParser.RULE_tableConstraint);
	    try {
	        this.state = 2901;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,370,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2899;
	            this.primaryKeyConstraint();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2900;
	            this.foreignKeyConstraint();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	primaryKeyConstraint() {
	    let localctx = new PrimaryKeyConstraintContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 246, SqlBaseParser.RULE_primaryKeyConstraint);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2904;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===SqlBaseParser.CONSTRAINT) {
	            this.state = 2903;
	            this.tableConstraintName();
	        }

	        this.state = 2906;
	        this.match(SqlBaseParser.PRIMARY);
	        this.state = 2907;
	        this.match(SqlBaseParser.KEY);
	        this.state = 2908;
	        this.match(SqlBaseParser.T__1);
	        this.state = 2909;
	        this.keyNameList();
	        this.state = 2910;
	        this.match(SqlBaseParser.T__3);
	        this.state = 2914;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===SqlBaseParser.NOT || ((((_la - 266)) & ~0x1f) == 0 && ((1 << (_la - 266)) & ((1 << (SqlBaseParser.DEFERRABLE - 266)) | (1 << (SqlBaseParser.INITIALLY - 266)) | (1 << (SqlBaseParser.NORELY - 266)))) !== 0)) {
	            this.state = 2911;
	            this.constraintOptions();
	            this.state = 2916;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	foreignKeyConstraint() {
	    let localctx = new ForeignKeyConstraintContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 248, SqlBaseParser.RULE_foreignKeyConstraint);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2918;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===SqlBaseParser.CONSTRAINT) {
	            this.state = 2917;
	            this.tableConstraintName();
	        }

	        this.state = 2920;
	        this.match(SqlBaseParser.FOREIGN);
	        this.state = 2921;
	        this.match(SqlBaseParser.KEY);
	        this.state = 2922;
	        this.match(SqlBaseParser.T__1);
	        this.state = 2923;
	        this.keyNameList();
	        this.state = 2924;
	        this.match(SqlBaseParser.T__3);
	        this.state = 2925;
	        this.match(SqlBaseParser.REFERENCES);
	        this.state = 2926;
	        this.multipartIdentifier();
	        this.state = 2931;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===SqlBaseParser.T__1) {
	            this.state = 2927;
	            this.match(SqlBaseParser.T__1);
	            this.state = 2928;
	            this.keyNameList();
	            this.state = 2929;
	            this.match(SqlBaseParser.T__3);
	        }

	        this.state = 2936;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===SqlBaseParser.NOT || _la===SqlBaseParser.ON || ((((_la - 266)) & ~0x1f) == 0 && ((1 << (_la - 266)) & ((1 << (SqlBaseParser.DEFERRABLE - 266)) | (1 << (SqlBaseParser.INITIALLY - 266)) | (1 << (SqlBaseParser.NORELY - 266)) | (1 << (SqlBaseParser.MATCH - 266)))) !== 0)) {
	            this.state = 2933;
	            this.foreignKeyOptions();
	            this.state = 2938;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	tableConstraintName() {
	    let localctx = new TableConstraintNameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 250, SqlBaseParser.RULE_tableConstraintName);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2939;
	        this.match(SqlBaseParser.CONSTRAINT);
	        this.state = 2940;
	        this.identifier();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	keyNameList() {
	    let localctx = new KeyNameListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 252, SqlBaseParser.RULE_keyNameList);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2942;
	        this.identifier();
	        this.state = 2947;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===SqlBaseParser.T__2) {
	            this.state = 2943;
	            this.match(SqlBaseParser.T__2);
	            this.state = 2944;
	            this.identifier();
	            this.state = 2949;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	foreignKeyOptions() {
	    let localctx = new ForeignKeyOptionsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 254, SqlBaseParser.RULE_foreignKeyOptions);
	    try {
	        this.state = 2952;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case SqlBaseParser.ON:
	        case SqlBaseParser.MATCH:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2950;
	            this.foreignKeyConstraintOptions();
	            break;
	        case SqlBaseParser.NOT:
	        case SqlBaseParser.DEFERRABLE:
	        case SqlBaseParser.INITIALLY:
	        case SqlBaseParser.NORELY:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2951;
	            this.constraintOptions();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	foreignKeyConstraintOptions() {
	    let localctx = new ForeignKeyConstraintOptionsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 256, SqlBaseParser.RULE_foreignKeyConstraintOptions);
	    try {
	        this.state = 2964;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,378,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2954;
	            this.match(SqlBaseParser.MATCH);
	            this.state = 2955;
	            this.match(SqlBaseParser.FULL);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2956;
	            this.match(SqlBaseParser.ON);
	            this.state = 2957;
	            this.match(SqlBaseParser.UPDATE);
	            this.state = 2958;
	            this.match(SqlBaseParser.NO);
	            this.state = 2959;
	            this.match(SqlBaseParser.ACTION);
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 2960;
	            this.match(SqlBaseParser.ON);
	            this.state = 2961;
	            this.match(SqlBaseParser.DELETE);
	            this.state = 2962;
	            this.match(SqlBaseParser.NO);
	            this.state = 2963;
	            this.match(SqlBaseParser.ACTION);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	constraintOptions() {
	    let localctx = new ConstraintOptionsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 258, SqlBaseParser.RULE_constraintOptions);
	    try {
	        this.state = 2972;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case SqlBaseParser.NOT:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2966;
	            this.match(SqlBaseParser.NOT);
	            this.state = 2967;
	            this.match(SqlBaseParser.ENFORCED);
	            break;
	        case SqlBaseParser.DEFERRABLE:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2968;
	            this.match(SqlBaseParser.DEFERRABLE);
	            break;
	        case SqlBaseParser.INITIALLY:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 2969;
	            this.match(SqlBaseParser.INITIALLY);
	            this.state = 2970;
	            this.match(SqlBaseParser.DEFERRED);
	            break;
	        case SqlBaseParser.NORELY:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 2971;
	            this.match(SqlBaseParser.NORELY);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	columnConstraint() {
	    let localctx = new ColumnConstraintContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 260, SqlBaseParser.RULE_columnConstraint);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2974;
	        this.columnConstraintType();
	        this.state = 2978;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,380,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 2975;
	                this.columnConstraintType(); 
	            }
	            this.state = 2980;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,380,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	columnConstraintType() {
	    let localctx = new ColumnConstraintTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 262, SqlBaseParser.RULE_columnConstraintType);
	    try {
	        this.state = 2986;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case SqlBaseParser.NOT:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2981;
	            this.match(SqlBaseParser.NOT);
	            this.state = 2982;
	            this.match(SqlBaseParser.NULL);
	            break;
	        case SqlBaseParser.PRIMARY:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2983;
	            this.match(SqlBaseParser.PRIMARY);
	            this.state = 2984;
	            this.match(SqlBaseParser.KEY);
	            break;
	        case SqlBaseParser.KW_GENERATED:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 2985;
	            this.columnGeneratedAs();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	columnGeneratedAs() {
	    let localctx = new ColumnGeneratedAsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 264, SqlBaseParser.RULE_columnGeneratedAs);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2988;
	        this.match(SqlBaseParser.KW_GENERATED);
	        this.state = 2991;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,382,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 2989;
	            this.generatedAsExpression();
	            break;

	        case 2:
	            this.state = 2990;
	            this.generatedAsIdentity();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	generatedAsExpression() {
	    let localctx = new GeneratedAsExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 266, SqlBaseParser.RULE_generatedAsExpression);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2993;
	        this.match(SqlBaseParser.KW_ALWAYS);
	        this.state = 2994;
	        this.match(SqlBaseParser.AS);
	        this.state = 2995;
	        this.match(SqlBaseParser.T__1);
	        this.state = 2996;
	        this.expression();
	        this.state = 2997;
	        this.match(SqlBaseParser.T__3);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	generatedAsIdentity() {
	    let localctx = new GeneratedAsIdentityContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 268, SqlBaseParser.RULE_generatedAsIdentity);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3002;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case SqlBaseParser.KW_ALWAYS:
	            this.state = 2999;
	            this.match(SqlBaseParser.KW_ALWAYS);
	            break;
	        case SqlBaseParser.BY:
	            this.state = 3000;
	            this.match(SqlBaseParser.BY);
	            this.state = 3001;
	            this.match(SqlBaseParser.KW_DEFAULT);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	        this.state = 3004;
	        this.match(SqlBaseParser.AS);
	        this.state = 3005;
	        this.match(SqlBaseParser.KW_IDENTITY);
	        this.state = 3018;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,386,this._ctx);
	        if(la_===1) {
	            this.state = 3006;
	            this.match(SqlBaseParser.T__1);
	            this.state = 3010;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===SqlBaseParser.START) {
	                this.state = 3007;
	                this.match(SqlBaseParser.START);
	                this.state = 3008;
	                this.match(SqlBaseParser.WITH);
	                this.state = 3009;
	                this.number();
	            }

	            this.state = 3015;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===SqlBaseParser.KW_INCREMENT) {
	                this.state = 3012;
	                this.match(SqlBaseParser.KW_INCREMENT);
	                this.state = 3013;
	                this.match(SqlBaseParser.BY);
	                this.state = 3014;
	                this.number();
	            }

	            this.state = 3017;
	            this.match(SqlBaseParser.T__3);

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	complexColTypeList() {
	    let localctx = new ComplexColTypeListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 270, SqlBaseParser.RULE_complexColTypeList);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3020;
	        this.complexColType();
	        this.state = 3025;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===SqlBaseParser.T__2) {
	            this.state = 3021;
	            this.match(SqlBaseParser.T__2);
	            this.state = 3022;
	            this.complexColType();
	            this.state = 3027;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	complexColType() {
	    let localctx = new ComplexColTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 272, SqlBaseParser.RULE_complexColType);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3028;
	        this.identifier();
	        this.state = 3029;
	        this.match(SqlBaseParser.T__10);
	        this.state = 3030;
	        this.dataType();
	        this.state = 3033;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===SqlBaseParser.NOT) {
	            this.state = 3031;
	            this.match(SqlBaseParser.NOT);
	            this.state = 3032;
	            this.match(SqlBaseParser.NULL);
	        }

	        this.state = 3036;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===SqlBaseParser.COMMENT) {
	            this.state = 3035;
	            this.commentSpec();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	whenClause() {
	    let localctx = new WhenClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 274, SqlBaseParser.RULE_whenClause);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3038;
	        this.match(SqlBaseParser.WHEN);
	        this.state = 3039;
	        localctx.condition = this.expression();
	        this.state = 3040;
	        this.match(SqlBaseParser.THEN);
	        this.state = 3041;
	        localctx.result = this.expression();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	windowClause() {
	    let localctx = new WindowClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 276, SqlBaseParser.RULE_windowClause);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3043;
	        this.match(SqlBaseParser.WINDOW);
	        this.state = 3044;
	        this.namedWindow();
	        this.state = 3049;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,390,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 3045;
	                this.match(SqlBaseParser.T__2);
	                this.state = 3046;
	                this.namedWindow(); 
	            }
	            this.state = 3051;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,390,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	namedWindow() {
	    let localctx = new NamedWindowContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 278, SqlBaseParser.RULE_namedWindow);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3052;
	        localctx.name = this.errorCapturingIdentifier();
	        this.state = 3053;
	        this.match(SqlBaseParser.AS);
	        this.state = 3054;
	        this.windowSpec();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	windowSpec() {
	    let localctx = new WindowSpecContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 280, SqlBaseParser.RULE_windowSpec);
	    var _la = 0; // Token type
	    try {
	        this.state = 3102;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,398,this._ctx);
	        switch(la_) {
	        case 1:
	            localctx = new WindowRefContext(this, localctx);
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3056;
	            localctx.name = this.errorCapturingIdentifier();
	            break;

	        case 2:
	            localctx = new WindowRefContext(this, localctx);
	            this.enterOuterAlt(localctx, 2);
	            this.state = 3057;
	            this.match(SqlBaseParser.T__1);
	            this.state = 3058;
	            localctx.name = this.errorCapturingIdentifier();
	            this.state = 3059;
	            this.match(SqlBaseParser.T__3);
	            break;

	        case 3:
	            localctx = new WindowDefContext(this, localctx);
	            this.enterOuterAlt(localctx, 3);
	            this.state = 3061;
	            this.match(SqlBaseParser.T__1);
	            this.state = 3096;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case SqlBaseParser.CLUSTER:
	                this.state = 3062;
	                this.match(SqlBaseParser.CLUSTER);
	                this.state = 3063;
	                this.match(SqlBaseParser.BY);
	                this.state = 3064;
	                localctx._expression = this.expression();
	                localctx.partition.push(localctx._expression);
	                this.state = 3069;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                while(_la===SqlBaseParser.T__2) {
	                    this.state = 3065;
	                    this.match(SqlBaseParser.T__2);
	                    this.state = 3066;
	                    localctx._expression = this.expression();
	                    localctx.partition.push(localctx._expression);
	                    this.state = 3071;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                }
	                break;
	            case SqlBaseParser.T__3:
	            case SqlBaseParser.DISTRIBUTE:
	            case SqlBaseParser.ORDER:
	            case SqlBaseParser.PARTITION:
	            case SqlBaseParser.RANGE:
	            case SqlBaseParser.ROWS:
	            case SqlBaseParser.SORT:
	                this.state = 3082;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===SqlBaseParser.DISTRIBUTE || _la===SqlBaseParser.PARTITION) {
	                    this.state = 3072;
	                    _la = this._input.LA(1);
	                    if(!(_la===SqlBaseParser.DISTRIBUTE || _la===SqlBaseParser.PARTITION)) {
	                    this._errHandler.recoverInline(this);
	                    }
	                    else {
	                    	this._errHandler.reportMatch(this);
	                        this.consume();
	                    }
	                    this.state = 3073;
	                    this.match(SqlBaseParser.BY);
	                    this.state = 3074;
	                    localctx._expression = this.expression();
	                    localctx.partition.push(localctx._expression);
	                    this.state = 3079;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                    while(_la===SqlBaseParser.T__2) {
	                        this.state = 3075;
	                        this.match(SqlBaseParser.T__2);
	                        this.state = 3076;
	                        localctx._expression = this.expression();
	                        localctx.partition.push(localctx._expression);
	                        this.state = 3081;
	                        this._errHandler.sync(this);
	                        _la = this._input.LA(1);
	                    }
	                }

	                this.state = 3094;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===SqlBaseParser.ORDER || _la===SqlBaseParser.SORT) {
	                    this.state = 3084;
	                    _la = this._input.LA(1);
	                    if(!(_la===SqlBaseParser.ORDER || _la===SqlBaseParser.SORT)) {
	                    this._errHandler.recoverInline(this);
	                    }
	                    else {
	                    	this._errHandler.reportMatch(this);
	                        this.consume();
	                    }
	                    this.state = 3085;
	                    this.match(SqlBaseParser.BY);
	                    this.state = 3086;
	                    this.sortItem();
	                    this.state = 3091;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                    while(_la===SqlBaseParser.T__2) {
	                        this.state = 3087;
	                        this.match(SqlBaseParser.T__2);
	                        this.state = 3088;
	                        this.sortItem();
	                        this.state = 3093;
	                        this._errHandler.sync(this);
	                        _la = this._input.LA(1);
	                    }
	                }

	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            this.state = 3099;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===SqlBaseParser.RANGE || _la===SqlBaseParser.ROWS) {
	                this.state = 3098;
	                this.windowFrame();
	            }

	            this.state = 3101;
	            this.match(SqlBaseParser.T__3);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	windowFrame() {
	    let localctx = new WindowFrameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 282, SqlBaseParser.RULE_windowFrame);
	    try {
	        this.state = 3120;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,399,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3104;
	            localctx.frameType = this.match(SqlBaseParser.RANGE);
	            this.state = 3105;
	            localctx.start = this.frameBound();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 3106;
	            localctx.frameType = this.match(SqlBaseParser.ROWS);
	            this.state = 3107;
	            localctx.start = this.frameBound();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 3108;
	            localctx.frameType = this.match(SqlBaseParser.RANGE);
	            this.state = 3109;
	            this.match(SqlBaseParser.BETWEEN);
	            this.state = 3110;
	            localctx.start = this.frameBound();
	            this.state = 3111;
	            this.match(SqlBaseParser.AND);
	            this.state = 3112;
	            localctx.end = this.frameBound();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 3114;
	            localctx.frameType = this.match(SqlBaseParser.ROWS);
	            this.state = 3115;
	            this.match(SqlBaseParser.BETWEEN);
	            this.state = 3116;
	            localctx.start = this.frameBound();
	            this.state = 3117;
	            this.match(SqlBaseParser.AND);
	            this.state = 3118;
	            localctx.end = this.frameBound();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	frameBound() {
	    let localctx = new FrameBoundContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 284, SqlBaseParser.RULE_frameBound);
	    var _la = 0; // Token type
	    try {
	        this.state = 3129;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,400,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3122;
	            this.match(SqlBaseParser.UNBOUNDED);
	            this.state = 3123;
	            localctx.boundType = this._input.LT(1);
	            _la = this._input.LA(1);
	            if(!(_la===SqlBaseParser.FOLLOWING || _la===SqlBaseParser.PRECEDING)) {
	                localctx.boundType = this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 3124;
	            localctx.boundType = this.match(SqlBaseParser.CURRENT);
	            this.state = 3125;
	            this.match(SqlBaseParser.ROW);
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 3126;
	            this.expression();
	            this.state = 3127;
	            localctx.boundType = this._input.LT(1);
	            _la = this._input.LA(1);
	            if(!(_la===SqlBaseParser.FOLLOWING || _la===SqlBaseParser.PRECEDING)) {
	                localctx.boundType = this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	qualifiedNameList() {
	    let localctx = new QualifiedNameListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 286, SqlBaseParser.RULE_qualifiedNameList);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3131;
	        this.qualifiedName();
	        this.state = 3136;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===SqlBaseParser.T__2) {
	            this.state = 3132;
	            this.match(SqlBaseParser.T__2);
	            this.state = 3133;
	            this.qualifiedName();
	            this.state = 3138;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	functionName() {
	    let localctx = new FunctionNameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 288, SqlBaseParser.RULE_functionName);
	    try {
	        this.state = 3143;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,402,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3139;
	            this.qualifiedName();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 3140;
	            this.match(SqlBaseParser.FILTER);
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 3141;
	            this.match(SqlBaseParser.LEFT);
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 3142;
	            this.match(SqlBaseParser.RIGHT);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	qualifiedName() {
	    let localctx = new QualifiedNameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 290, SqlBaseParser.RULE_qualifiedName);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3145;
	        this.identifier();
	        this.state = 3150;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,403,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 3146;
	                this.match(SqlBaseParser.T__4);
	                this.state = 3147;
	                this.identifier(); 
	            }
	            this.state = 3152;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,403,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	errorCapturingIdentifier() {
	    let localctx = new ErrorCapturingIdentifierContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 292, SqlBaseParser.RULE_errorCapturingIdentifier);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3153;
	        this.identifier();
	        this.state = 3154;
	        this.errorCapturingIdentifierExtra();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	errorCapturingIdentifierExtra() {
	    let localctx = new ErrorCapturingIdentifierExtraContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 294, SqlBaseParser.RULE_errorCapturingIdentifierExtra);
	    try {
	        this.state = 3163;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,405,this._ctx);
	        switch(la_) {
	        case 1:
	            localctx = new ErrorIdentContext(this, localctx);
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3158; 
	            this._errHandler.sync(this);
	            var _alt = 1;
	            do {
	            	switch (_alt) {
	            	case 1:
	            		this.state = 3156;
	            		this.match(SqlBaseParser.MINUS);
	            		this.state = 3157;
	            		this.identifier();
	            		break;
	            	default:
	            		throw new antlr4.error.NoViableAltException(this);
	            	}
	            	this.state = 3160; 
	            	this._errHandler.sync(this);
	            	_alt = this._interp.adaptivePredict(this._input,404, this._ctx);
	            } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
	            break;

	        case 2:
	            localctx = new RealIdentContext(this, localctx);
	            this.enterOuterAlt(localctx, 2);

	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	identifier() {
	    let localctx = new IdentifierContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 296, SqlBaseParser.RULE_identifier);
	    try {
	        this.state = 3168;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,406,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3165;
	            this.strictIdentifier();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 3166;
	            if (!( !SQL_standard_keyword_behavior)) {
	                throw new antlr4.error.FailedPredicateException(this, "!SQL_standard_keyword_behavior");
	            }
	            this.state = 3167;
	            this.strictNonReserved();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	strictIdentifier() {
	    let localctx = new StrictIdentifierContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 298, SqlBaseParser.RULE_strictIdentifier);
	    try {
	        this.state = 3176;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,407,this._ctx);
	        switch(la_) {
	        case 1:
	            localctx = new UnquotedIdentifierContext(this, localctx);
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3170;
	            this.match(SqlBaseParser.IDENTIFIER);
	            break;

	        case 2:
	            localctx = new QuotedIdentifierAlternativeContext(this, localctx);
	            this.enterOuterAlt(localctx, 2);
	            this.state = 3171;
	            this.quotedIdentifier();
	            break;

	        case 3:
	            localctx = new UnquotedIdentifierContext(this, localctx);
	            this.enterOuterAlt(localctx, 3);
	            this.state = 3172;
	            if (!( SQL_standard_keyword_behavior)) {
	                throw new antlr4.error.FailedPredicateException(this, "SQL_standard_keyword_behavior");
	            }
	            this.state = 3173;
	            this.ansiNonReserved();
	            break;

	        case 4:
	            localctx = new UnquotedIdentifierContext(this, localctx);
	            this.enterOuterAlt(localctx, 4);
	            this.state = 3174;
	            if (!( !SQL_standard_keyword_behavior)) {
	                throw new antlr4.error.FailedPredicateException(this, "!SQL_standard_keyword_behavior");
	            }
	            this.state = 3175;
	            this.nonReserved();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	quotedIdentifier() {
	    let localctx = new QuotedIdentifierContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 300, SqlBaseParser.RULE_quotedIdentifier);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3178;
	        this.match(SqlBaseParser.BACKQUOTED_IDENTIFIER);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	number() {
	    let localctx = new NumberContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 302, SqlBaseParser.RULE_number);
	    var _la = 0; // Token type
	    try {
	        this.state = 3223;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,418,this._ctx);
	        switch(la_) {
	        case 1:
	            localctx = new ExponentLiteralContext(this, localctx);
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3180;
	            if (!( !legacy_exponent_literal_as_decimal_enabled)) {
	                throw new antlr4.error.FailedPredicateException(this, "!legacy_exponent_literal_as_decimal_enabled");
	            }
	            this.state = 3182;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===SqlBaseParser.MINUS) {
	                this.state = 3181;
	                this.match(SqlBaseParser.MINUS);
	            }

	            this.state = 3184;
	            this.match(SqlBaseParser.EXPONENT_VALUE);
	            break;

	        case 2:
	            localctx = new DecimalLiteralContext(this, localctx);
	            this.enterOuterAlt(localctx, 2);
	            this.state = 3185;
	            if (!( !legacy_exponent_literal_as_decimal_enabled)) {
	                throw new antlr4.error.FailedPredicateException(this, "!legacy_exponent_literal_as_decimal_enabled");
	            }
	            this.state = 3187;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===SqlBaseParser.MINUS) {
	                this.state = 3186;
	                this.match(SqlBaseParser.MINUS);
	            }

	            this.state = 3189;
	            this.match(SqlBaseParser.DECIMAL_VALUE);
	            break;

	        case 3:
	            localctx = new LegacyDecimalLiteralContext(this, localctx);
	            this.enterOuterAlt(localctx, 3);
	            this.state = 3190;
	            if (!( legacy_exponent_literal_as_decimal_enabled)) {
	                throw new antlr4.error.FailedPredicateException(this, "legacy_exponent_literal_as_decimal_enabled");
	            }
	            this.state = 3192;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===SqlBaseParser.MINUS) {
	                this.state = 3191;
	                this.match(SqlBaseParser.MINUS);
	            }

	            this.state = 3194;
	            _la = this._input.LA(1);
	            if(!(_la===SqlBaseParser.EXPONENT_VALUE || _la===SqlBaseParser.DECIMAL_VALUE)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            break;

	        case 4:
	            localctx = new IntegerLiteralContext(this, localctx);
	            this.enterOuterAlt(localctx, 4);
	            this.state = 3196;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===SqlBaseParser.MINUS) {
	                this.state = 3195;
	                this.match(SqlBaseParser.MINUS);
	            }

	            this.state = 3198;
	            this.match(SqlBaseParser.INTEGER_VALUE);
	            break;

	        case 5:
	            localctx = new BigIntLiteralContext(this, localctx);
	            this.enterOuterAlt(localctx, 5);
	            this.state = 3200;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===SqlBaseParser.MINUS) {
	                this.state = 3199;
	                this.match(SqlBaseParser.MINUS);
	            }

	            this.state = 3202;
	            this.match(SqlBaseParser.BIGINT_LITERAL);
	            break;

	        case 6:
	            localctx = new SmallIntLiteralContext(this, localctx);
	            this.enterOuterAlt(localctx, 6);
	            this.state = 3204;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===SqlBaseParser.MINUS) {
	                this.state = 3203;
	                this.match(SqlBaseParser.MINUS);
	            }

	            this.state = 3206;
	            this.match(SqlBaseParser.SMALLINT_LITERAL);
	            break;

	        case 7:
	            localctx = new TinyIntLiteralContext(this, localctx);
	            this.enterOuterAlt(localctx, 7);
	            this.state = 3208;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===SqlBaseParser.MINUS) {
	                this.state = 3207;
	                this.match(SqlBaseParser.MINUS);
	            }

	            this.state = 3210;
	            this.match(SqlBaseParser.TINYINT_LITERAL);
	            break;

	        case 8:
	            localctx = new DoubleLiteralContext(this, localctx);
	            this.enterOuterAlt(localctx, 8);
	            this.state = 3212;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===SqlBaseParser.MINUS) {
	                this.state = 3211;
	                this.match(SqlBaseParser.MINUS);
	            }

	            this.state = 3214;
	            this.match(SqlBaseParser.DOUBLE_LITERAL);
	            break;

	        case 9:
	            localctx = new FloatLiteralContext(this, localctx);
	            this.enterOuterAlt(localctx, 9);
	            this.state = 3216;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===SqlBaseParser.MINUS) {
	                this.state = 3215;
	                this.match(SqlBaseParser.MINUS);
	            }

	            this.state = 3218;
	            this.match(SqlBaseParser.FLOAT_LITERAL);
	            break;

	        case 10:
	            localctx = new BigDecimalLiteralContext(this, localctx);
	            this.enterOuterAlt(localctx, 10);
	            this.state = 3220;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===SqlBaseParser.MINUS) {
	                this.state = 3219;
	                this.match(SqlBaseParser.MINUS);
	            }

	            this.state = 3222;
	            this.match(SqlBaseParser.BIGDECIMAL_LITERAL);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	alterColumnAction() {
	    let localctx = new AlterColumnActionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 304, SqlBaseParser.RULE_alterColumnAction);
	    var _la = 0; // Token type
	    try {
	        this.state = 3232;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case SqlBaseParser.TYPE:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3225;
	            this.match(SqlBaseParser.TYPE);
	            this.state = 3226;
	            this.dataType();
	            break;
	        case SqlBaseParser.COMMENT:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 3227;
	            this.commentSpec();
	            break;
	        case SqlBaseParser.AFTER:
	        case SqlBaseParser.FIRST:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 3228;
	            this.colPosition();
	            break;
	        case SqlBaseParser.DROP:
	        case SqlBaseParser.SET:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 3229;
	            localctx.setOrDrop = this._input.LT(1);
	            _la = this._input.LA(1);
	            if(!(_la===SqlBaseParser.DROP || _la===SqlBaseParser.SET)) {
	                localctx.setOrDrop = this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 3230;
	            this.match(SqlBaseParser.NOT);
	            this.state = 3231;
	            this.match(SqlBaseParser.NULL);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	ansiNonReserved() {
	    let localctx = new AnsiNonReservedContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 306, SqlBaseParser.RULE_ansiNonReserved);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3234;
	        _la = this._input.LA(1);
	        if(!(((((_la - 12)) & ~0x1f) == 0 && ((1 << (_la - 12)) & ((1 << (SqlBaseParser.ADD - 12)) | (1 << (SqlBaseParser.AFTER - 12)) | (1 << (SqlBaseParser.ALTER - 12)) | (1 << (SqlBaseParser.ANALYZE - 12)) | (1 << (SqlBaseParser.ANTI - 12)) | (1 << (SqlBaseParser.ARCHIVE - 12)) | (1 << (SqlBaseParser.ARRAY - 12)) | (1 << (SqlBaseParser.ASC - 12)) | (1 << (SqlBaseParser.AT - 12)) | (1 << (SqlBaseParser.BETWEEN - 12)) | (1 << (SqlBaseParser.BUCKET - 12)) | (1 << (SqlBaseParser.BUCKETS - 12)) | (1 << (SqlBaseParser.BY - 12)) | (1 << (SqlBaseParser.CACHE - 12)) | (1 << (SqlBaseParser.CASCADE - 12)) | (1 << (SqlBaseParser.CHANGE - 12)) | (1 << (SqlBaseParser.CLEAR - 12)) | (1 << (SqlBaseParser.CLUSTER - 12)) | (1 << (SqlBaseParser.CLUSTERED - 12)) | (1 << (SqlBaseParser.CODEGEN - 12)) | (1 << (SqlBaseParser.COLLECTION - 12)))) !== 0) || ((((_la - 44)) & ~0x1f) == 0 && ((1 << (_la - 44)) & ((1 << (SqlBaseParser.COLUMNS - 44)) | (1 << (SqlBaseParser.COMMENT - 44)) | (1 << (SqlBaseParser.COMMIT - 44)) | (1 << (SqlBaseParser.COMPACT - 44)) | (1 << (SqlBaseParser.COMPACTIONS - 44)) | (1 << (SqlBaseParser.COMPUTE - 44)) | (1 << (SqlBaseParser.CONCATENATE - 44)) | (1 << (SqlBaseParser.COST - 44)) | (1 << (SqlBaseParser.CUBE - 44)) | (1 << (SqlBaseParser.CURRENT - 44)) | (1 << (SqlBaseParser.DATA - 44)) | (1 << (SqlBaseParser.DATABASE - 44)) | (1 << (SqlBaseParser.DATABASES - 44)) | (1 << (SqlBaseParser.DBPROPERTIES - 44)) | (1 << (SqlBaseParser.DEFINED - 44)) | (1 << (SqlBaseParser.DELETE - 44)) | (1 << (SqlBaseParser.DELIMITED - 44)) | (1 << (SqlBaseParser.DESC - 44)) | (1 << (SqlBaseParser.DESCRIBE - 44)) | (1 << (SqlBaseParser.DFS - 44)) | (1 << (SqlBaseParser.DIRECTORIES - 44)) | (1 << (SqlBaseParser.DIRECTORY - 44)) | (1 << (SqlBaseParser.DISTRIBUTE - 44)) | (1 << (SqlBaseParser.DIV - 44)))) !== 0) || ((((_la - 76)) & ~0x1f) == 0 && ((1 << (_la - 76)) & ((1 << (SqlBaseParser.DROP - 76)) | (1 << (SqlBaseParser.ESCAPED - 76)) | (1 << (SqlBaseParser.EXCHANGE - 76)) | (1 << (SqlBaseParser.EXISTS - 76)) | (1 << (SqlBaseParser.EXPLAIN - 76)) | (1 << (SqlBaseParser.EXPORT - 76)) | (1 << (SqlBaseParser.EXTENDED - 76)) | (1 << (SqlBaseParser.EXTERNAL - 76)) | (1 << (SqlBaseParser.EXTRACT - 76)) | (1 << (SqlBaseParser.FIELDS - 76)) | (1 << (SqlBaseParser.FILEFORMAT - 76)) | (1 << (SqlBaseParser.FIRST - 76)) | (1 << (SqlBaseParser.FOLLOWING - 76)) | (1 << (SqlBaseParser.FORMAT - 76)) | (1 << (SqlBaseParser.FORMATTED - 76)) | (1 << (SqlBaseParser.FUNCTION - 76)) | (1 << (SqlBaseParser.FUNCTIONS - 76)) | (1 << (SqlBaseParser.GLOBAL - 76)) | (1 << (SqlBaseParser.GROUPING - 76)))) !== 0) || ((((_la - 109)) & ~0x1f) == 0 && ((1 << (_la - 109)) & ((1 << (SqlBaseParser.IF - 109)) | (1 << (SqlBaseParser.IGNORE - 109)) | (1 << (SqlBaseParser.IMPORT - 109)) | (1 << (SqlBaseParser.INDEX - 109)) | (1 << (SqlBaseParser.INDEXES - 109)) | (1 << (SqlBaseParser.INPATH - 109)) | (1 << (SqlBaseParser.INPUTFORMAT - 109)) | (1 << (SqlBaseParser.INSERT - 109)) | (1 << (SqlBaseParser.INTERVAL - 109)) | (1 << (SqlBaseParser.ITEMS - 109)) | (1 << (SqlBaseParser.KEYS - 109)) | (1 << (SqlBaseParser.LAST - 109)) | (1 << (SqlBaseParser.LATERAL - 109)) | (1 << (SqlBaseParser.LAZY - 109)) | (1 << (SqlBaseParser.LIKE - 109)) | (1 << (SqlBaseParser.LIMIT - 109)) | (1 << (SqlBaseParser.LINES - 109)) | (1 << (SqlBaseParser.LIST - 109)) | (1 << (SqlBaseParser.LOAD - 109)) | (1 << (SqlBaseParser.LOCAL - 109)) | (1 << (SqlBaseParser.LOCATION - 109)) | (1 << (SqlBaseParser.LOCK - 109)) | (1 << (SqlBaseParser.LOCKS - 109)) | (1 << (SqlBaseParser.LOGICAL - 109)))) !== 0) || ((((_la - 141)) & ~0x1f) == 0 && ((1 << (_la - 141)) & ((1 << (SqlBaseParser.MACRO - 141)) | (1 << (SqlBaseParser.MAP - 141)) | (1 << (SqlBaseParser.MATCHED - 141)) | (1 << (SqlBaseParser.MERGE - 141)) | (1 << (SqlBaseParser.MSCK - 141)) | (1 << (SqlBaseParser.NAMESPACE - 141)) | (1 << (SqlBaseParser.NAMESPACES - 141)) | (1 << (SqlBaseParser.NO - 141)) | (1 << (SqlBaseParser.NULLS - 141)) | (1 << (SqlBaseParser.OF - 141)) | (1 << (SqlBaseParser.OPTION - 141)) | (1 << (SqlBaseParser.OPTIONS - 141)) | (1 << (SqlBaseParser.OUT - 141)) | (1 << (SqlBaseParser.OUTPUTFORMAT - 141)) | (1 << (SqlBaseParser.OVER - 141)) | (1 << (SqlBaseParser.OVERLAY - 141)) | (1 << (SqlBaseParser.OVERWRITE - 141)) | (1 << (SqlBaseParser.PARTITION - 141)) | (1 << (SqlBaseParser.PARTITIONED - 141)) | (1 << (SqlBaseParser.PARTITIONS - 141)) | (1 << (SqlBaseParser.PERCENTLIT - 141)) | (1 << (SqlBaseParser.PIVOT - 141)) | (1 << (SqlBaseParser.PLACING - 141)))) !== 0) || ((((_la - 173)) & ~0x1f) == 0 && ((1 << (_la - 173)) & ((1 << (SqlBaseParser.POSITION - 173)) | (1 << (SqlBaseParser.PRECEDING - 173)) | (1 << (SqlBaseParser.PRINCIPALS - 173)) | (1 << (SqlBaseParser.PROPERTIES - 173)) | (1 << (SqlBaseParser.PURGE - 173)) | (1 << (SqlBaseParser.QUERY - 173)) | (1 << (SqlBaseParser.RANGE - 173)) | (1 << (SqlBaseParser.RECORDREADER - 173)) | (1 << (SqlBaseParser.RECORDWRITER - 173)) | (1 << (SqlBaseParser.RECOVER - 173)) | (1 << (SqlBaseParser.REDUCE - 173)) | (1 << (SqlBaseParser.REFRESH - 173)) | (1 << (SqlBaseParser.RENAME - 173)) | (1 << (SqlBaseParser.REPAIR - 173)) | (1 << (SqlBaseParser.REPLACE - 173)) | (1 << (SqlBaseParser.RESET - 173)) | (1 << (SqlBaseParser.RESPECT - 173)) | (1 << (SqlBaseParser.RESTRICT - 173)) | (1 << (SqlBaseParser.REVOKE - 173)) | (1 << (SqlBaseParser.RLIKE - 173)) | (1 << (SqlBaseParser.ROLE - 173)) | (1 << (SqlBaseParser.ROLES - 173)) | (1 << (SqlBaseParser.ROLLBACK - 173)) | (1 << (SqlBaseParser.ROLLUP - 173)) | (1 << (SqlBaseParser.ROW - 173)) | (1 << (SqlBaseParser.ROWS - 173)) | (1 << (SqlBaseParser.SCHEMA - 173)) | (1 << (SqlBaseParser.SEMI - 173)))) !== 0) || ((((_la - 205)) & ~0x1f) == 0 && ((1 << (_la - 205)) & ((1 << (SqlBaseParser.SEPARATED - 205)) | (1 << (SqlBaseParser.SERDE - 205)) | (1 << (SqlBaseParser.SERDEPROPERTIES - 205)) | (1 << (SqlBaseParser.SET - 205)) | (1 << (SqlBaseParser.SETMINUS - 205)) | (1 << (SqlBaseParser.SETS - 205)) | (1 << (SqlBaseParser.SHOW - 205)) | (1 << (SqlBaseParser.SKEWED - 205)) | (1 << (SqlBaseParser.SORT - 205)) | (1 << (SqlBaseParser.SORTED - 205)) | (1 << (SqlBaseParser.START - 205)) | (1 << (SqlBaseParser.STATISTICS - 205)) | (1 << (SqlBaseParser.STORED - 205)) | (1 << (SqlBaseParser.STRATIFY - 205)) | (1 << (SqlBaseParser.STRUCT - 205)) | (1 << (SqlBaseParser.SUBSTR - 205)) | (1 << (SqlBaseParser.SUBSTRING - 205)) | (1 << (SqlBaseParser.SYNC - 205)) | (1 << (SqlBaseParser.TABLES - 205)) | (1 << (SqlBaseParser.TABLESAMPLE - 205)) | (1 << (SqlBaseParser.TBLPROPERTIES - 205)) | (1 << (SqlBaseParser.TEMPORARY - 205)) | (1 << (SqlBaseParser.TERMINATED - 205)) | (1 << (SqlBaseParser.TOUCH - 205)) | (1 << (SqlBaseParser.TRANSACTION - 205)))) !== 0) || ((((_la - 237)) & ~0x1f) == 0 && ((1 << (_la - 237)) & ((1 << (SqlBaseParser.TRANSACTIONS - 237)) | (1 << (SqlBaseParser.TRANSFORM - 237)) | (1 << (SqlBaseParser.TRIM - 237)) | (1 << (SqlBaseParser.TRUE - 237)) | (1 << (SqlBaseParser.TRUNCATE - 237)) | (1 << (SqlBaseParser.TRY_CAST - 237)) | (1 << (SqlBaseParser.TYPE - 237)) | (1 << (SqlBaseParser.UNARCHIVE - 237)) | (1 << (SqlBaseParser.UNBOUNDED - 237)) | (1 << (SqlBaseParser.UNCACHE - 237)) | (1 << (SqlBaseParser.UNLOCK - 237)) | (1 << (SqlBaseParser.UNSET - 237)) | (1 << (SqlBaseParser.UPDATE - 237)) | (1 << (SqlBaseParser.USE - 237)) | (1 << (SqlBaseParser.VALUES - 237)) | (1 << (SqlBaseParser.VIEW - 237)) | (1 << (SqlBaseParser.VIEWS - 237)) | (1 << (SqlBaseParser.WINDOW - 237)) | (1 << (SqlBaseParser.ZONE - 237)))) !== 0))) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	strictNonReserved() {
	    let localctx = new StrictNonReservedContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 308, SqlBaseParser.RULE_strictNonReserved);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3236;
	        _la = this._input.LA(1);
	        if(!(_la===SqlBaseParser.ANTI || _la===SqlBaseParser.CROSS || _la===SqlBaseParser.EXCEPT || ((((_la - 101)) & ~0x1f) == 0 && ((1 << (_la - 101)) & ((1 << (SqlBaseParser.FULL - 101)) | (1 << (SqlBaseParser.INNER - 101)) | (1 << (SqlBaseParser.INTERSECT - 101)) | (1 << (SqlBaseParser.JOIN - 101)) | (1 << (SqlBaseParser.LEFT - 101)))) !== 0) || _la===SqlBaseParser.NATURAL || _la===SqlBaseParser.ON || ((((_la - 194)) & ~0x1f) == 0 && ((1 << (_la - 194)) & ((1 << (SqlBaseParser.RIGHT - 194)) | (1 << (SqlBaseParser.SEMI - 194)) | (1 << (SqlBaseParser.SETMINUS - 194)))) !== 0) || _la===SqlBaseParser.UNION || _la===SqlBaseParser.USING)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	nonReserved() {
	    let localctx = new NonReservedContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 310, SqlBaseParser.RULE_nonReserved);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3238;
	        _la = this._input.LA(1);
	        if(!((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << SqlBaseParser.ADD) | (1 << SqlBaseParser.AFTER) | (1 << SqlBaseParser.ALL) | (1 << SqlBaseParser.ALTER) | (1 << SqlBaseParser.ANALYZE) | (1 << SqlBaseParser.AND) | (1 << SqlBaseParser.ANY) | (1 << SqlBaseParser.ARCHIVE) | (1 << SqlBaseParser.ARRAY) | (1 << SqlBaseParser.AS) | (1 << SqlBaseParser.ASC) | (1 << SqlBaseParser.AT) | (1 << SqlBaseParser.AUTHORIZATION) | (1 << SqlBaseParser.BETWEEN) | (1 << SqlBaseParser.BOTH) | (1 << SqlBaseParser.BUCKET) | (1 << SqlBaseParser.BUCKETS) | (1 << SqlBaseParser.BY) | (1 << SqlBaseParser.CACHE))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (SqlBaseParser.CASCADE - 32)) | (1 << (SqlBaseParser.CASE - 32)) | (1 << (SqlBaseParser.CAST - 32)) | (1 << (SqlBaseParser.CHANGE - 32)) | (1 << (SqlBaseParser.CHECK - 32)) | (1 << (SqlBaseParser.CLEAR - 32)) | (1 << (SqlBaseParser.CLUSTER - 32)) | (1 << (SqlBaseParser.CLUSTERED - 32)) | (1 << (SqlBaseParser.CODEGEN - 32)) | (1 << (SqlBaseParser.COLLATE - 32)) | (1 << (SqlBaseParser.COLLECTION - 32)) | (1 << (SqlBaseParser.COLUMN - 32)) | (1 << (SqlBaseParser.COLUMNS - 32)) | (1 << (SqlBaseParser.COMMENT - 32)) | (1 << (SqlBaseParser.COMMIT - 32)) | (1 << (SqlBaseParser.COMPACT - 32)) | (1 << (SqlBaseParser.COMPACTIONS - 32)) | (1 << (SqlBaseParser.COMPUTE - 32)) | (1 << (SqlBaseParser.CONCATENATE - 32)) | (1 << (SqlBaseParser.CONSTRAINT - 32)) | (1 << (SqlBaseParser.COST - 32)) | (1 << (SqlBaseParser.CREATE - 32)) | (1 << (SqlBaseParser.CUBE - 32)) | (1 << (SqlBaseParser.CURRENT - 32)) | (1 << (SqlBaseParser.CURRENT_DATE - 32)) | (1 << (SqlBaseParser.CURRENT_TIME - 32)) | (1 << (SqlBaseParser.CURRENT_TIMESTAMP - 32)) | (1 << (SqlBaseParser.CURRENT_USER - 32)) | (1 << (SqlBaseParser.DATA - 32)) | (1 << (SqlBaseParser.DATABASE - 32)) | (1 << (SqlBaseParser.DATABASES - 32)))) !== 0) || ((((_la - 64)) & ~0x1f) == 0 && ((1 << (_la - 64)) & ((1 << (SqlBaseParser.DBPROPERTIES - 64)) | (1 << (SqlBaseParser.DEFINED - 64)) | (1 << (SqlBaseParser.DELETE - 64)) | (1 << (SqlBaseParser.DELIMITED - 64)) | (1 << (SqlBaseParser.DESC - 64)) | (1 << (SqlBaseParser.DESCRIBE - 64)) | (1 << (SqlBaseParser.DFS - 64)) | (1 << (SqlBaseParser.DIRECTORIES - 64)) | (1 << (SqlBaseParser.DIRECTORY - 64)) | (1 << (SqlBaseParser.DISTINCT - 64)) | (1 << (SqlBaseParser.DISTRIBUTE - 64)) | (1 << (SqlBaseParser.DIV - 64)) | (1 << (SqlBaseParser.DROP - 64)) | (1 << (SqlBaseParser.ELSE - 64)) | (1 << (SqlBaseParser.END - 64)) | (1 << (SqlBaseParser.ESCAPE - 64)) | (1 << (SqlBaseParser.ESCAPED - 64)) | (1 << (SqlBaseParser.EXCHANGE - 64)) | (1 << (SqlBaseParser.EXISTS - 64)) | (1 << (SqlBaseParser.EXPLAIN - 64)) | (1 << (SqlBaseParser.EXPORT - 64)) | (1 << (SqlBaseParser.EXTENDED - 64)) | (1 << (SqlBaseParser.EXTERNAL - 64)) | (1 << (SqlBaseParser.EXTRACT - 64)) | (1 << (SqlBaseParser.FALSE - 64)) | (1 << (SqlBaseParser.FETCH - 64)) | (1 << (SqlBaseParser.FIELDS - 64)) | (1 << (SqlBaseParser.FILTER - 64)) | (1 << (SqlBaseParser.FILEFORMAT - 64)) | (1 << (SqlBaseParser.FIRST - 64)) | (1 << (SqlBaseParser.FOLLOWING - 64)))) !== 0) || ((((_la - 96)) & ~0x1f) == 0 && ((1 << (_la - 96)) & ((1 << (SqlBaseParser.FOR - 96)) | (1 << (SqlBaseParser.FOREIGN - 96)) | (1 << (SqlBaseParser.FORMAT - 96)) | (1 << (SqlBaseParser.FORMATTED - 96)) | (1 << (SqlBaseParser.FROM - 96)) | (1 << (SqlBaseParser.FUNCTION - 96)) | (1 << (SqlBaseParser.FUNCTIONS - 96)) | (1 << (SqlBaseParser.GLOBAL - 96)) | (1 << (SqlBaseParser.GRANT - 96)) | (1 << (SqlBaseParser.GROUP - 96)) | (1 << (SqlBaseParser.GROUPING - 96)) | (1 << (SqlBaseParser.HAVING - 96)) | (1 << (SqlBaseParser.IF - 96)) | (1 << (SqlBaseParser.IGNORE - 96)) | (1 << (SqlBaseParser.IMPORT - 96)) | (1 << (SqlBaseParser.IN - 96)) | (1 << (SqlBaseParser.INDEX - 96)) | (1 << (SqlBaseParser.INDEXES - 96)) | (1 << (SqlBaseParser.INPATH - 96)) | (1 << (SqlBaseParser.INPUTFORMAT - 96)) | (1 << (SqlBaseParser.INSERT - 96)) | (1 << (SqlBaseParser.INTERVAL - 96)) | (1 << (SqlBaseParser.INTO - 96)) | (1 << (SqlBaseParser.IS - 96)) | (1 << (SqlBaseParser.ITEMS - 96)) | (1 << (SqlBaseParser.KEYS - 96)) | (1 << (SqlBaseParser.LAST - 96)) | (1 << (SqlBaseParser.LATERAL - 96)))) !== 0) || ((((_la - 128)) & ~0x1f) == 0 && ((1 << (_la - 128)) & ((1 << (SqlBaseParser.LAZY - 128)) | (1 << (SqlBaseParser.LEADING - 128)) | (1 << (SqlBaseParser.LIKE - 128)) | (1 << (SqlBaseParser.LIMIT - 128)) | (1 << (SqlBaseParser.LINES - 128)) | (1 << (SqlBaseParser.LIST - 128)) | (1 << (SqlBaseParser.LOAD - 128)) | (1 << (SqlBaseParser.LOCAL - 128)) | (1 << (SqlBaseParser.LOCATION - 128)) | (1 << (SqlBaseParser.LOCK - 128)) | (1 << (SqlBaseParser.LOCKS - 128)) | (1 << (SqlBaseParser.LOGICAL - 128)) | (1 << (SqlBaseParser.MACRO - 128)) | (1 << (SqlBaseParser.MAP - 128)) | (1 << (SqlBaseParser.MATCHED - 128)) | (1 << (SqlBaseParser.MERGE - 128)) | (1 << (SqlBaseParser.MSCK - 128)) | (1 << (SqlBaseParser.NAMESPACE - 128)) | (1 << (SqlBaseParser.NAMESPACES - 128)) | (1 << (SqlBaseParser.NO - 128)) | (1 << (SqlBaseParser.NOT - 128)) | (1 << (SqlBaseParser.NULL - 128)) | (1 << (SqlBaseParser.NULLS - 128)) | (1 << (SqlBaseParser.OF - 128)) | (1 << (SqlBaseParser.ONLY - 128)) | (1 << (SqlBaseParser.OPTION - 128)) | (1 << (SqlBaseParser.OPTIONS - 128)) | (1 << (SqlBaseParser.OR - 128)) | (1 << (SqlBaseParser.ORDER - 128)))) !== 0) || ((((_la - 160)) & ~0x1f) == 0 && ((1 << (_la - 160)) & ((1 << (SqlBaseParser.OUT - 160)) | (1 << (SqlBaseParser.OUTER - 160)) | (1 << (SqlBaseParser.OUTPUTFORMAT - 160)) | (1 << (SqlBaseParser.OVER - 160)) | (1 << (SqlBaseParser.OVERLAPS - 160)) | (1 << (SqlBaseParser.OVERLAY - 160)) | (1 << (SqlBaseParser.OVERWRITE - 160)) | (1 << (SqlBaseParser.PARTITION - 160)) | (1 << (SqlBaseParser.PARTITIONED - 160)) | (1 << (SqlBaseParser.PARTITIONS - 160)) | (1 << (SqlBaseParser.PERCENTLIT - 160)) | (1 << (SqlBaseParser.PIVOT - 160)) | (1 << (SqlBaseParser.PLACING - 160)) | (1 << (SqlBaseParser.POSITION - 160)) | (1 << (SqlBaseParser.PRECEDING - 160)) | (1 << (SqlBaseParser.PRIMARY - 160)) | (1 << (SqlBaseParser.PRINCIPALS - 160)) | (1 << (SqlBaseParser.PROPERTIES - 160)) | (1 << (SqlBaseParser.PURGE - 160)) | (1 << (SqlBaseParser.QUERY - 160)) | (1 << (SqlBaseParser.RANGE - 160)) | (1 << (SqlBaseParser.RECORDREADER - 160)) | (1 << (SqlBaseParser.RECORDWRITER - 160)) | (1 << (SqlBaseParser.RECOVER - 160)) | (1 << (SqlBaseParser.REDUCE - 160)) | (1 << (SqlBaseParser.REFERENCES - 160)) | (1 << (SqlBaseParser.REFRESH - 160)) | (1 << (SqlBaseParser.RENAME - 160)) | (1 << (SqlBaseParser.REPAIR - 160)) | (1 << (SqlBaseParser.REPLACE - 160)) | (1 << (SqlBaseParser.RESET - 160)) | (1 << (SqlBaseParser.RESPECT - 160)))) !== 0) || ((((_la - 192)) & ~0x1f) == 0 && ((1 << (_la - 192)) & ((1 << (SqlBaseParser.RESTRICT - 192)) | (1 << (SqlBaseParser.REVOKE - 192)) | (1 << (SqlBaseParser.RLIKE - 192)) | (1 << (SqlBaseParser.ROLE - 192)) | (1 << (SqlBaseParser.ROLES - 192)) | (1 << (SqlBaseParser.ROLLBACK - 192)) | (1 << (SqlBaseParser.ROLLUP - 192)) | (1 << (SqlBaseParser.ROW - 192)) | (1 << (SqlBaseParser.ROWS - 192)) | (1 << (SqlBaseParser.SCHEMA - 192)) | (1 << (SqlBaseParser.SELECT - 192)) | (1 << (SqlBaseParser.SEPARATED - 192)) | (1 << (SqlBaseParser.SERDE - 192)) | (1 << (SqlBaseParser.SERDEPROPERTIES - 192)) | (1 << (SqlBaseParser.SESSION_USER - 192)) | (1 << (SqlBaseParser.SET - 192)) | (1 << (SqlBaseParser.SETS - 192)) | (1 << (SqlBaseParser.SHOW - 192)) | (1 << (SqlBaseParser.SKEWED - 192)) | (1 << (SqlBaseParser.SOME - 192)) | (1 << (SqlBaseParser.SORT - 192)) | (1 << (SqlBaseParser.SORTED - 192)) | (1 << (SqlBaseParser.START - 192)) | (1 << (SqlBaseParser.STATISTICS - 192)) | (1 << (SqlBaseParser.STORED - 192)) | (1 << (SqlBaseParser.STRATIFY - 192)) | (1 << (SqlBaseParser.STRUCT - 192)) | (1 << (SqlBaseParser.SUBSTR - 192)) | (1 << (SqlBaseParser.SUBSTRING - 192)))) !== 0) || ((((_la - 224)) & ~0x1f) == 0 && ((1 << (_la - 224)) & ((1 << (SqlBaseParser.SYNC - 224)) | (1 << (SqlBaseParser.TABLE - 224)) | (1 << (SqlBaseParser.TABLES - 224)) | (1 << (SqlBaseParser.TABLESAMPLE - 224)) | (1 << (SqlBaseParser.TBLPROPERTIES - 224)) | (1 << (SqlBaseParser.TEMPORARY - 224)) | (1 << (SqlBaseParser.TERMINATED - 224)) | (1 << (SqlBaseParser.THEN - 224)) | (1 << (SqlBaseParser.TIME - 224)) | (1 << (SqlBaseParser.TO - 224)) | (1 << (SqlBaseParser.TOUCH - 224)) | (1 << (SqlBaseParser.TRAILING - 224)) | (1 << (SqlBaseParser.TRANSACTION - 224)) | (1 << (SqlBaseParser.TRANSACTIONS - 224)) | (1 << (SqlBaseParser.TRANSFORM - 224)) | (1 << (SqlBaseParser.TRIM - 224)) | (1 << (SqlBaseParser.TRUE - 224)) | (1 << (SqlBaseParser.TRUNCATE - 224)) | (1 << (SqlBaseParser.TRY_CAST - 224)) | (1 << (SqlBaseParser.TYPE - 224)) | (1 << (SqlBaseParser.UNARCHIVE - 224)) | (1 << (SqlBaseParser.UNBOUNDED - 224)) | (1 << (SqlBaseParser.UNCACHE - 224)) | (1 << (SqlBaseParser.UNIQUE - 224)) | (1 << (SqlBaseParser.UNKNOWN - 224)) | (1 << (SqlBaseParser.UNLOCK - 224)) | (1 << (SqlBaseParser.UNSET - 224)) | (1 << (SqlBaseParser.UPDATE - 224)) | (1 << (SqlBaseParser.USE - 224)) | (1 << (SqlBaseParser.USER - 224)))) !== 0) || ((((_la - 256)) & ~0x1f) == 0 && ((1 << (_la - 256)) & ((1 << (SqlBaseParser.VALUES - 256)) | (1 << (SqlBaseParser.VIEW - 256)) | (1 << (SqlBaseParser.VIEWS - 256)) | (1 << (SqlBaseParser.WHEN - 256)) | (1 << (SqlBaseParser.WHERE - 256)) | (1 << (SqlBaseParser.WINDOW - 256)) | (1 << (SqlBaseParser.WITH - 256)) | (1 << (SqlBaseParser.ZONE - 256)) | (1 << (SqlBaseParser.KW_DEFAULT - 256)))) !== 0))) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}


}

SqlBaseParser.EOF = antlr4.Token.EOF;
SqlBaseParser.T__0 = 1;
SqlBaseParser.T__1 = 2;
SqlBaseParser.T__2 = 3;
SqlBaseParser.T__3 = 4;
SqlBaseParser.T__4 = 5;
SqlBaseParser.T__5 = 6;
SqlBaseParser.T__6 = 7;
SqlBaseParser.T__7 = 8;
SqlBaseParser.T__8 = 9;
SqlBaseParser.T__9 = 10;
SqlBaseParser.T__10 = 11;
SqlBaseParser.ADD = 12;
SqlBaseParser.AFTER = 13;
SqlBaseParser.ALL = 14;
SqlBaseParser.ALTER = 15;
SqlBaseParser.ANALYZE = 16;
SqlBaseParser.AND = 17;
SqlBaseParser.ANTI = 18;
SqlBaseParser.ANY = 19;
SqlBaseParser.ARCHIVE = 20;
SqlBaseParser.ARRAY = 21;
SqlBaseParser.AS = 22;
SqlBaseParser.ASC = 23;
SqlBaseParser.AT = 24;
SqlBaseParser.AUTHORIZATION = 25;
SqlBaseParser.BETWEEN = 26;
SqlBaseParser.BOTH = 27;
SqlBaseParser.BUCKET = 28;
SqlBaseParser.BUCKETS = 29;
SqlBaseParser.BY = 30;
SqlBaseParser.CACHE = 31;
SqlBaseParser.CASCADE = 32;
SqlBaseParser.CASE = 33;
SqlBaseParser.CAST = 34;
SqlBaseParser.CHANGE = 35;
SqlBaseParser.CHECK = 36;
SqlBaseParser.CLEAR = 37;
SqlBaseParser.CLUSTER = 38;
SqlBaseParser.CLUSTERED = 39;
SqlBaseParser.CODEGEN = 40;
SqlBaseParser.COLLATE = 41;
SqlBaseParser.COLLECTION = 42;
SqlBaseParser.COLUMN = 43;
SqlBaseParser.COLUMNS = 44;
SqlBaseParser.COMMENT = 45;
SqlBaseParser.COMMIT = 46;
SqlBaseParser.COMPACT = 47;
SqlBaseParser.COMPACTIONS = 48;
SqlBaseParser.COMPUTE = 49;
SqlBaseParser.CONCATENATE = 50;
SqlBaseParser.CONSTRAINT = 51;
SqlBaseParser.COST = 52;
SqlBaseParser.CREATE = 53;
SqlBaseParser.CROSS = 54;
SqlBaseParser.CUBE = 55;
SqlBaseParser.CURRENT = 56;
SqlBaseParser.CURRENT_DATE = 57;
SqlBaseParser.CURRENT_TIME = 58;
SqlBaseParser.CURRENT_TIMESTAMP = 59;
SqlBaseParser.CURRENT_USER = 60;
SqlBaseParser.DATA = 61;
SqlBaseParser.DATABASE = 62;
SqlBaseParser.DATABASES = 63;
SqlBaseParser.DBPROPERTIES = 64;
SqlBaseParser.DEFINED = 65;
SqlBaseParser.DELETE = 66;
SqlBaseParser.DELIMITED = 67;
SqlBaseParser.DESC = 68;
SqlBaseParser.DESCRIBE = 69;
SqlBaseParser.DFS = 70;
SqlBaseParser.DIRECTORIES = 71;
SqlBaseParser.DIRECTORY = 72;
SqlBaseParser.DISTINCT = 73;
SqlBaseParser.DISTRIBUTE = 74;
SqlBaseParser.DIV = 75;
SqlBaseParser.DROP = 76;
SqlBaseParser.ELSE = 77;
SqlBaseParser.END = 78;
SqlBaseParser.ESCAPE = 79;
SqlBaseParser.ESCAPED = 80;
SqlBaseParser.EXCEPT = 81;
SqlBaseParser.EXCHANGE = 82;
SqlBaseParser.EXISTS = 83;
SqlBaseParser.EXPLAIN = 84;
SqlBaseParser.EXPORT = 85;
SqlBaseParser.EXTENDED = 86;
SqlBaseParser.EXTERNAL = 87;
SqlBaseParser.EXTRACT = 88;
SqlBaseParser.FALSE = 89;
SqlBaseParser.FETCH = 90;
SqlBaseParser.FIELDS = 91;
SqlBaseParser.FILTER = 92;
SqlBaseParser.FILEFORMAT = 93;
SqlBaseParser.FIRST = 94;
SqlBaseParser.FOLLOWING = 95;
SqlBaseParser.FOR = 96;
SqlBaseParser.FOREIGN = 97;
SqlBaseParser.FORMAT = 98;
SqlBaseParser.FORMATTED = 99;
SqlBaseParser.FROM = 100;
SqlBaseParser.FULL = 101;
SqlBaseParser.FUNCTION = 102;
SqlBaseParser.FUNCTIONS = 103;
SqlBaseParser.GLOBAL = 104;
SqlBaseParser.GRANT = 105;
SqlBaseParser.GROUP = 106;
SqlBaseParser.GROUPING = 107;
SqlBaseParser.HAVING = 108;
SqlBaseParser.IF = 109;
SqlBaseParser.IGNORE = 110;
SqlBaseParser.IMPORT = 111;
SqlBaseParser.IN = 112;
SqlBaseParser.INDEX = 113;
SqlBaseParser.INDEXES = 114;
SqlBaseParser.INNER = 115;
SqlBaseParser.INPATH = 116;
SqlBaseParser.INPUTFORMAT = 117;
SqlBaseParser.INSERT = 118;
SqlBaseParser.INTERSECT = 119;
SqlBaseParser.INTERVAL = 120;
SqlBaseParser.INTO = 121;
SqlBaseParser.IS = 122;
SqlBaseParser.ITEMS = 123;
SqlBaseParser.JOIN = 124;
SqlBaseParser.KEYS = 125;
SqlBaseParser.LAST = 126;
SqlBaseParser.LATERAL = 127;
SqlBaseParser.LAZY = 128;
SqlBaseParser.LEADING = 129;
SqlBaseParser.LEFT = 130;
SqlBaseParser.LIKE = 131;
SqlBaseParser.LIMIT = 132;
SqlBaseParser.LINES = 133;
SqlBaseParser.LIST = 134;
SqlBaseParser.LOAD = 135;
SqlBaseParser.LOCAL = 136;
SqlBaseParser.LOCATION = 137;
SqlBaseParser.LOCK = 138;
SqlBaseParser.LOCKS = 139;
SqlBaseParser.LOGICAL = 140;
SqlBaseParser.MACRO = 141;
SqlBaseParser.MAP = 142;
SqlBaseParser.MATCHED = 143;
SqlBaseParser.MERGE = 144;
SqlBaseParser.MSCK = 145;
SqlBaseParser.NAMESPACE = 146;
SqlBaseParser.NAMESPACES = 147;
SqlBaseParser.NATURAL = 148;
SqlBaseParser.NO = 149;
SqlBaseParser.NOT = 150;
SqlBaseParser.NULL = 151;
SqlBaseParser.NULLS = 152;
SqlBaseParser.OF = 153;
SqlBaseParser.ON = 154;
SqlBaseParser.ONLY = 155;
SqlBaseParser.OPTION = 156;
SqlBaseParser.OPTIONS = 157;
SqlBaseParser.OR = 158;
SqlBaseParser.ORDER = 159;
SqlBaseParser.OUT = 160;
SqlBaseParser.OUTER = 161;
SqlBaseParser.OUTPUTFORMAT = 162;
SqlBaseParser.OVER = 163;
SqlBaseParser.OVERLAPS = 164;
SqlBaseParser.OVERLAY = 165;
SqlBaseParser.OVERWRITE = 166;
SqlBaseParser.PARTITION = 167;
SqlBaseParser.PARTITIONED = 168;
SqlBaseParser.PARTITIONS = 169;
SqlBaseParser.PERCENTLIT = 170;
SqlBaseParser.PIVOT = 171;
SqlBaseParser.PLACING = 172;
SqlBaseParser.POSITION = 173;
SqlBaseParser.PRECEDING = 174;
SqlBaseParser.PRIMARY = 175;
SqlBaseParser.PRINCIPALS = 176;
SqlBaseParser.PROPERTIES = 177;
SqlBaseParser.PURGE = 178;
SqlBaseParser.QUERY = 179;
SqlBaseParser.RANGE = 180;
SqlBaseParser.RECORDREADER = 181;
SqlBaseParser.RECORDWRITER = 182;
SqlBaseParser.RECOVER = 183;
SqlBaseParser.REDUCE = 184;
SqlBaseParser.REFERENCES = 185;
SqlBaseParser.REFRESH = 186;
SqlBaseParser.RENAME = 187;
SqlBaseParser.REPAIR = 188;
SqlBaseParser.REPLACE = 189;
SqlBaseParser.RESET = 190;
SqlBaseParser.RESPECT = 191;
SqlBaseParser.RESTRICT = 192;
SqlBaseParser.REVOKE = 193;
SqlBaseParser.RIGHT = 194;
SqlBaseParser.RLIKE = 195;
SqlBaseParser.ROLE = 196;
SqlBaseParser.ROLES = 197;
SqlBaseParser.ROLLBACK = 198;
SqlBaseParser.ROLLUP = 199;
SqlBaseParser.ROW = 200;
SqlBaseParser.ROWS = 201;
SqlBaseParser.SCHEMA = 202;
SqlBaseParser.SELECT = 203;
SqlBaseParser.SEMI = 204;
SqlBaseParser.SEPARATED = 205;
SqlBaseParser.SERDE = 206;
SqlBaseParser.SERDEPROPERTIES = 207;
SqlBaseParser.SESSION_USER = 208;
SqlBaseParser.SET = 209;
SqlBaseParser.SETMINUS = 210;
SqlBaseParser.SETS = 211;
SqlBaseParser.SHOW = 212;
SqlBaseParser.SKEWED = 213;
SqlBaseParser.SOME = 214;
SqlBaseParser.SORT = 215;
SqlBaseParser.SORTED = 216;
SqlBaseParser.START = 217;
SqlBaseParser.STATISTICS = 218;
SqlBaseParser.STORED = 219;
SqlBaseParser.STRATIFY = 220;
SqlBaseParser.STRUCT = 221;
SqlBaseParser.SUBSTR = 222;
SqlBaseParser.SUBSTRING = 223;
SqlBaseParser.SYNC = 224;
SqlBaseParser.TABLE = 225;
SqlBaseParser.TABLES = 226;
SqlBaseParser.TABLESAMPLE = 227;
SqlBaseParser.TBLPROPERTIES = 228;
SqlBaseParser.TEMPORARY = 229;
SqlBaseParser.TERMINATED = 230;
SqlBaseParser.THEN = 231;
SqlBaseParser.TIME = 232;
SqlBaseParser.TO = 233;
SqlBaseParser.TOUCH = 234;
SqlBaseParser.TRAILING = 235;
SqlBaseParser.TRANSACTION = 236;
SqlBaseParser.TRANSACTIONS = 237;
SqlBaseParser.TRANSFORM = 238;
SqlBaseParser.TRIM = 239;
SqlBaseParser.TRUE = 240;
SqlBaseParser.TRUNCATE = 241;
SqlBaseParser.TRY_CAST = 242;
SqlBaseParser.TYPE = 243;
SqlBaseParser.UNARCHIVE = 244;
SqlBaseParser.UNBOUNDED = 245;
SqlBaseParser.UNCACHE = 246;
SqlBaseParser.UNION = 247;
SqlBaseParser.UNIQUE = 248;
SqlBaseParser.UNKNOWN = 249;
SqlBaseParser.UNLOCK = 250;
SqlBaseParser.UNSET = 251;
SqlBaseParser.UPDATE = 252;
SqlBaseParser.USE = 253;
SqlBaseParser.USER = 254;
SqlBaseParser.USING = 255;
SqlBaseParser.VALUES = 256;
SqlBaseParser.VIEW = 257;
SqlBaseParser.VIEWS = 258;
SqlBaseParser.WHEN = 259;
SqlBaseParser.WHERE = 260;
SqlBaseParser.WINDOW = 261;
SqlBaseParser.WITH = 262;
SqlBaseParser.ZONE = 263;
SqlBaseParser.KEY = 264;
SqlBaseParser.ENFORCED = 265;
SqlBaseParser.DEFERRABLE = 266;
SqlBaseParser.INITIALLY = 267;
SqlBaseParser.DEFERRED = 268;
SqlBaseParser.NORELY = 269;
SqlBaseParser.MATCH = 270;
SqlBaseParser.ACTION = 271;
SqlBaseParser.KW_GENERATED = 272;
SqlBaseParser.KW_ALWAYS = 273;
SqlBaseParser.KW_DEFAULT = 274;
SqlBaseParser.KW_IDENTITY = 275;
SqlBaseParser.KW_INCREMENT = 276;
SqlBaseParser.EQ = 277;
SqlBaseParser.NSEQ = 278;
SqlBaseParser.NEQ = 279;
SqlBaseParser.NEQJ = 280;
SqlBaseParser.LT = 281;
SqlBaseParser.LTE = 282;
SqlBaseParser.GT = 283;
SqlBaseParser.GTE = 284;
SqlBaseParser.PLUS = 285;
SqlBaseParser.MINUS = 286;
SqlBaseParser.ASTERISK = 287;
SqlBaseParser.SLASH = 288;
SqlBaseParser.PERCENT = 289;
SqlBaseParser.TILDE = 290;
SqlBaseParser.AMPERSAND = 291;
SqlBaseParser.PIPE = 292;
SqlBaseParser.CONCAT_PIPE = 293;
SqlBaseParser.HAT = 294;
SqlBaseParser.STRING = 295;
SqlBaseParser.BIGINT_LITERAL = 296;
SqlBaseParser.SMALLINT_LITERAL = 297;
SqlBaseParser.TINYINT_LITERAL = 298;
SqlBaseParser.INTEGER_VALUE = 299;
SqlBaseParser.EXPONENT_VALUE = 300;
SqlBaseParser.DECIMAL_VALUE = 301;
SqlBaseParser.FLOAT_LITERAL = 302;
SqlBaseParser.DOUBLE_LITERAL = 303;
SqlBaseParser.BIGDECIMAL_LITERAL = 304;
SqlBaseParser.IDENTIFIER = 305;
SqlBaseParser.BACKQUOTED_IDENTIFIER = 306;
SqlBaseParser.SIMPLE_COMMENT = 307;
SqlBaseParser.BRACKETED_COMMENT = 308;
SqlBaseParser.WS = 309;
SqlBaseParser.UNRECOGNIZED = 310;

SqlBaseParser.RULE_singleStatement = 0;
SqlBaseParser.RULE_singleExpression = 1;
SqlBaseParser.RULE_singleTableIdentifier = 2;
SqlBaseParser.RULE_singleMultipartIdentifier = 3;
SqlBaseParser.RULE_singleFunctionIdentifier = 4;
SqlBaseParser.RULE_singleDataType = 5;
SqlBaseParser.RULE_singleTableSchema = 6;
SqlBaseParser.RULE_statement = 7;
SqlBaseParser.RULE_configKey = 8;
SqlBaseParser.RULE_configValue = 9;
SqlBaseParser.RULE_unsupportedHiveNativeCommands = 10;
SqlBaseParser.RULE_createTableHeader = 11;
SqlBaseParser.RULE_replaceTableHeader = 12;
SqlBaseParser.RULE_bucketSpec = 13;
SqlBaseParser.RULE_skewSpec = 14;
SqlBaseParser.RULE_locationSpec = 15;
SqlBaseParser.RULE_commentSpec = 16;
SqlBaseParser.RULE_query = 17;
SqlBaseParser.RULE_insertInto = 18;
SqlBaseParser.RULE_partitionSpecLocation = 19;
SqlBaseParser.RULE_partitionSpec = 20;
SqlBaseParser.RULE_partitionVal = 21;
SqlBaseParser.RULE_namespace = 22;
SqlBaseParser.RULE_describeFuncName = 23;
SqlBaseParser.RULE_describeColName = 24;
SqlBaseParser.RULE_ctes = 25;
SqlBaseParser.RULE_namedQuery = 26;
SqlBaseParser.RULE_tableProvider = 27;
SqlBaseParser.RULE_createTableClauses = 28;
SqlBaseParser.RULE_tableProperties = 29;
SqlBaseParser.RULE_tableOptions = 30;
SqlBaseParser.RULE_tablePropertyList = 31;
SqlBaseParser.RULE_tableProperty = 32;
SqlBaseParser.RULE_tablePropertyKey = 33;
SqlBaseParser.RULE_tablePropertyValue = 34;
SqlBaseParser.RULE_constantList = 35;
SqlBaseParser.RULE_nestedConstantList = 36;
SqlBaseParser.RULE_createFileFormat = 37;
SqlBaseParser.RULE_fileFormat = 38;
SqlBaseParser.RULE_storageHandler = 39;
SqlBaseParser.RULE_resource = 40;
SqlBaseParser.RULE_dmlStatementNoWith = 41;
SqlBaseParser.RULE_queryOrganization = 42;
SqlBaseParser.RULE_multiInsertQueryBody = 43;
SqlBaseParser.RULE_queryTerm = 44;
SqlBaseParser.RULE_queryPrimary = 45;
SqlBaseParser.RULE_sortItem = 46;
SqlBaseParser.RULE_fromStatement = 47;
SqlBaseParser.RULE_fromStatementBody = 48;
SqlBaseParser.RULE_querySpecification = 49;
SqlBaseParser.RULE_transformClause = 50;
SqlBaseParser.RULE_selectClause = 51;
SqlBaseParser.RULE_setClause = 52;
SqlBaseParser.RULE_matchedClause = 53;
SqlBaseParser.RULE_notMatchedClause = 54;
SqlBaseParser.RULE_matchedAction = 55;
SqlBaseParser.RULE_notMatchedAction = 56;
SqlBaseParser.RULE_assignmentList = 57;
SqlBaseParser.RULE_assignment = 58;
SqlBaseParser.RULE_whereClause = 59;
SqlBaseParser.RULE_havingClause = 60;
SqlBaseParser.RULE_hint = 61;
SqlBaseParser.RULE_hintStatement = 62;
SqlBaseParser.RULE_fromClause = 63;
SqlBaseParser.RULE_aggregationClause = 64;
SqlBaseParser.RULE_groupByClause = 65;
SqlBaseParser.RULE_groupingAnalytics = 66;
SqlBaseParser.RULE_groupingSet = 67;
SqlBaseParser.RULE_pivotClause = 68;
SqlBaseParser.RULE_pivotColumn = 69;
SqlBaseParser.RULE_pivotValue = 70;
SqlBaseParser.RULE_lateralView = 71;
SqlBaseParser.RULE_setQuantifier = 72;
SqlBaseParser.RULE_relation = 73;
SqlBaseParser.RULE_joinRelation = 74;
SqlBaseParser.RULE_joinType = 75;
SqlBaseParser.RULE_joinCriteria = 76;
SqlBaseParser.RULE_sample = 77;
SqlBaseParser.RULE_sampleMethod = 78;
SqlBaseParser.RULE_identifierList = 79;
SqlBaseParser.RULE_identifierSeq = 80;
SqlBaseParser.RULE_orderedIdentifierList = 81;
SqlBaseParser.RULE_orderedIdentifier = 82;
SqlBaseParser.RULE_identifierCommentList = 83;
SqlBaseParser.RULE_identifierComment = 84;
SqlBaseParser.RULE_relationPrimary = 85;
SqlBaseParser.RULE_inlineTable = 86;
SqlBaseParser.RULE_functionTable = 87;
SqlBaseParser.RULE_tableAlias = 88;
SqlBaseParser.RULE_rowFormat = 89;
SqlBaseParser.RULE_multipartIdentifierList = 90;
SqlBaseParser.RULE_multipartIdentifier = 91;
SqlBaseParser.RULE_tableIdentifier = 92;
SqlBaseParser.RULE_functionIdentifier = 93;
SqlBaseParser.RULE_namedExpression = 94;
SqlBaseParser.RULE_namedExpressionSeq = 95;
SqlBaseParser.RULE_partitionFieldList = 96;
SqlBaseParser.RULE_partitionField = 97;
SqlBaseParser.RULE_transform = 98;
SqlBaseParser.RULE_transformArgument = 99;
SqlBaseParser.RULE_expression = 100;
SqlBaseParser.RULE_booleanExpression = 101;
SqlBaseParser.RULE_predicate = 102;
SqlBaseParser.RULE_valueExpression = 103;
SqlBaseParser.RULE_primaryExpression = 104;
SqlBaseParser.RULE_constant = 105;
SqlBaseParser.RULE_comparisonOperator = 106;
SqlBaseParser.RULE_arithmeticOperator = 107;
SqlBaseParser.RULE_predicateOperator = 108;
SqlBaseParser.RULE_booleanValue = 109;
SqlBaseParser.RULE_interval = 110;
SqlBaseParser.RULE_errorCapturingMultiUnitsInterval = 111;
SqlBaseParser.RULE_multiUnitsInterval = 112;
SqlBaseParser.RULE_errorCapturingUnitToUnitInterval = 113;
SqlBaseParser.RULE_unitToUnitInterval = 114;
SqlBaseParser.RULE_intervalValue = 115;
SqlBaseParser.RULE_colPosition = 116;
SqlBaseParser.RULE_dataType = 117;
SqlBaseParser.RULE_qualifiedColTypeWithPositionList = 118;
SqlBaseParser.RULE_qualifiedColTypeWithPosition = 119;
SqlBaseParser.RULE_colTypeList = 120;
SqlBaseParser.RULE_colType = 121;
SqlBaseParser.RULE_tableConstraint = 122;
SqlBaseParser.RULE_primaryKeyConstraint = 123;
SqlBaseParser.RULE_foreignKeyConstraint = 124;
SqlBaseParser.RULE_tableConstraintName = 125;
SqlBaseParser.RULE_keyNameList = 126;
SqlBaseParser.RULE_foreignKeyOptions = 127;
SqlBaseParser.RULE_foreignKeyConstraintOptions = 128;
SqlBaseParser.RULE_constraintOptions = 129;
SqlBaseParser.RULE_columnConstraint = 130;
SqlBaseParser.RULE_columnConstraintType = 131;
SqlBaseParser.RULE_columnGeneratedAs = 132;
SqlBaseParser.RULE_generatedAsExpression = 133;
SqlBaseParser.RULE_generatedAsIdentity = 134;
SqlBaseParser.RULE_complexColTypeList = 135;
SqlBaseParser.RULE_complexColType = 136;
SqlBaseParser.RULE_whenClause = 137;
SqlBaseParser.RULE_windowClause = 138;
SqlBaseParser.RULE_namedWindow = 139;
SqlBaseParser.RULE_windowSpec = 140;
SqlBaseParser.RULE_windowFrame = 141;
SqlBaseParser.RULE_frameBound = 142;
SqlBaseParser.RULE_qualifiedNameList = 143;
SqlBaseParser.RULE_functionName = 144;
SqlBaseParser.RULE_qualifiedName = 145;
SqlBaseParser.RULE_errorCapturingIdentifier = 146;
SqlBaseParser.RULE_errorCapturingIdentifierExtra = 147;
SqlBaseParser.RULE_identifier = 148;
SqlBaseParser.RULE_strictIdentifier = 149;
SqlBaseParser.RULE_quotedIdentifier = 150;
SqlBaseParser.RULE_number = 151;
SqlBaseParser.RULE_alterColumnAction = 152;
SqlBaseParser.RULE_ansiNonReserved = 153;
SqlBaseParser.RULE_strictNonReserved = 154;
SqlBaseParser.RULE_nonReserved = 155;

class SingleStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SqlBaseParser.RULE_singleStatement;
    }

	statement() {
	    return this.getTypedRuleContext(StatementContext,0);
	};

	EOF() {
	    return this.getToken(SqlBaseParser.EOF, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof SqlBaseVisitor ) {
	        return visitor.visitSingleStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class SingleExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SqlBaseParser.RULE_singleExpression;
    }

	namedExpression() {
	    return this.getTypedRuleContext(NamedExpressionContext,0);
	};

	EOF() {
	    return this.getToken(SqlBaseParser.EOF, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof SqlBaseVisitor ) {
	        return visitor.visitSingleExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class SingleTableIdentifierContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SqlBaseParser.RULE_singleTableIdentifier;
    }

	tableIdentifier() {
	    return this.getTypedRuleContext(TableIdentifierContext,0);
	};

	EOF() {
	    return this.getToken(SqlBaseParser.EOF, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof SqlBaseVisitor ) {
	        return visitor.visitSingleTableIdentifier(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class SingleMultipartIdentifierContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SqlBaseParser.RULE_singleMultipartIdentifier;
    }

	multipartIdentifier() {
	    return this.getTypedRuleContext(MultipartIdentifierContext,0);
	};

	EOF() {
	    return this.getToken(SqlBaseParser.EOF, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof SqlBaseVisitor ) {
	        return visitor.visitSingleMultipartIdentifier(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class SingleFunctionIdentifierContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SqlBaseParser.RULE_singleFunctionIdentifier;
    }

	functionIdentifier() {
	    return this.getTypedRuleContext(FunctionIdentifierContext,0);
	};

	EOF() {
	    return this.getToken(SqlBaseParser.EOF, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof SqlBaseVisitor ) {
	        return visitor.visitSingleFunctionIdentifier(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class SingleDataTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SqlBaseParser.RULE_singleDataType;
    }

	dataType() {
	    return this.getTypedRuleContext(DataTypeContext,0);
	};

	EOF() {
	    return this.getToken(SqlBaseParser.EOF, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof SqlBaseVisitor ) {
	        return visitor.visitSingleDataType(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class SingleTableSchemaContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SqlBaseParser.RULE_singleTableSchema;
    }

	colTypeList() {
	    return this.getTypedRuleContext(ColTypeListContext,0);
	};

	EOF() {
	    return this.getToken(SqlBaseParser.EOF, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof SqlBaseVisitor ) {
	        return visitor.visitSingleTableSchema(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class StatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SqlBaseParser.RULE_statement;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class ExplainContext extends StatementContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	EXPLAIN() {
	    return this.getToken(SqlBaseParser.EXPLAIN, 0);
	};

	statement() {
	    return this.getTypedRuleContext(StatementContext,0);
	};

	LOGICAL() {
	    return this.getToken(SqlBaseParser.LOGICAL, 0);
	};

	FORMATTED() {
	    return this.getToken(SqlBaseParser.FORMATTED, 0);
	};

	EXTENDED() {
	    return this.getToken(SqlBaseParser.EXTENDED, 0);
	};

	CODEGEN() {
	    return this.getToken(SqlBaseParser.CODEGEN, 0);
	};

	COST() {
	    return this.getToken(SqlBaseParser.COST, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof SqlBaseVisitor ) {
	        return visitor.visitExplain(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

SqlBaseParser.ExplainContext = ExplainContext;

class ResetConfigurationContext extends StatementContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	RESET() {
	    return this.getToken(SqlBaseParser.RESET, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof SqlBaseVisitor ) {
	        return visitor.visitResetConfiguration(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

SqlBaseParser.ResetConfigurationContext = ResetConfigurationContext;

class AlterViewQueryContext extends StatementContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	ALTER() {
	    return this.getToken(SqlBaseParser.ALTER, 0);
	};

	VIEW() {
	    return this.getToken(SqlBaseParser.VIEW, 0);
	};

	multipartIdentifier() {
	    return this.getTypedRuleContext(MultipartIdentifierContext,0);
	};

	query() {
	    return this.getTypedRuleContext(QueryContext,0);
	};

	AS() {
	    return this.getToken(SqlBaseParser.AS, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof SqlBaseVisitor ) {
	        return visitor.visitAlterViewQuery(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

SqlBaseParser.AlterViewQueryContext = AlterViewQueryContext;

class UseContext extends StatementContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	USE() {
	    return this.getToken(SqlBaseParser.USE, 0);
	};

	multipartIdentifier() {
	    return this.getTypedRuleContext(MultipartIdentifierContext,0);
	};

	NAMESPACE() {
	    return this.getToken(SqlBaseParser.NAMESPACE, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof SqlBaseVisitor ) {
	        return visitor.visitUse(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

SqlBaseParser.UseContext = UseContext;

class DropNamespaceContext extends StatementContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	DROP() {
	    return this.getToken(SqlBaseParser.DROP, 0);
	};

	namespace() {
	    return this.getTypedRuleContext(NamespaceContext,0);
	};

	multipartIdentifier() {
	    return this.getTypedRuleContext(MultipartIdentifierContext,0);
	};

	IF() {
	    return this.getToken(SqlBaseParser.IF, 0);
	};

	EXISTS() {
	    return this.getToken(SqlBaseParser.EXISTS, 0);
	};

	RESTRICT() {
	    return this.getToken(SqlBaseParser.RESTRICT, 0);
	};

	CASCADE() {
	    return this.getToken(SqlBaseParser.CASCADE, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof SqlBaseVisitor ) {
	        return visitor.visitDropNamespace(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

SqlBaseParser.DropNamespaceContext = DropNamespaceContext;

class CreateTempViewUsingContext extends StatementContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	CREATE() {
	    return this.getToken(SqlBaseParser.CREATE, 0);
	};

	TEMPORARY() {
	    return this.getToken(SqlBaseParser.TEMPORARY, 0);
	};

	VIEW() {
	    return this.getToken(SqlBaseParser.VIEW, 0);
	};

	tableIdentifier() {
	    return this.getTypedRuleContext(TableIdentifierContext,0);
	};

	tableProvider() {
	    return this.getTypedRuleContext(TableProviderContext,0);
	};

	OR() {
	    return this.getToken(SqlBaseParser.OR, 0);
	};

	REPLACE() {
	    return this.getToken(SqlBaseParser.REPLACE, 0);
	};

	GLOBAL() {
	    return this.getToken(SqlBaseParser.GLOBAL, 0);
	};

	colTypeList() {
	    return this.getTypedRuleContext(ColTypeListContext,0);
	};

	OPTIONS() {
	    return this.getToken(SqlBaseParser.OPTIONS, 0);
	};

	tablePropertyList() {
	    return this.getTypedRuleContext(TablePropertyListContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof SqlBaseVisitor ) {
	        return visitor.visitCreateTempViewUsing(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

SqlBaseParser.CreateTempViewUsingContext = CreateTempViewUsingContext;

class RenameTableContext extends StatementContext {

    constructor(parser, ctx) {
        super(parser);
        this.from = null; // MultipartIdentifierContext;
        this.to = null; // MultipartIdentifierContext;
        super.copyFrom(ctx);
    }

	ALTER() {
	    return this.getToken(SqlBaseParser.ALTER, 0);
	};

	RENAME() {
	    return this.getToken(SqlBaseParser.RENAME, 0);
	};

	TO() {
	    return this.getToken(SqlBaseParser.TO, 0);
	};

	TABLE() {
	    return this.getToken(SqlBaseParser.TABLE, 0);
	};

	VIEW() {
	    return this.getToken(SqlBaseParser.VIEW, 0);
	};

	multipartIdentifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(MultipartIdentifierContext);
	    } else {
	        return this.getTypedRuleContext(MultipartIdentifierContext,i);
	    }
	};

	accept(visitor) {
	    if ( visitor instanceof SqlBaseVisitor ) {
	        return visitor.visitRenameTable(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

SqlBaseParser.RenameTableContext = RenameTableContext;

class FailNativeCommandContext extends StatementContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	SET() {
	    return this.getToken(SqlBaseParser.SET, 0);
	};

	ROLE() {
	    return this.getToken(SqlBaseParser.ROLE, 0);
	};

	unsupportedHiveNativeCommands() {
	    return this.getTypedRuleContext(UnsupportedHiveNativeCommandsContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof SqlBaseVisitor ) {
	        return visitor.visitFailNativeCommand(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

SqlBaseParser.FailNativeCommandContext = FailNativeCommandContext;

class ClearCacheContext extends StatementContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	CLEAR() {
	    return this.getToken(SqlBaseParser.CLEAR, 0);
	};

	CACHE() {
	    return this.getToken(SqlBaseParser.CACHE, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof SqlBaseVisitor ) {
	        return visitor.visitClearCache(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

SqlBaseParser.ClearCacheContext = ClearCacheContext;

class DropViewContext extends StatementContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	DROP() {
	    return this.getToken(SqlBaseParser.DROP, 0);
	};

	VIEW() {
	    return this.getToken(SqlBaseParser.VIEW, 0);
	};

	multipartIdentifier() {
	    return this.getTypedRuleContext(MultipartIdentifierContext,0);
	};

	IF() {
	    return this.getToken(SqlBaseParser.IF, 0);
	};

	EXISTS() {
	    return this.getToken(SqlBaseParser.EXISTS, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof SqlBaseVisitor ) {
	        return visitor.visitDropView(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

SqlBaseParser.DropViewContext = DropViewContext;

class ShowTablesContext extends StatementContext {

    constructor(parser, ctx) {
        super(parser);
        this.pattern = null; // Token;
        super.copyFrom(ctx);
    }

	SHOW() {
	    return this.getToken(SqlBaseParser.SHOW, 0);
	};

	TABLES() {
	    return this.getToken(SqlBaseParser.TABLES, 0);
	};

	multipartIdentifier() {
	    return this.getTypedRuleContext(MultipartIdentifierContext,0);
	};

	FROM() {
	    return this.getToken(SqlBaseParser.FROM, 0);
	};

	IN() {
	    return this.getToken(SqlBaseParser.IN, 0);
	};

	STRING() {
	    return this.getToken(SqlBaseParser.STRING, 0);
	};

	LIKE() {
	    return this.getToken(SqlBaseParser.LIKE, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof SqlBaseVisitor ) {
	        return visitor.visitShowTables(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

SqlBaseParser.ShowTablesContext = ShowTablesContext;

class RecoverPartitionsContext extends StatementContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	ALTER() {
	    return this.getToken(SqlBaseParser.ALTER, 0);
	};

	TABLE() {
	    return this.getToken(SqlBaseParser.TABLE, 0);
	};

	multipartIdentifier() {
	    return this.getTypedRuleContext(MultipartIdentifierContext,0);
	};

	RECOVER() {
	    return this.getToken(SqlBaseParser.RECOVER, 0);
	};

	PARTITIONS() {
	    return this.getToken(SqlBaseParser.PARTITIONS, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof SqlBaseVisitor ) {
	        return visitor.visitRecoverPartitions(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

SqlBaseParser.RecoverPartitionsContext = RecoverPartitionsContext;

class ShowCurrentNamespaceContext extends StatementContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	SHOW() {
	    return this.getToken(SqlBaseParser.SHOW, 0);
	};

	CURRENT() {
	    return this.getToken(SqlBaseParser.CURRENT, 0);
	};

	NAMESPACE() {
	    return this.getToken(SqlBaseParser.NAMESPACE, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof SqlBaseVisitor ) {
	        return visitor.visitShowCurrentNamespace(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

SqlBaseParser.ShowCurrentNamespaceContext = ShowCurrentNamespaceContext;

class RenameTablePartitionContext extends StatementContext {

    constructor(parser, ctx) {
        super(parser);
        this.from = null; // PartitionSpecContext;
        this.to = null; // PartitionSpecContext;
        super.copyFrom(ctx);
    }

	ALTER() {
	    return this.getToken(SqlBaseParser.ALTER, 0);
	};

	TABLE() {
	    return this.getToken(SqlBaseParser.TABLE, 0);
	};

	multipartIdentifier() {
	    return this.getTypedRuleContext(MultipartIdentifierContext,0);
	};

	RENAME() {
	    return this.getToken(SqlBaseParser.RENAME, 0);
	};

	TO() {
	    return this.getToken(SqlBaseParser.TO, 0);
	};

	partitionSpec = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(PartitionSpecContext);
	    } else {
	        return this.getTypedRuleContext(PartitionSpecContext,i);
	    }
	};

	accept(visitor) {
	    if ( visitor instanceof SqlBaseVisitor ) {
	        return visitor.visitRenameTablePartition(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

SqlBaseParser.RenameTablePartitionContext = RenameTablePartitionContext;

class RepairTableContext extends StatementContext {

    constructor(parser, ctx) {
        super(parser);
        this.option = null; // Token;
        super.copyFrom(ctx);
    }

	MSCK() {
	    return this.getToken(SqlBaseParser.MSCK, 0);
	};

	REPAIR() {
	    return this.getToken(SqlBaseParser.REPAIR, 0);
	};

	TABLE() {
	    return this.getToken(SqlBaseParser.TABLE, 0);
	};

	multipartIdentifier() {
	    return this.getTypedRuleContext(MultipartIdentifierContext,0);
	};

	PARTITIONS() {
	    return this.getToken(SqlBaseParser.PARTITIONS, 0);
	};

	ADD() {
	    return this.getToken(SqlBaseParser.ADD, 0);
	};

	DROP() {
	    return this.getToken(SqlBaseParser.DROP, 0);
	};

	SYNC() {
	    return this.getToken(SqlBaseParser.SYNC, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof SqlBaseVisitor ) {
	        return visitor.visitRepairTable(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

SqlBaseParser.RepairTableContext = RepairTableContext;

class RefreshResourceContext extends StatementContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	REFRESH() {
	    return this.getToken(SqlBaseParser.REFRESH, 0);
	};

	STRING() {
	    return this.getToken(SqlBaseParser.STRING, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof SqlBaseVisitor ) {
	        return visitor.visitRefreshResource(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

SqlBaseParser.RefreshResourceContext = RefreshResourceContext;

class ShowCreateTableContext extends StatementContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	SHOW() {
	    return this.getToken(SqlBaseParser.SHOW, 0);
	};

	CREATE() {
	    return this.getToken(SqlBaseParser.CREATE, 0);
	};

	TABLE() {
	    return this.getToken(SqlBaseParser.TABLE, 0);
	};

	multipartIdentifier() {
	    return this.getTypedRuleContext(MultipartIdentifierContext,0);
	};

	AS() {
	    return this.getToken(SqlBaseParser.AS, 0);
	};

	SERDE() {
	    return this.getToken(SqlBaseParser.SERDE, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof SqlBaseVisitor ) {
	        return visitor.visitShowCreateTable(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

SqlBaseParser.ShowCreateTableContext = ShowCreateTableContext;

class ShowNamespacesContext extends StatementContext {

    constructor(parser, ctx) {
        super(parser);
        this.pattern = null; // Token;
        super.copyFrom(ctx);
    }

	SHOW() {
	    return this.getToken(SqlBaseParser.SHOW, 0);
	};

	DATABASES() {
	    return this.getToken(SqlBaseParser.DATABASES, 0);
	};

	NAMESPACES() {
	    return this.getToken(SqlBaseParser.NAMESPACES, 0);
	};

	multipartIdentifier() {
	    return this.getTypedRuleContext(MultipartIdentifierContext,0);
	};

	FROM() {
	    return this.getToken(SqlBaseParser.FROM, 0);
	};

	IN() {
	    return this.getToken(SqlBaseParser.IN, 0);
	};

	STRING() {
	    return this.getToken(SqlBaseParser.STRING, 0);
	};

	LIKE() {
	    return this.getToken(SqlBaseParser.LIKE, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof SqlBaseVisitor ) {
	        return visitor.visitShowNamespaces(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

SqlBaseParser.ShowNamespacesContext = ShowNamespacesContext;

class ShowColumnsContext extends StatementContext {

    constructor(parser, ctx) {
        super(parser);
        this.table = null; // MultipartIdentifierContext;
        this.ns = null; // MultipartIdentifierContext;
        super.copyFrom(ctx);
    }

	SHOW() {
	    return this.getToken(SqlBaseParser.SHOW, 0);
	};

	COLUMNS() {
	    return this.getToken(SqlBaseParser.COLUMNS, 0);
	};

	FROM = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SqlBaseParser.FROM);
	    } else {
	        return this.getToken(SqlBaseParser.FROM, i);
	    }
	};


	IN = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SqlBaseParser.IN);
	    } else {
	        return this.getToken(SqlBaseParser.IN, i);
	    }
	};


	multipartIdentifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(MultipartIdentifierContext);
	    } else {
	        return this.getTypedRuleContext(MultipartIdentifierContext,i);
	    }
	};

	accept(visitor) {
	    if ( visitor instanceof SqlBaseVisitor ) {
	        return visitor.visitShowColumns(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

SqlBaseParser.ShowColumnsContext = ShowColumnsContext;

class ReplaceTableContext extends StatementContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	replaceTableHeader() {
	    return this.getTypedRuleContext(ReplaceTableHeaderContext,0);
	};

	createTableClauses() {
	    return this.getTypedRuleContext(CreateTableClausesContext,0);
	};

	colTypeList() {
	    return this.getTypedRuleContext(ColTypeListContext,0);
	};

	tableProvider() {
	    return this.getTypedRuleContext(TableProviderContext,0);
	};

	query() {
	    return this.getTypedRuleContext(QueryContext,0);
	};

	tableConstraint = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(TableConstraintContext);
	    } else {
	        return this.getTypedRuleContext(TableConstraintContext,i);
	    }
	};

	AS() {
	    return this.getToken(SqlBaseParser.AS, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof SqlBaseVisitor ) {
	        return visitor.visitReplaceTable(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

SqlBaseParser.ReplaceTableContext = ReplaceTableContext;

class AnalyzeTablesContext extends StatementContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	ANALYZE() {
	    return this.getToken(SqlBaseParser.ANALYZE, 0);
	};

	TABLES() {
	    return this.getToken(SqlBaseParser.TABLES, 0);
	};

	COMPUTE() {
	    return this.getToken(SqlBaseParser.COMPUTE, 0);
	};

	STATISTICS() {
	    return this.getToken(SqlBaseParser.STATISTICS, 0);
	};

	multipartIdentifier() {
	    return this.getTypedRuleContext(MultipartIdentifierContext,0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	FROM() {
	    return this.getToken(SqlBaseParser.FROM, 0);
	};

	IN() {
	    return this.getToken(SqlBaseParser.IN, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof SqlBaseVisitor ) {
	        return visitor.visitAnalyzeTables(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

SqlBaseParser.AnalyzeTablesContext = AnalyzeTablesContext;

class AddTablePartitionContext extends StatementContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	ALTER() {
	    return this.getToken(SqlBaseParser.ALTER, 0);
	};

	multipartIdentifier() {
	    return this.getTypedRuleContext(MultipartIdentifierContext,0);
	};

	ADD() {
	    return this.getToken(SqlBaseParser.ADD, 0);
	};

	TABLE() {
	    return this.getToken(SqlBaseParser.TABLE, 0);
	};

	VIEW() {
	    return this.getToken(SqlBaseParser.VIEW, 0);
	};

	IF() {
	    return this.getToken(SqlBaseParser.IF, 0);
	};

	NOT() {
	    return this.getToken(SqlBaseParser.NOT, 0);
	};

	EXISTS() {
	    return this.getToken(SqlBaseParser.EXISTS, 0);
	};

	partitionSpecLocation = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(PartitionSpecLocationContext);
	    } else {
	        return this.getTypedRuleContext(PartitionSpecLocationContext,i);
	    }
	};

	accept(visitor) {
	    if ( visitor instanceof SqlBaseVisitor ) {
	        return visitor.visitAddTablePartition(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

SqlBaseParser.AddTablePartitionContext = AddTablePartitionContext;

class SetNamespaceLocationContext extends StatementContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	ALTER() {
	    return this.getToken(SqlBaseParser.ALTER, 0);
	};

	namespace() {
	    return this.getTypedRuleContext(NamespaceContext,0);
	};

	multipartIdentifier() {
	    return this.getTypedRuleContext(MultipartIdentifierContext,0);
	};

	SET() {
	    return this.getToken(SqlBaseParser.SET, 0);
	};

	locationSpec() {
	    return this.getTypedRuleContext(LocationSpecContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof SqlBaseVisitor ) {
	        return visitor.visitSetNamespaceLocation(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

SqlBaseParser.SetNamespaceLocationContext = SetNamespaceLocationContext;

class RefreshTableContext extends StatementContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	REFRESH() {
	    return this.getToken(SqlBaseParser.REFRESH, 0);
	};

	TABLE() {
	    return this.getToken(SqlBaseParser.TABLE, 0);
	};

	multipartIdentifier() {
	    return this.getTypedRuleContext(MultipartIdentifierContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof SqlBaseVisitor ) {
	        return visitor.visitRefreshTable(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

SqlBaseParser.RefreshTableContext = RefreshTableContext;

class SetNamespacePropertiesContext extends StatementContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	ALTER() {
	    return this.getToken(SqlBaseParser.ALTER, 0);
	};

	namespace() {
	    return this.getTypedRuleContext(NamespaceContext,0);
	};

	multipartIdentifier() {
	    return this.getTypedRuleContext(MultipartIdentifierContext,0);
	};

	SET() {
	    return this.getToken(SqlBaseParser.SET, 0);
	};

	tablePropertyList() {
	    return this.getTypedRuleContext(TablePropertyListContext,0);
	};

	DBPROPERTIES() {
	    return this.getToken(SqlBaseParser.DBPROPERTIES, 0);
	};

	PROPERTIES() {
	    return this.getToken(SqlBaseParser.PROPERTIES, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof SqlBaseVisitor ) {
	        return visitor.visitSetNamespaceProperties(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

SqlBaseParser.SetNamespacePropertiesContext = SetNamespacePropertiesContext;

class ManageResourceContext extends StatementContext {

    constructor(parser, ctx) {
        super(parser);
        this.op = null; // Token;
        super.copyFrom(ctx);
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	ADD() {
	    return this.getToken(SqlBaseParser.ADD, 0);
	};

	LIST() {
	    return this.getToken(SqlBaseParser.LIST, 0);
	};

	STRING() {
	    return this.getToken(SqlBaseParser.STRING, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof SqlBaseVisitor ) {
	        return visitor.visitManageResource(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

SqlBaseParser.ManageResourceContext = ManageResourceContext;

class SetQuotedConfigurationContext extends StatementContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	SET() {
	    return this.getToken(SqlBaseParser.SET, 0);
	};

	configKey() {
	    return this.getTypedRuleContext(ConfigKeyContext,0);
	};

	EQ() {
	    return this.getToken(SqlBaseParser.EQ, 0);
	};

	configValue() {
	    return this.getTypedRuleContext(ConfigValueContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof SqlBaseVisitor ) {
	        return visitor.visitSetQuotedConfiguration(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

SqlBaseParser.SetQuotedConfigurationContext = SetQuotedConfigurationContext;

class AnalyzeContext extends StatementContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	ANALYZE() {
	    return this.getToken(SqlBaseParser.ANALYZE, 0);
	};

	TABLE() {
	    return this.getToken(SqlBaseParser.TABLE, 0);
	};

	multipartIdentifier() {
	    return this.getTypedRuleContext(MultipartIdentifierContext,0);
	};

	COMPUTE() {
	    return this.getToken(SqlBaseParser.COMPUTE, 0);
	};

	STATISTICS() {
	    return this.getToken(SqlBaseParser.STATISTICS, 0);
	};

	partitionSpec() {
	    return this.getTypedRuleContext(PartitionSpecContext,0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	FOR() {
	    return this.getToken(SqlBaseParser.FOR, 0);
	};

	COLUMNS() {
	    return this.getToken(SqlBaseParser.COLUMNS, 0);
	};

	identifierSeq() {
	    return this.getTypedRuleContext(IdentifierSeqContext,0);
	};

	ALL() {
	    return this.getToken(SqlBaseParser.ALL, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof SqlBaseVisitor ) {
	        return visitor.visitAnalyze(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

SqlBaseParser.AnalyzeContext = AnalyzeContext;

class CreateFunctionContext extends StatementContext {

    constructor(parser, ctx) {
        super(parser);
        this.className = null; // Token;
        super.copyFrom(ctx);
    }

	CREATE() {
	    return this.getToken(SqlBaseParser.CREATE, 0);
	};

	FUNCTION() {
	    return this.getToken(SqlBaseParser.FUNCTION, 0);
	};

	multipartIdentifier() {
	    return this.getTypedRuleContext(MultipartIdentifierContext,0);
	};

	AS() {
	    return this.getToken(SqlBaseParser.AS, 0);
	};

	STRING() {
	    return this.getToken(SqlBaseParser.STRING, 0);
	};

	OR() {
	    return this.getToken(SqlBaseParser.OR, 0);
	};

	REPLACE() {
	    return this.getToken(SqlBaseParser.REPLACE, 0);
	};

	TEMPORARY() {
	    return this.getToken(SqlBaseParser.TEMPORARY, 0);
	};

	IF() {
	    return this.getToken(SqlBaseParser.IF, 0);
	};

	NOT() {
	    return this.getToken(SqlBaseParser.NOT, 0);
	};

	EXISTS() {
	    return this.getToken(SqlBaseParser.EXISTS, 0);
	};

	USING() {
	    return this.getToken(SqlBaseParser.USING, 0);
	};

	resource = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ResourceContext);
	    } else {
	        return this.getTypedRuleContext(ResourceContext,i);
	    }
	};

	accept(visitor) {
	    if ( visitor instanceof SqlBaseVisitor ) {
	        return visitor.visitCreateFunction(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

SqlBaseParser.CreateFunctionContext = CreateFunctionContext;

class HiveReplaceColumnsContext extends StatementContext {

    constructor(parser, ctx) {
        super(parser);
        this.table = null; // MultipartIdentifierContext;
        this.columns = null; // QualifiedColTypeWithPositionListContext;
        super.copyFrom(ctx);
    }

	ALTER() {
	    return this.getToken(SqlBaseParser.ALTER, 0);
	};

	TABLE() {
	    return this.getToken(SqlBaseParser.TABLE, 0);
	};

	REPLACE() {
	    return this.getToken(SqlBaseParser.REPLACE, 0);
	};

	COLUMNS() {
	    return this.getToken(SqlBaseParser.COLUMNS, 0);
	};

	multipartIdentifier() {
	    return this.getTypedRuleContext(MultipartIdentifierContext,0);
	};

	qualifiedColTypeWithPositionList() {
	    return this.getTypedRuleContext(QualifiedColTypeWithPositionListContext,0);
	};

	partitionSpec() {
	    return this.getTypedRuleContext(PartitionSpecContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof SqlBaseVisitor ) {
	        return visitor.visitHiveReplaceColumns(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

SqlBaseParser.HiveReplaceColumnsContext = HiveReplaceColumnsContext;

class CommentNamespaceContext extends StatementContext {

    constructor(parser, ctx) {
        super(parser);
        this.comment = null; // Token;
        super.copyFrom(ctx);
    }

	COMMENT() {
	    return this.getToken(SqlBaseParser.COMMENT, 0);
	};

	ON() {
	    return this.getToken(SqlBaseParser.ON, 0);
	};

	namespace() {
	    return this.getTypedRuleContext(NamespaceContext,0);
	};

	multipartIdentifier() {
	    return this.getTypedRuleContext(MultipartIdentifierContext,0);
	};

	IS() {
	    return this.getToken(SqlBaseParser.IS, 0);
	};

	STRING() {
	    return this.getToken(SqlBaseParser.STRING, 0);
	};

	NULL() {
	    return this.getToken(SqlBaseParser.NULL, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof SqlBaseVisitor ) {
	        return visitor.visitCommentNamespace(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

SqlBaseParser.CommentNamespaceContext = CommentNamespaceContext;

class ResetQuotedConfigurationContext extends StatementContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	RESET() {
	    return this.getToken(SqlBaseParser.RESET, 0);
	};

	configKey() {
	    return this.getTypedRuleContext(ConfigKeyContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof SqlBaseVisitor ) {
	        return visitor.visitResetQuotedConfiguration(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

SqlBaseParser.ResetQuotedConfigurationContext = ResetQuotedConfigurationContext;

class CreateTableContext extends StatementContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	createTableHeader() {
	    return this.getTypedRuleContext(CreateTableHeaderContext,0);
	};

	createTableClauses() {
	    return this.getTypedRuleContext(CreateTableClausesContext,0);
	};

	colTypeList() {
	    return this.getTypedRuleContext(ColTypeListContext,0);
	};

	tableProvider() {
	    return this.getTypedRuleContext(TableProviderContext,0);
	};

	query() {
	    return this.getTypedRuleContext(QueryContext,0);
	};

	tableConstraint = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(TableConstraintContext);
	    } else {
	        return this.getTypedRuleContext(TableConstraintContext,i);
	    }
	};

	AS() {
	    return this.getToken(SqlBaseParser.AS, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof SqlBaseVisitor ) {
	        return visitor.visitCreateTable(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

SqlBaseParser.CreateTableContext = CreateTableContext;

class DmlStatementContext extends StatementContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	dmlStatementNoWith() {
	    return this.getTypedRuleContext(DmlStatementNoWithContext,0);
	};

	ctes() {
	    return this.getTypedRuleContext(CtesContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof SqlBaseVisitor ) {
	        return visitor.visitDmlStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

SqlBaseParser.DmlStatementContext = DmlStatementContext;

class CreateTableLikeContext extends StatementContext {

    constructor(parser, ctx) {
        super(parser);
        this.target = null; // TableIdentifierContext;
        this.source = null; // TableIdentifierContext;
        this.tableProps = null; // TablePropertyListContext;
        super.copyFrom(ctx);
    }

	CREATE() {
	    return this.getToken(SqlBaseParser.CREATE, 0);
	};

	TABLE() {
	    return this.getToken(SqlBaseParser.TABLE, 0);
	};

	LIKE() {
	    return this.getToken(SqlBaseParser.LIKE, 0);
	};

	tableIdentifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(TableIdentifierContext);
	    } else {
	        return this.getTypedRuleContext(TableIdentifierContext,i);
	    }
	};

	IF() {
	    return this.getToken(SqlBaseParser.IF, 0);
	};

	NOT() {
	    return this.getToken(SqlBaseParser.NOT, 0);
	};

	EXISTS() {
	    return this.getToken(SqlBaseParser.EXISTS, 0);
	};

	tableProvider = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(TableProviderContext);
	    } else {
	        return this.getTypedRuleContext(TableProviderContext,i);
	    }
	};

	rowFormat = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(RowFormatContext);
	    } else {
	        return this.getTypedRuleContext(RowFormatContext,i);
	    }
	};

	createFileFormat = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(CreateFileFormatContext);
	    } else {
	        return this.getTypedRuleContext(CreateFileFormatContext,i);
	    }
	};

	locationSpec = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(LocationSpecContext);
	    } else {
	        return this.getTypedRuleContext(LocationSpecContext,i);
	    }
	};

	TBLPROPERTIES = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SqlBaseParser.TBLPROPERTIES);
	    } else {
	        return this.getToken(SqlBaseParser.TBLPROPERTIES, i);
	    }
	};


	tablePropertyList = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(TablePropertyListContext);
	    } else {
	        return this.getTypedRuleContext(TablePropertyListContext,i);
	    }
	};

	accept(visitor) {
	    if ( visitor instanceof SqlBaseVisitor ) {
	        return visitor.visitCreateTableLike(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

SqlBaseParser.CreateTableLikeContext = CreateTableLikeContext;

class UncacheTableContext extends StatementContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	UNCACHE() {
	    return this.getToken(SqlBaseParser.UNCACHE, 0);
	};

	TABLE() {
	    return this.getToken(SqlBaseParser.TABLE, 0);
	};

	multipartIdentifier() {
	    return this.getTypedRuleContext(MultipartIdentifierContext,0);
	};

	IF() {
	    return this.getToken(SqlBaseParser.IF, 0);
	};

	EXISTS() {
	    return this.getToken(SqlBaseParser.EXISTS, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof SqlBaseVisitor ) {
	        return visitor.visitUncacheTable(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

SqlBaseParser.UncacheTableContext = UncacheTableContext;

class DropFunctionContext extends StatementContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	DROP() {
	    return this.getToken(SqlBaseParser.DROP, 0);
	};

	FUNCTION() {
	    return this.getToken(SqlBaseParser.FUNCTION, 0);
	};

	multipartIdentifier() {
	    return this.getTypedRuleContext(MultipartIdentifierContext,0);
	};

	TEMPORARY() {
	    return this.getToken(SqlBaseParser.TEMPORARY, 0);
	};

	IF() {
	    return this.getToken(SqlBaseParser.IF, 0);
	};

	EXISTS() {
	    return this.getToken(SqlBaseParser.EXISTS, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof SqlBaseVisitor ) {
	        return visitor.visitDropFunction(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

SqlBaseParser.DropFunctionContext = DropFunctionContext;

class DescribeRelationContext extends StatementContext {

    constructor(parser, ctx) {
        super(parser);
        this.option = null; // Token;
        super.copyFrom(ctx);
    }

	multipartIdentifier() {
	    return this.getTypedRuleContext(MultipartIdentifierContext,0);
	};

	DESC() {
	    return this.getToken(SqlBaseParser.DESC, 0);
	};

	DESCRIBE() {
	    return this.getToken(SqlBaseParser.DESCRIBE, 0);
	};

	TABLE() {
	    return this.getToken(SqlBaseParser.TABLE, 0);
	};

	partitionSpec() {
	    return this.getTypedRuleContext(PartitionSpecContext,0);
	};

	describeColName() {
	    return this.getTypedRuleContext(DescribeColNameContext,0);
	};

	EXTENDED() {
	    return this.getToken(SqlBaseParser.EXTENDED, 0);
	};

	FORMATTED() {
	    return this.getToken(SqlBaseParser.FORMATTED, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof SqlBaseVisitor ) {
	        return visitor.visitDescribeRelation(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

SqlBaseParser.DescribeRelationContext = DescribeRelationContext;

class LoadDataContext extends StatementContext {

    constructor(parser, ctx) {
        super(parser);
        this.path = null; // Token;
        super.copyFrom(ctx);
    }

	LOAD() {
	    return this.getToken(SqlBaseParser.LOAD, 0);
	};

	DATA() {
	    return this.getToken(SqlBaseParser.DATA, 0);
	};

	INPATH() {
	    return this.getToken(SqlBaseParser.INPATH, 0);
	};

	INTO() {
	    return this.getToken(SqlBaseParser.INTO, 0);
	};

	TABLE() {
	    return this.getToken(SqlBaseParser.TABLE, 0);
	};

	multipartIdentifier() {
	    return this.getTypedRuleContext(MultipartIdentifierContext,0);
	};

	STRING() {
	    return this.getToken(SqlBaseParser.STRING, 0);
	};

	LOCAL() {
	    return this.getToken(SqlBaseParser.LOCAL, 0);
	};

	OVERWRITE() {
	    return this.getToken(SqlBaseParser.OVERWRITE, 0);
	};

	partitionSpec() {
	    return this.getTypedRuleContext(PartitionSpecContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof SqlBaseVisitor ) {
	        return visitor.visitLoadData(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

SqlBaseParser.LoadDataContext = LoadDataContext;

class ShowPartitionsContext extends StatementContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	SHOW() {
	    return this.getToken(SqlBaseParser.SHOW, 0);
	};

	PARTITIONS() {
	    return this.getToken(SqlBaseParser.PARTITIONS, 0);
	};

	multipartIdentifier() {
	    return this.getTypedRuleContext(MultipartIdentifierContext,0);
	};

	partitionSpec() {
	    return this.getTypedRuleContext(PartitionSpecContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof SqlBaseVisitor ) {
	        return visitor.visitShowPartitions(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

SqlBaseParser.ShowPartitionsContext = ShowPartitionsContext;

class DescribeFunctionContext extends StatementContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	FUNCTION() {
	    return this.getToken(SqlBaseParser.FUNCTION, 0);
	};

	describeFuncName() {
	    return this.getTypedRuleContext(DescribeFuncNameContext,0);
	};

	DESC() {
	    return this.getToken(SqlBaseParser.DESC, 0);
	};

	DESCRIBE() {
	    return this.getToken(SqlBaseParser.DESCRIBE, 0);
	};

	EXTENDED() {
	    return this.getToken(SqlBaseParser.EXTENDED, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof SqlBaseVisitor ) {
	        return visitor.visitDescribeFunction(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

SqlBaseParser.DescribeFunctionContext = DescribeFunctionContext;

class RenameTableColumnContext extends StatementContext {

    constructor(parser, ctx) {
        super(parser);
        this.table = null; // MultipartIdentifierContext;
        this.from = null; // MultipartIdentifierContext;
        this.to = null; // ErrorCapturingIdentifierContext;
        super.copyFrom(ctx);
    }

	ALTER() {
	    return this.getToken(SqlBaseParser.ALTER, 0);
	};

	TABLE() {
	    return this.getToken(SqlBaseParser.TABLE, 0);
	};

	RENAME() {
	    return this.getToken(SqlBaseParser.RENAME, 0);
	};

	COLUMN() {
	    return this.getToken(SqlBaseParser.COLUMN, 0);
	};

	TO() {
	    return this.getToken(SqlBaseParser.TO, 0);
	};

	multipartIdentifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(MultipartIdentifierContext);
	    } else {
	        return this.getTypedRuleContext(MultipartIdentifierContext,i);
	    }
	};

	errorCapturingIdentifier() {
	    return this.getTypedRuleContext(ErrorCapturingIdentifierContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof SqlBaseVisitor ) {
	        return visitor.visitRenameTableColumn(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

SqlBaseParser.RenameTableColumnContext = RenameTableColumnContext;

class StatementDefaultContext extends StatementContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	query() {
	    return this.getTypedRuleContext(QueryContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof SqlBaseVisitor ) {
	        return visitor.visitStatementDefault(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

SqlBaseParser.StatementDefaultContext = StatementDefaultContext;

class HiveChangeColumnContext extends StatementContext {

    constructor(parser, ctx) {
        super(parser);
        this.table = null; // MultipartIdentifierContext;
        this.colName = null; // MultipartIdentifierContext;
        super.copyFrom(ctx);
    }

	ALTER() {
	    return this.getToken(SqlBaseParser.ALTER, 0);
	};

	TABLE() {
	    return this.getToken(SqlBaseParser.TABLE, 0);
	};

	CHANGE() {
	    return this.getToken(SqlBaseParser.CHANGE, 0);
	};

	colType() {
	    return this.getTypedRuleContext(ColTypeContext,0);
	};

	multipartIdentifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(MultipartIdentifierContext);
	    } else {
	        return this.getTypedRuleContext(MultipartIdentifierContext,i);
	    }
	};

	partitionSpec() {
	    return this.getTypedRuleContext(PartitionSpecContext,0);
	};

	COLUMN() {
	    return this.getToken(SqlBaseParser.COLUMN, 0);
	};

	colPosition() {
	    return this.getTypedRuleContext(ColPositionContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof SqlBaseVisitor ) {
	        return visitor.visitHiveChangeColumn(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

SqlBaseParser.HiveChangeColumnContext = HiveChangeColumnContext;

class SetTimeZoneContext extends StatementContext {

    constructor(parser, ctx) {
        super(parser);
        this.timezone = null; // Token;
        super.copyFrom(ctx);
    }

	SET() {
	    return this.getToken(SqlBaseParser.SET, 0);
	};

	TIME() {
	    return this.getToken(SqlBaseParser.TIME, 0);
	};

	ZONE() {
	    return this.getToken(SqlBaseParser.ZONE, 0);
	};

	interval() {
	    return this.getTypedRuleContext(IntervalContext,0);
	};

	STRING() {
	    return this.getToken(SqlBaseParser.STRING, 0);
	};

	LOCAL() {
	    return this.getToken(SqlBaseParser.LOCAL, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof SqlBaseVisitor ) {
	        return visitor.visitSetTimeZone(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

SqlBaseParser.SetTimeZoneContext = SetTimeZoneContext;

class DescribeQueryContext extends StatementContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	query() {
	    return this.getTypedRuleContext(QueryContext,0);
	};

	DESC() {
	    return this.getToken(SqlBaseParser.DESC, 0);
	};

	DESCRIBE() {
	    return this.getToken(SqlBaseParser.DESCRIBE, 0);
	};

	QUERY() {
	    return this.getToken(SqlBaseParser.QUERY, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof SqlBaseVisitor ) {
	        return visitor.visitDescribeQuery(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

SqlBaseParser.DescribeQueryContext = DescribeQueryContext;

class TruncateTableContext extends StatementContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	TRUNCATE() {
	    return this.getToken(SqlBaseParser.TRUNCATE, 0);
	};

	TABLE() {
	    return this.getToken(SqlBaseParser.TABLE, 0);
	};

	multipartIdentifier() {
	    return this.getTypedRuleContext(MultipartIdentifierContext,0);
	};

	partitionSpec() {
	    return this.getTypedRuleContext(PartitionSpecContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof SqlBaseVisitor ) {
	        return visitor.visitTruncateTable(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

SqlBaseParser.TruncateTableContext = TruncateTableContext;

class SetTableSerDeContext extends StatementContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	ALTER() {
	    return this.getToken(SqlBaseParser.ALTER, 0);
	};

	TABLE() {
	    return this.getToken(SqlBaseParser.TABLE, 0);
	};

	multipartIdentifier() {
	    return this.getTypedRuleContext(MultipartIdentifierContext,0);
	};

	SET() {
	    return this.getToken(SqlBaseParser.SET, 0);
	};

	SERDE() {
	    return this.getToken(SqlBaseParser.SERDE, 0);
	};

	STRING() {
	    return this.getToken(SqlBaseParser.STRING, 0);
	};

	partitionSpec() {
	    return this.getTypedRuleContext(PartitionSpecContext,0);
	};

	WITH() {
	    return this.getToken(SqlBaseParser.WITH, 0);
	};

	SERDEPROPERTIES() {
	    return this.getToken(SqlBaseParser.SERDEPROPERTIES, 0);
	};

	tablePropertyList() {
	    return this.getTypedRuleContext(TablePropertyListContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof SqlBaseVisitor ) {
	        return visitor.visitSetTableSerDe(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

SqlBaseParser.SetTableSerDeContext = SetTableSerDeContext;

class CreateViewContext extends StatementContext {

    constructor(parser, ctx) {
        super(parser);
        this.selectStmt = null; // QueryContext;
        super.copyFrom(ctx);
    }

	CREATE() {
	    return this.getToken(SqlBaseParser.CREATE, 0);
	};

	VIEW() {
	    return this.getToken(SqlBaseParser.VIEW, 0);
	};

	multipartIdentifier() {
	    return this.getTypedRuleContext(MultipartIdentifierContext,0);
	};

	AS() {
	    return this.getToken(SqlBaseParser.AS, 0);
	};

	query() {
	    return this.getTypedRuleContext(QueryContext,0);
	};

	OR() {
	    return this.getToken(SqlBaseParser.OR, 0);
	};

	REPLACE() {
	    return this.getToken(SqlBaseParser.REPLACE, 0);
	};

	TEMPORARY() {
	    return this.getToken(SqlBaseParser.TEMPORARY, 0);
	};

	IF() {
	    return this.getToken(SqlBaseParser.IF, 0);
	};

	NOT() {
	    return this.getToken(SqlBaseParser.NOT, 0);
	};

	EXISTS() {
	    return this.getToken(SqlBaseParser.EXISTS, 0);
	};

	identifierCommentList() {
	    return this.getTypedRuleContext(IdentifierCommentListContext,0);
	};

	commentSpec = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(CommentSpecContext);
	    } else {
	        return this.getTypedRuleContext(CommentSpecContext,i);
	    }
	};

	PARTITIONED = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SqlBaseParser.PARTITIONED);
	    } else {
	        return this.getToken(SqlBaseParser.PARTITIONED, i);
	    }
	};


	ON = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SqlBaseParser.ON);
	    } else {
	        return this.getToken(SqlBaseParser.ON, i);
	    }
	};


	identifierList = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IdentifierListContext);
	    } else {
	        return this.getTypedRuleContext(IdentifierListContext,i);
	    }
	};

	TBLPROPERTIES = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SqlBaseParser.TBLPROPERTIES);
	    } else {
	        return this.getToken(SqlBaseParser.TBLPROPERTIES, i);
	    }
	};


	tablePropertyList = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(TablePropertyListContext);
	    } else {
	        return this.getTypedRuleContext(TablePropertyListContext,i);
	    }
	};

	GLOBAL() {
	    return this.getToken(SqlBaseParser.GLOBAL, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof SqlBaseVisitor ) {
	        return visitor.visitCreateView(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

SqlBaseParser.CreateViewContext = CreateViewContext;

class DropTablePartitionsContext extends StatementContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	ALTER() {
	    return this.getToken(SqlBaseParser.ALTER, 0);
	};

	multipartIdentifier() {
	    return this.getTypedRuleContext(MultipartIdentifierContext,0);
	};

	DROP() {
	    return this.getToken(SqlBaseParser.DROP, 0);
	};

	partitionSpec = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(PartitionSpecContext);
	    } else {
	        return this.getTypedRuleContext(PartitionSpecContext,i);
	    }
	};

	TABLE() {
	    return this.getToken(SqlBaseParser.TABLE, 0);
	};

	VIEW() {
	    return this.getToken(SqlBaseParser.VIEW, 0);
	};

	IF() {
	    return this.getToken(SqlBaseParser.IF, 0);
	};

	EXISTS() {
	    return this.getToken(SqlBaseParser.EXISTS, 0);
	};

	PURGE() {
	    return this.getToken(SqlBaseParser.PURGE, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof SqlBaseVisitor ) {
	        return visitor.visitDropTablePartitions(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

SqlBaseParser.DropTablePartitionsContext = DropTablePartitionsContext;

class SetConfigurationContext extends StatementContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	SET() {
	    return this.getToken(SqlBaseParser.SET, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof SqlBaseVisitor ) {
	        return visitor.visitSetConfiguration(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

SqlBaseParser.SetConfigurationContext = SetConfigurationContext;

class DropTableContext extends StatementContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	DROP() {
	    return this.getToken(SqlBaseParser.DROP, 0);
	};

	TABLE() {
	    return this.getToken(SqlBaseParser.TABLE, 0);
	};

	multipartIdentifier() {
	    return this.getTypedRuleContext(MultipartIdentifierContext,0);
	};

	IF() {
	    return this.getToken(SqlBaseParser.IF, 0);
	};

	EXISTS() {
	    return this.getToken(SqlBaseParser.EXISTS, 0);
	};

	PURGE() {
	    return this.getToken(SqlBaseParser.PURGE, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof SqlBaseVisitor ) {
	        return visitor.visitDropTable(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

SqlBaseParser.DropTableContext = DropTableContext;

class ShowTableExtendedContext extends StatementContext {

    constructor(parser, ctx) {
        super(parser);
        this.ns = null; // MultipartIdentifierContext;
        this.pattern = null; // Token;
        super.copyFrom(ctx);
    }

	SHOW() {
	    return this.getToken(SqlBaseParser.SHOW, 0);
	};

	TABLE() {
	    return this.getToken(SqlBaseParser.TABLE, 0);
	};

	EXTENDED() {
	    return this.getToken(SqlBaseParser.EXTENDED, 0);
	};

	LIKE() {
	    return this.getToken(SqlBaseParser.LIKE, 0);
	};

	STRING() {
	    return this.getToken(SqlBaseParser.STRING, 0);
	};

	partitionSpec() {
	    return this.getTypedRuleContext(PartitionSpecContext,0);
	};

	FROM() {
	    return this.getToken(SqlBaseParser.FROM, 0);
	};

	IN() {
	    return this.getToken(SqlBaseParser.IN, 0);
	};

	multipartIdentifier() {
	    return this.getTypedRuleContext(MultipartIdentifierContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof SqlBaseVisitor ) {
	        return visitor.visitShowTableExtended(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

SqlBaseParser.ShowTableExtendedContext = ShowTableExtendedContext;

class DescribeNamespaceContext extends StatementContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	namespace() {
	    return this.getTypedRuleContext(NamespaceContext,0);
	};

	multipartIdentifier() {
	    return this.getTypedRuleContext(MultipartIdentifierContext,0);
	};

	DESC() {
	    return this.getToken(SqlBaseParser.DESC, 0);
	};

	DESCRIBE() {
	    return this.getToken(SqlBaseParser.DESCRIBE, 0);
	};

	EXTENDED() {
	    return this.getToken(SqlBaseParser.EXTENDED, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof SqlBaseVisitor ) {
	        return visitor.visitDescribeNamespace(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

SqlBaseParser.DescribeNamespaceContext = DescribeNamespaceContext;

class AlterTableAlterColumnContext extends StatementContext {

    constructor(parser, ctx) {
        super(parser);
        this.table = null; // MultipartIdentifierContext;
        this.column = null; // MultipartIdentifierContext;
        super.copyFrom(ctx);
    }

	ALTER = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SqlBaseParser.ALTER);
	    } else {
	        return this.getToken(SqlBaseParser.ALTER, i);
	    }
	};


	TABLE() {
	    return this.getToken(SqlBaseParser.TABLE, 0);
	};

	multipartIdentifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(MultipartIdentifierContext);
	    } else {
	        return this.getTypedRuleContext(MultipartIdentifierContext,i);
	    }
	};

	CHANGE() {
	    return this.getToken(SqlBaseParser.CHANGE, 0);
	};

	COLUMN() {
	    return this.getToken(SqlBaseParser.COLUMN, 0);
	};

	alterColumnAction() {
	    return this.getTypedRuleContext(AlterColumnActionContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof SqlBaseVisitor ) {
	        return visitor.visitAlterTableAlterColumn(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

SqlBaseParser.AlterTableAlterColumnContext = AlterTableAlterColumnContext;

class RefreshFunctionContext extends StatementContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	REFRESH() {
	    return this.getToken(SqlBaseParser.REFRESH, 0);
	};

	FUNCTION() {
	    return this.getToken(SqlBaseParser.FUNCTION, 0);
	};

	multipartIdentifier() {
	    return this.getTypedRuleContext(MultipartIdentifierContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof SqlBaseVisitor ) {
	        return visitor.visitRefreshFunction(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

SqlBaseParser.RefreshFunctionContext = RefreshFunctionContext;

class CommentTableContext extends StatementContext {

    constructor(parser, ctx) {
        super(parser);
        this.comment = null; // Token;
        super.copyFrom(ctx);
    }

	COMMENT() {
	    return this.getToken(SqlBaseParser.COMMENT, 0);
	};

	ON() {
	    return this.getToken(SqlBaseParser.ON, 0);
	};

	TABLE() {
	    return this.getToken(SqlBaseParser.TABLE, 0);
	};

	multipartIdentifier() {
	    return this.getTypedRuleContext(MultipartIdentifierContext,0);
	};

	IS() {
	    return this.getToken(SqlBaseParser.IS, 0);
	};

	STRING() {
	    return this.getToken(SqlBaseParser.STRING, 0);
	};

	NULL() {
	    return this.getToken(SqlBaseParser.NULL, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof SqlBaseVisitor ) {
	        return visitor.visitCommentTable(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

SqlBaseParser.CommentTableContext = CommentTableContext;

class CreateNamespaceContext extends StatementContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	CREATE() {
	    return this.getToken(SqlBaseParser.CREATE, 0);
	};

	namespace() {
	    return this.getTypedRuleContext(NamespaceContext,0);
	};

	multipartIdentifier() {
	    return this.getTypedRuleContext(MultipartIdentifierContext,0);
	};

	IF() {
	    return this.getToken(SqlBaseParser.IF, 0);
	};

	NOT() {
	    return this.getToken(SqlBaseParser.NOT, 0);
	};

	EXISTS() {
	    return this.getToken(SqlBaseParser.EXISTS, 0);
	};

	commentSpec = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(CommentSpecContext);
	    } else {
	        return this.getTypedRuleContext(CommentSpecContext,i);
	    }
	};

	locationSpec = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(LocationSpecContext);
	    } else {
	        return this.getTypedRuleContext(LocationSpecContext,i);
	    }
	};

	WITH = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SqlBaseParser.WITH);
	    } else {
	        return this.getToken(SqlBaseParser.WITH, i);
	    }
	};


	tablePropertyList = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(TablePropertyListContext);
	    } else {
	        return this.getTypedRuleContext(TablePropertyListContext,i);
	    }
	};

	DBPROPERTIES = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SqlBaseParser.DBPROPERTIES);
	    } else {
	        return this.getToken(SqlBaseParser.DBPROPERTIES, i);
	    }
	};


	PROPERTIES = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SqlBaseParser.PROPERTIES);
	    } else {
	        return this.getToken(SqlBaseParser.PROPERTIES, i);
	    }
	};


	accept(visitor) {
	    if ( visitor instanceof SqlBaseVisitor ) {
	        return visitor.visitCreateNamespace(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

SqlBaseParser.CreateNamespaceContext = CreateNamespaceContext;

class ShowTblPropertiesContext extends StatementContext {

    constructor(parser, ctx) {
        super(parser);
        this.table = null; // MultipartIdentifierContext;
        this.key = null; // TablePropertyKeyContext;
        super.copyFrom(ctx);
    }

	SHOW() {
	    return this.getToken(SqlBaseParser.SHOW, 0);
	};

	TBLPROPERTIES() {
	    return this.getToken(SqlBaseParser.TBLPROPERTIES, 0);
	};

	multipartIdentifier() {
	    return this.getTypedRuleContext(MultipartIdentifierContext,0);
	};

	tablePropertyKey() {
	    return this.getTypedRuleContext(TablePropertyKeyContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof SqlBaseVisitor ) {
	        return visitor.visitShowTblProperties(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

SqlBaseParser.ShowTblPropertiesContext = ShowTblPropertiesContext;

class UnsetTablePropertiesContext extends StatementContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	ALTER() {
	    return this.getToken(SqlBaseParser.ALTER, 0);
	};

	multipartIdentifier() {
	    return this.getTypedRuleContext(MultipartIdentifierContext,0);
	};

	UNSET() {
	    return this.getToken(SqlBaseParser.UNSET, 0);
	};

	TBLPROPERTIES() {
	    return this.getToken(SqlBaseParser.TBLPROPERTIES, 0);
	};

	tablePropertyList() {
	    return this.getTypedRuleContext(TablePropertyListContext,0);
	};

	TABLE() {
	    return this.getToken(SqlBaseParser.TABLE, 0);
	};

	VIEW() {
	    return this.getToken(SqlBaseParser.VIEW, 0);
	};

	IF() {
	    return this.getToken(SqlBaseParser.IF, 0);
	};

	EXISTS() {
	    return this.getToken(SqlBaseParser.EXISTS, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof SqlBaseVisitor ) {
	        return visitor.visitUnsetTableProperties(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

SqlBaseParser.UnsetTablePropertiesContext = UnsetTablePropertiesContext;

class SetTableLocationContext extends StatementContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	ALTER() {
	    return this.getToken(SqlBaseParser.ALTER, 0);
	};

	TABLE() {
	    return this.getToken(SqlBaseParser.TABLE, 0);
	};

	multipartIdentifier() {
	    return this.getTypedRuleContext(MultipartIdentifierContext,0);
	};

	SET() {
	    return this.getToken(SqlBaseParser.SET, 0);
	};

	locationSpec() {
	    return this.getTypedRuleContext(LocationSpecContext,0);
	};

	partitionSpec() {
	    return this.getTypedRuleContext(PartitionSpecContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof SqlBaseVisitor ) {
	        return visitor.visitSetTableLocation(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

SqlBaseParser.SetTableLocationContext = SetTableLocationContext;

class DropTableColumnsContext extends StatementContext {

    constructor(parser, ctx) {
        super(parser);
        this.columns = null; // MultipartIdentifierListContext;
        super.copyFrom(ctx);
    }

	ALTER() {
	    return this.getToken(SqlBaseParser.ALTER, 0);
	};

	TABLE() {
	    return this.getToken(SqlBaseParser.TABLE, 0);
	};

	multipartIdentifier() {
	    return this.getTypedRuleContext(MultipartIdentifierContext,0);
	};

	DROP() {
	    return this.getToken(SqlBaseParser.DROP, 0);
	};

	COLUMN() {
	    return this.getToken(SqlBaseParser.COLUMN, 0);
	};

	COLUMNS() {
	    return this.getToken(SqlBaseParser.COLUMNS, 0);
	};

	multipartIdentifierList() {
	    return this.getTypedRuleContext(MultipartIdentifierListContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof SqlBaseVisitor ) {
	        return visitor.visitDropTableColumns(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

SqlBaseParser.DropTableColumnsContext = DropTableColumnsContext;

class ShowViewsContext extends StatementContext {

    constructor(parser, ctx) {
        super(parser);
        this.pattern = null; // Token;
        super.copyFrom(ctx);
    }

	SHOW() {
	    return this.getToken(SqlBaseParser.SHOW, 0);
	};

	VIEWS() {
	    return this.getToken(SqlBaseParser.VIEWS, 0);
	};

	multipartIdentifier() {
	    return this.getTypedRuleContext(MultipartIdentifierContext,0);
	};

	FROM() {
	    return this.getToken(SqlBaseParser.FROM, 0);
	};

	IN() {
	    return this.getToken(SqlBaseParser.IN, 0);
	};

	STRING() {
	    return this.getToken(SqlBaseParser.STRING, 0);
	};

	LIKE() {
	    return this.getToken(SqlBaseParser.LIKE, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof SqlBaseVisitor ) {
	        return visitor.visitShowViews(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

SqlBaseParser.ShowViewsContext = ShowViewsContext;

class ShowFunctionsContext extends StatementContext {

    constructor(parser, ctx) {
        super(parser);
        this.pattern = null; // Token;
        super.copyFrom(ctx);
    }

	SHOW() {
	    return this.getToken(SqlBaseParser.SHOW, 0);
	};

	FUNCTIONS() {
	    return this.getToken(SqlBaseParser.FUNCTIONS, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	multipartIdentifier() {
	    return this.getTypedRuleContext(MultipartIdentifierContext,0);
	};

	LIKE() {
	    return this.getToken(SqlBaseParser.LIKE, 0);
	};

	STRING() {
	    return this.getToken(SqlBaseParser.STRING, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof SqlBaseVisitor ) {
	        return visitor.visitShowFunctions(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

SqlBaseParser.ShowFunctionsContext = ShowFunctionsContext;

class CacheTableContext extends StatementContext {

    constructor(parser, ctx) {
        super(parser);
        this.options = null; // TablePropertyListContext;
        super.copyFrom(ctx);
    }

	CACHE() {
	    return this.getToken(SqlBaseParser.CACHE, 0);
	};

	TABLE() {
	    return this.getToken(SqlBaseParser.TABLE, 0);
	};

	multipartIdentifier() {
	    return this.getTypedRuleContext(MultipartIdentifierContext,0);
	};

	LAZY() {
	    return this.getToken(SqlBaseParser.LAZY, 0);
	};

	OPTIONS() {
	    return this.getToken(SqlBaseParser.OPTIONS, 0);
	};

	query() {
	    return this.getTypedRuleContext(QueryContext,0);
	};

	tablePropertyList() {
	    return this.getTypedRuleContext(TablePropertyListContext,0);
	};

	AS() {
	    return this.getToken(SqlBaseParser.AS, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof SqlBaseVisitor ) {
	        return visitor.visitCacheTable(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

SqlBaseParser.CacheTableContext = CacheTableContext;

class AddTableColumnsContext extends StatementContext {

    constructor(parser, ctx) {
        super(parser);
        this.columns = null; // QualifiedColTypeWithPositionListContext;
        super.copyFrom(ctx);
    }

	ALTER() {
	    return this.getToken(SqlBaseParser.ALTER, 0);
	};

	TABLE() {
	    return this.getToken(SqlBaseParser.TABLE, 0);
	};

	multipartIdentifier() {
	    return this.getTypedRuleContext(MultipartIdentifierContext,0);
	};

	ADD() {
	    return this.getToken(SqlBaseParser.ADD, 0);
	};

	COLUMN() {
	    return this.getToken(SqlBaseParser.COLUMN, 0);
	};

	COLUMNS() {
	    return this.getToken(SqlBaseParser.COLUMNS, 0);
	};

	qualifiedColTypeWithPositionList() {
	    return this.getTypedRuleContext(QualifiedColTypeWithPositionListContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof SqlBaseVisitor ) {
	        return visitor.visitAddTableColumns(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

SqlBaseParser.AddTableColumnsContext = AddTableColumnsContext;

class SetTablePropertiesContext extends StatementContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	ALTER() {
	    return this.getToken(SqlBaseParser.ALTER, 0);
	};

	multipartIdentifier() {
	    return this.getTypedRuleContext(MultipartIdentifierContext,0);
	};

	SET() {
	    return this.getToken(SqlBaseParser.SET, 0);
	};

	TBLPROPERTIES() {
	    return this.getToken(SqlBaseParser.TBLPROPERTIES, 0);
	};

	tablePropertyList() {
	    return this.getTypedRuleContext(TablePropertyListContext,0);
	};

	TABLE() {
	    return this.getToken(SqlBaseParser.TABLE, 0);
	};

	VIEW() {
	    return this.getToken(SqlBaseParser.VIEW, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof SqlBaseVisitor ) {
	        return visitor.visitSetTableProperties(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

SqlBaseParser.SetTablePropertiesContext = SetTablePropertiesContext;

class ConfigKeyContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SqlBaseParser.RULE_configKey;
    }

	quotedIdentifier() {
	    return this.getTypedRuleContext(QuotedIdentifierContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof SqlBaseVisitor ) {
	        return visitor.visitConfigKey(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ConfigValueContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SqlBaseParser.RULE_configValue;
    }

	quotedIdentifier() {
	    return this.getTypedRuleContext(QuotedIdentifierContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof SqlBaseVisitor ) {
	        return visitor.visitConfigValue(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class UnsupportedHiveNativeCommandsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SqlBaseParser.RULE_unsupportedHiveNativeCommands;
        this.kw1 = null; // Token
        this.kw2 = null; // Token
        this.kw3 = null; // Token
        this.kw4 = null; // Token
        this.kw5 = null; // Token
        this.kw6 = null; // Token
    }

	CREATE() {
	    return this.getToken(SqlBaseParser.CREATE, 0);
	};

	ROLE() {
	    return this.getToken(SqlBaseParser.ROLE, 0);
	};

	DROP() {
	    return this.getToken(SqlBaseParser.DROP, 0);
	};

	GRANT() {
	    return this.getToken(SqlBaseParser.GRANT, 0);
	};

	REVOKE() {
	    return this.getToken(SqlBaseParser.REVOKE, 0);
	};

	SHOW() {
	    return this.getToken(SqlBaseParser.SHOW, 0);
	};

	PRINCIPALS() {
	    return this.getToken(SqlBaseParser.PRINCIPALS, 0);
	};

	ROLES() {
	    return this.getToken(SqlBaseParser.ROLES, 0);
	};

	CURRENT() {
	    return this.getToken(SqlBaseParser.CURRENT, 0);
	};

	EXPORT() {
	    return this.getToken(SqlBaseParser.EXPORT, 0);
	};

	TABLE() {
	    return this.getToken(SqlBaseParser.TABLE, 0);
	};

	IMPORT() {
	    return this.getToken(SqlBaseParser.IMPORT, 0);
	};

	COMPACTIONS() {
	    return this.getToken(SqlBaseParser.COMPACTIONS, 0);
	};

	TRANSACTIONS() {
	    return this.getToken(SqlBaseParser.TRANSACTIONS, 0);
	};

	INDEXES() {
	    return this.getToken(SqlBaseParser.INDEXES, 0);
	};

	LOCKS() {
	    return this.getToken(SqlBaseParser.LOCKS, 0);
	};

	INDEX() {
	    return this.getToken(SqlBaseParser.INDEX, 0);
	};

	ALTER() {
	    return this.getToken(SqlBaseParser.ALTER, 0);
	};

	LOCK() {
	    return this.getToken(SqlBaseParser.LOCK, 0);
	};

	DATABASE() {
	    return this.getToken(SqlBaseParser.DATABASE, 0);
	};

	UNLOCK() {
	    return this.getToken(SqlBaseParser.UNLOCK, 0);
	};

	TEMPORARY() {
	    return this.getToken(SqlBaseParser.TEMPORARY, 0);
	};

	MACRO() {
	    return this.getToken(SqlBaseParser.MACRO, 0);
	};

	tableIdentifier() {
	    return this.getTypedRuleContext(TableIdentifierContext,0);
	};

	NOT() {
	    return this.getToken(SqlBaseParser.NOT, 0);
	};

	CLUSTERED() {
	    return this.getToken(SqlBaseParser.CLUSTERED, 0);
	};

	BY() {
	    return this.getToken(SqlBaseParser.BY, 0);
	};

	SORTED() {
	    return this.getToken(SqlBaseParser.SORTED, 0);
	};

	SKEWED() {
	    return this.getToken(SqlBaseParser.SKEWED, 0);
	};

	STORED() {
	    return this.getToken(SqlBaseParser.STORED, 0);
	};

	AS() {
	    return this.getToken(SqlBaseParser.AS, 0);
	};

	DIRECTORIES() {
	    return this.getToken(SqlBaseParser.DIRECTORIES, 0);
	};

	SET() {
	    return this.getToken(SqlBaseParser.SET, 0);
	};

	LOCATION() {
	    return this.getToken(SqlBaseParser.LOCATION, 0);
	};

	EXCHANGE() {
	    return this.getToken(SqlBaseParser.EXCHANGE, 0);
	};

	PARTITION() {
	    return this.getToken(SqlBaseParser.PARTITION, 0);
	};

	ARCHIVE() {
	    return this.getToken(SqlBaseParser.ARCHIVE, 0);
	};

	UNARCHIVE() {
	    return this.getToken(SqlBaseParser.UNARCHIVE, 0);
	};

	TOUCH() {
	    return this.getToken(SqlBaseParser.TOUCH, 0);
	};

	COMPACT() {
	    return this.getToken(SqlBaseParser.COMPACT, 0);
	};

	partitionSpec() {
	    return this.getTypedRuleContext(PartitionSpecContext,0);
	};

	CONCATENATE() {
	    return this.getToken(SqlBaseParser.CONCATENATE, 0);
	};

	FILEFORMAT() {
	    return this.getToken(SqlBaseParser.FILEFORMAT, 0);
	};

	REPLACE() {
	    return this.getToken(SqlBaseParser.REPLACE, 0);
	};

	COLUMNS() {
	    return this.getToken(SqlBaseParser.COLUMNS, 0);
	};

	START() {
	    return this.getToken(SqlBaseParser.START, 0);
	};

	TRANSACTION() {
	    return this.getToken(SqlBaseParser.TRANSACTION, 0);
	};

	COMMIT() {
	    return this.getToken(SqlBaseParser.COMMIT, 0);
	};

	ROLLBACK() {
	    return this.getToken(SqlBaseParser.ROLLBACK, 0);
	};

	DFS() {
	    return this.getToken(SqlBaseParser.DFS, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof SqlBaseVisitor ) {
	        return visitor.visitUnsupportedHiveNativeCommands(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class CreateTableHeaderContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SqlBaseParser.RULE_createTableHeader;
    }

	CREATE() {
	    return this.getToken(SqlBaseParser.CREATE, 0);
	};

	TABLE() {
	    return this.getToken(SqlBaseParser.TABLE, 0);
	};

	multipartIdentifier() {
	    return this.getTypedRuleContext(MultipartIdentifierContext,0);
	};

	TEMPORARY() {
	    return this.getToken(SqlBaseParser.TEMPORARY, 0);
	};

	EXTERNAL() {
	    return this.getToken(SqlBaseParser.EXTERNAL, 0);
	};

	IF() {
	    return this.getToken(SqlBaseParser.IF, 0);
	};

	NOT() {
	    return this.getToken(SqlBaseParser.NOT, 0);
	};

	EXISTS() {
	    return this.getToken(SqlBaseParser.EXISTS, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof SqlBaseVisitor ) {
	        return visitor.visitCreateTableHeader(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ReplaceTableHeaderContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SqlBaseParser.RULE_replaceTableHeader;
    }

	REPLACE() {
	    return this.getToken(SqlBaseParser.REPLACE, 0);
	};

	TABLE() {
	    return this.getToken(SqlBaseParser.TABLE, 0);
	};

	multipartIdentifier() {
	    return this.getTypedRuleContext(MultipartIdentifierContext,0);
	};

	CREATE() {
	    return this.getToken(SqlBaseParser.CREATE, 0);
	};

	OR() {
	    return this.getToken(SqlBaseParser.OR, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof SqlBaseVisitor ) {
	        return visitor.visitReplaceTableHeader(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class BucketSpecContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SqlBaseParser.RULE_bucketSpec;
    }

	CLUSTERED() {
	    return this.getToken(SqlBaseParser.CLUSTERED, 0);
	};

	BY = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SqlBaseParser.BY);
	    } else {
	        return this.getToken(SqlBaseParser.BY, i);
	    }
	};


	identifierList() {
	    return this.getTypedRuleContext(IdentifierListContext,0);
	};

	INTO() {
	    return this.getToken(SqlBaseParser.INTO, 0);
	};

	INTEGER_VALUE() {
	    return this.getToken(SqlBaseParser.INTEGER_VALUE, 0);
	};

	BUCKETS() {
	    return this.getToken(SqlBaseParser.BUCKETS, 0);
	};

	SORTED() {
	    return this.getToken(SqlBaseParser.SORTED, 0);
	};

	orderedIdentifierList() {
	    return this.getTypedRuleContext(OrderedIdentifierListContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof SqlBaseVisitor ) {
	        return visitor.visitBucketSpec(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class SkewSpecContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SqlBaseParser.RULE_skewSpec;
    }

	SKEWED() {
	    return this.getToken(SqlBaseParser.SKEWED, 0);
	};

	BY() {
	    return this.getToken(SqlBaseParser.BY, 0);
	};

	identifierList() {
	    return this.getTypedRuleContext(IdentifierListContext,0);
	};

	ON() {
	    return this.getToken(SqlBaseParser.ON, 0);
	};

	constantList() {
	    return this.getTypedRuleContext(ConstantListContext,0);
	};

	nestedConstantList() {
	    return this.getTypedRuleContext(NestedConstantListContext,0);
	};

	STORED() {
	    return this.getToken(SqlBaseParser.STORED, 0);
	};

	AS() {
	    return this.getToken(SqlBaseParser.AS, 0);
	};

	DIRECTORIES() {
	    return this.getToken(SqlBaseParser.DIRECTORIES, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof SqlBaseVisitor ) {
	        return visitor.visitSkewSpec(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class LocationSpecContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SqlBaseParser.RULE_locationSpec;
        this.location = null; // Token
    }

	LOCATION() {
	    return this.getToken(SqlBaseParser.LOCATION, 0);
	};

	STRING() {
	    return this.getToken(SqlBaseParser.STRING, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof SqlBaseVisitor ) {
	        return visitor.visitLocationSpec(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class CommentSpecContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SqlBaseParser.RULE_commentSpec;
        this.comment = null; // Token
    }

	COMMENT() {
	    return this.getToken(SqlBaseParser.COMMENT, 0);
	};

	STRING() {
	    return this.getToken(SqlBaseParser.STRING, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof SqlBaseVisitor ) {
	        return visitor.visitCommentSpec(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class QueryContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SqlBaseParser.RULE_query;
    }

	queryTerm() {
	    return this.getTypedRuleContext(QueryTermContext,0);
	};

	queryOrganization() {
	    return this.getTypedRuleContext(QueryOrganizationContext,0);
	};

	ctes() {
	    return this.getTypedRuleContext(CtesContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof SqlBaseVisitor ) {
	        return visitor.visitQuery(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class InsertIntoContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SqlBaseParser.RULE_insertInto;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class InsertOverwriteHiveDirContext extends InsertIntoContext {

    constructor(parser, ctx) {
        super(parser);
        this.path = null; // Token;
        super.copyFrom(ctx);
    }

	INSERT() {
	    return this.getToken(SqlBaseParser.INSERT, 0);
	};

	OVERWRITE() {
	    return this.getToken(SqlBaseParser.OVERWRITE, 0);
	};

	DIRECTORY() {
	    return this.getToken(SqlBaseParser.DIRECTORY, 0);
	};

	STRING() {
	    return this.getToken(SqlBaseParser.STRING, 0);
	};

	LOCAL() {
	    return this.getToken(SqlBaseParser.LOCAL, 0);
	};

	rowFormat() {
	    return this.getTypedRuleContext(RowFormatContext,0);
	};

	createFileFormat() {
	    return this.getTypedRuleContext(CreateFileFormatContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof SqlBaseVisitor ) {
	        return visitor.visitInsertOverwriteHiveDir(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

SqlBaseParser.InsertOverwriteHiveDirContext = InsertOverwriteHiveDirContext;

class InsertOverwriteDirContext extends InsertIntoContext {

    constructor(parser, ctx) {
        super(parser);
        this.path = null; // Token;
        this.options = null; // TablePropertyListContext;
        super.copyFrom(ctx);
    }

	INSERT() {
	    return this.getToken(SqlBaseParser.INSERT, 0);
	};

	OVERWRITE() {
	    return this.getToken(SqlBaseParser.OVERWRITE, 0);
	};

	DIRECTORY() {
	    return this.getToken(SqlBaseParser.DIRECTORY, 0);
	};

	tableProvider() {
	    return this.getTypedRuleContext(TableProviderContext,0);
	};

	LOCAL() {
	    return this.getToken(SqlBaseParser.LOCAL, 0);
	};

	OPTIONS() {
	    return this.getToken(SqlBaseParser.OPTIONS, 0);
	};

	STRING() {
	    return this.getToken(SqlBaseParser.STRING, 0);
	};

	tablePropertyList() {
	    return this.getTypedRuleContext(TablePropertyListContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof SqlBaseVisitor ) {
	        return visitor.visitInsertOverwriteDir(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

SqlBaseParser.InsertOverwriteDirContext = InsertOverwriteDirContext;

class InsertOverwriteTableContext extends InsertIntoContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	INSERT() {
	    return this.getToken(SqlBaseParser.INSERT, 0);
	};

	OVERWRITE() {
	    return this.getToken(SqlBaseParser.OVERWRITE, 0);
	};

	multipartIdentifier() {
	    return this.getTypedRuleContext(MultipartIdentifierContext,0);
	};

	TABLE() {
	    return this.getToken(SqlBaseParser.TABLE, 0);
	};

	partitionSpec() {
	    return this.getTypedRuleContext(PartitionSpecContext,0);
	};

	identifierList() {
	    return this.getTypedRuleContext(IdentifierListContext,0);
	};

	IF() {
	    return this.getToken(SqlBaseParser.IF, 0);
	};

	NOT() {
	    return this.getToken(SqlBaseParser.NOT, 0);
	};

	EXISTS() {
	    return this.getToken(SqlBaseParser.EXISTS, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof SqlBaseVisitor ) {
	        return visitor.visitInsertOverwriteTable(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

SqlBaseParser.InsertOverwriteTableContext = InsertOverwriteTableContext;

class InsertIntoTableContext extends InsertIntoContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	INSERT() {
	    return this.getToken(SqlBaseParser.INSERT, 0);
	};

	INTO() {
	    return this.getToken(SqlBaseParser.INTO, 0);
	};

	multipartIdentifier() {
	    return this.getTypedRuleContext(MultipartIdentifierContext,0);
	};

	TABLE() {
	    return this.getToken(SqlBaseParser.TABLE, 0);
	};

	partitionSpec() {
	    return this.getTypedRuleContext(PartitionSpecContext,0);
	};

	IF() {
	    return this.getToken(SqlBaseParser.IF, 0);
	};

	NOT() {
	    return this.getToken(SqlBaseParser.NOT, 0);
	};

	EXISTS() {
	    return this.getToken(SqlBaseParser.EXISTS, 0);
	};

	identifierList() {
	    return this.getTypedRuleContext(IdentifierListContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof SqlBaseVisitor ) {
	        return visitor.visitInsertIntoTable(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

SqlBaseParser.InsertIntoTableContext = InsertIntoTableContext;

class PartitionSpecLocationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SqlBaseParser.RULE_partitionSpecLocation;
    }

	partitionSpec() {
	    return this.getTypedRuleContext(PartitionSpecContext,0);
	};

	locationSpec() {
	    return this.getTypedRuleContext(LocationSpecContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof SqlBaseVisitor ) {
	        return visitor.visitPartitionSpecLocation(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class PartitionSpecContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SqlBaseParser.RULE_partitionSpec;
    }

	PARTITION() {
	    return this.getToken(SqlBaseParser.PARTITION, 0);
	};

	partitionVal = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(PartitionValContext);
	    } else {
	        return this.getTypedRuleContext(PartitionValContext,i);
	    }
	};

	accept(visitor) {
	    if ( visitor instanceof SqlBaseVisitor ) {
	        return visitor.visitPartitionSpec(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class PartitionValContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SqlBaseParser.RULE_partitionVal;
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	EQ() {
	    return this.getToken(SqlBaseParser.EQ, 0);
	};

	constant() {
	    return this.getTypedRuleContext(ConstantContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof SqlBaseVisitor ) {
	        return visitor.visitPartitionVal(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class NamespaceContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SqlBaseParser.RULE_namespace;
    }

	NAMESPACE() {
	    return this.getToken(SqlBaseParser.NAMESPACE, 0);
	};

	DATABASE() {
	    return this.getToken(SqlBaseParser.DATABASE, 0);
	};

	SCHEMA() {
	    return this.getToken(SqlBaseParser.SCHEMA, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof SqlBaseVisitor ) {
	        return visitor.visitNamespace(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class DescribeFuncNameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SqlBaseParser.RULE_describeFuncName;
    }

	qualifiedName() {
	    return this.getTypedRuleContext(QualifiedNameContext,0);
	};

	STRING() {
	    return this.getToken(SqlBaseParser.STRING, 0);
	};

	comparisonOperator() {
	    return this.getTypedRuleContext(ComparisonOperatorContext,0);
	};

	arithmeticOperator() {
	    return this.getTypedRuleContext(ArithmeticOperatorContext,0);
	};

	predicateOperator() {
	    return this.getTypedRuleContext(PredicateOperatorContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof SqlBaseVisitor ) {
	        return visitor.visitDescribeFuncName(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class DescribeColNameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SqlBaseParser.RULE_describeColName;
        this._identifier = null; // IdentifierContext
        this.nameParts = []; // of IdentifierContexts
    }

	identifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IdentifierContext);
	    } else {
	        return this.getTypedRuleContext(IdentifierContext,i);
	    }
	};

	accept(visitor) {
	    if ( visitor instanceof SqlBaseVisitor ) {
	        return visitor.visitDescribeColName(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class CtesContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SqlBaseParser.RULE_ctes;
    }

	WITH() {
	    return this.getToken(SqlBaseParser.WITH, 0);
	};

	namedQuery = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(NamedQueryContext);
	    } else {
	        return this.getTypedRuleContext(NamedQueryContext,i);
	    }
	};

	accept(visitor) {
	    if ( visitor instanceof SqlBaseVisitor ) {
	        return visitor.visitCtes(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class NamedQueryContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SqlBaseParser.RULE_namedQuery;
        this.name = null; // ErrorCapturingIdentifierContext
        this.columnAliases = null; // IdentifierListContext
    }

	query() {
	    return this.getTypedRuleContext(QueryContext,0);
	};

	errorCapturingIdentifier() {
	    return this.getTypedRuleContext(ErrorCapturingIdentifierContext,0);
	};

	AS() {
	    return this.getToken(SqlBaseParser.AS, 0);
	};

	identifierList() {
	    return this.getTypedRuleContext(IdentifierListContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof SqlBaseVisitor ) {
	        return visitor.visitNamedQuery(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class TableProviderContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SqlBaseParser.RULE_tableProvider;
    }

	USING() {
	    return this.getToken(SqlBaseParser.USING, 0);
	};

	multipartIdentifier() {
	    return this.getTypedRuleContext(MultipartIdentifierContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof SqlBaseVisitor ) {
	        return visitor.visitTableProvider(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class CreateTableClausesContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SqlBaseParser.RULE_createTableClauses;
        this.partitioning = null; // PartitionFieldListContext
    }

	tableOptions = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(TableOptionsContext);
	    } else {
	        return this.getTypedRuleContext(TableOptionsContext,i);
	    }
	};

	skewSpec = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SkewSpecContext);
	    } else {
	        return this.getTypedRuleContext(SkewSpecContext,i);
	    }
	};

	bucketSpec = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(BucketSpecContext);
	    } else {
	        return this.getTypedRuleContext(BucketSpecContext,i);
	    }
	};

	rowFormat = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(RowFormatContext);
	    } else {
	        return this.getTypedRuleContext(RowFormatContext,i);
	    }
	};

	createFileFormat = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(CreateFileFormatContext);
	    } else {
	        return this.getTypedRuleContext(CreateFileFormatContext,i);
	    }
	};

	locationSpec = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(LocationSpecContext);
	    } else {
	        return this.getTypedRuleContext(LocationSpecContext,i);
	    }
	};

	commentSpec = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(CommentSpecContext);
	    } else {
	        return this.getTypedRuleContext(CommentSpecContext,i);
	    }
	};

	tableProperties = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(TablePropertiesContext);
	    } else {
	        return this.getTypedRuleContext(TablePropertiesContext,i);
	    }
	};

	PARTITIONED = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SqlBaseParser.PARTITIONED);
	    } else {
	        return this.getToken(SqlBaseParser.PARTITIONED, i);
	    }
	};


	BY = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SqlBaseParser.BY);
	    } else {
	        return this.getToken(SqlBaseParser.BY, i);
	    }
	};


	partitionFieldList = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(PartitionFieldListContext);
	    } else {
	        return this.getTypedRuleContext(PartitionFieldListContext,i);
	    }
	};

	accept(visitor) {
	    if ( visitor instanceof SqlBaseVisitor ) {
	        return visitor.visitCreateTableClauses(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class TablePropertiesContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SqlBaseParser.RULE_tableProperties;
        this.tableProps = null; // TablePropertyListContext
    }

	TBLPROPERTIES() {
	    return this.getToken(SqlBaseParser.TBLPROPERTIES, 0);
	};

	tablePropertyList() {
	    return this.getTypedRuleContext(TablePropertyListContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof SqlBaseVisitor ) {
	        return visitor.visitTableProperties(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class TableOptionsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SqlBaseParser.RULE_tableOptions;
        this.tableOpts = null; // TablePropertyListContext
    }

	OPTIONS() {
	    return this.getToken(SqlBaseParser.OPTIONS, 0);
	};

	tablePropertyList() {
	    return this.getTypedRuleContext(TablePropertyListContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof SqlBaseVisitor ) {
	        return visitor.visitTableOptions(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class TablePropertyListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SqlBaseParser.RULE_tablePropertyList;
    }

	tableProperty = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(TablePropertyContext);
	    } else {
	        return this.getTypedRuleContext(TablePropertyContext,i);
	    }
	};

	accept(visitor) {
	    if ( visitor instanceof SqlBaseVisitor ) {
	        return visitor.visitTablePropertyList(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class TablePropertyContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SqlBaseParser.RULE_tableProperty;
        this.key = null; // TablePropertyKeyContext
        this.value = null; // TablePropertyValueContext
    }

	tablePropertyKey() {
	    return this.getTypedRuleContext(TablePropertyKeyContext,0);
	};

	tablePropertyValue() {
	    return this.getTypedRuleContext(TablePropertyValueContext,0);
	};

	EQ() {
	    return this.getToken(SqlBaseParser.EQ, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof SqlBaseVisitor ) {
	        return visitor.visitTableProperty(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class TablePropertyKeyContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SqlBaseParser.RULE_tablePropertyKey;
    }

	identifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IdentifierContext);
	    } else {
	        return this.getTypedRuleContext(IdentifierContext,i);
	    }
	};

	STRING() {
	    return this.getToken(SqlBaseParser.STRING, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof SqlBaseVisitor ) {
	        return visitor.visitTablePropertyKey(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class TablePropertyValueContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SqlBaseParser.RULE_tablePropertyValue;
    }

	INTEGER_VALUE() {
	    return this.getToken(SqlBaseParser.INTEGER_VALUE, 0);
	};

	DECIMAL_VALUE() {
	    return this.getToken(SqlBaseParser.DECIMAL_VALUE, 0);
	};

	booleanValue() {
	    return this.getTypedRuleContext(BooleanValueContext,0);
	};

	STRING() {
	    return this.getToken(SqlBaseParser.STRING, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof SqlBaseVisitor ) {
	        return visitor.visitTablePropertyValue(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ConstantListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SqlBaseParser.RULE_constantList;
    }

	constant = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ConstantContext);
	    } else {
	        return this.getTypedRuleContext(ConstantContext,i);
	    }
	};

	accept(visitor) {
	    if ( visitor instanceof SqlBaseVisitor ) {
	        return visitor.visitConstantList(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class NestedConstantListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SqlBaseParser.RULE_nestedConstantList;
    }

	constantList = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ConstantListContext);
	    } else {
	        return this.getTypedRuleContext(ConstantListContext,i);
	    }
	};

	accept(visitor) {
	    if ( visitor instanceof SqlBaseVisitor ) {
	        return visitor.visitNestedConstantList(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class CreateFileFormatContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SqlBaseParser.RULE_createFileFormat;
    }

	STORED() {
	    return this.getToken(SqlBaseParser.STORED, 0);
	};

	AS() {
	    return this.getToken(SqlBaseParser.AS, 0);
	};

	fileFormat() {
	    return this.getTypedRuleContext(FileFormatContext,0);
	};

	BY() {
	    return this.getToken(SqlBaseParser.BY, 0);
	};

	storageHandler() {
	    return this.getTypedRuleContext(StorageHandlerContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof SqlBaseVisitor ) {
	        return visitor.visitCreateFileFormat(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class FileFormatContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SqlBaseParser.RULE_fileFormat;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class TableFileFormatContext extends FileFormatContext {

    constructor(parser, ctx) {
        super(parser);
        this.inFmt = null; // Token;
        this.outFmt = null; // Token;
        super.copyFrom(ctx);
    }

	INPUTFORMAT() {
	    return this.getToken(SqlBaseParser.INPUTFORMAT, 0);
	};

	OUTPUTFORMAT() {
	    return this.getToken(SqlBaseParser.OUTPUTFORMAT, 0);
	};

	STRING = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SqlBaseParser.STRING);
	    } else {
	        return this.getToken(SqlBaseParser.STRING, i);
	    }
	};


	accept(visitor) {
	    if ( visitor instanceof SqlBaseVisitor ) {
	        return visitor.visitTableFileFormat(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

SqlBaseParser.TableFileFormatContext = TableFileFormatContext;

class GenericFileFormatContext extends FileFormatContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof SqlBaseVisitor ) {
	        return visitor.visitGenericFileFormat(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

SqlBaseParser.GenericFileFormatContext = GenericFileFormatContext;

class StorageHandlerContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SqlBaseParser.RULE_storageHandler;
    }

	STRING() {
	    return this.getToken(SqlBaseParser.STRING, 0);
	};

	WITH() {
	    return this.getToken(SqlBaseParser.WITH, 0);
	};

	SERDEPROPERTIES() {
	    return this.getToken(SqlBaseParser.SERDEPROPERTIES, 0);
	};

	tablePropertyList() {
	    return this.getTypedRuleContext(TablePropertyListContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof SqlBaseVisitor ) {
	        return visitor.visitStorageHandler(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ResourceContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SqlBaseParser.RULE_resource;
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	STRING() {
	    return this.getToken(SqlBaseParser.STRING, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof SqlBaseVisitor ) {
	        return visitor.visitResource(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class DmlStatementNoWithContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SqlBaseParser.RULE_dmlStatementNoWith;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class DeleteFromTableContext extends DmlStatementNoWithContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	DELETE() {
	    return this.getToken(SqlBaseParser.DELETE, 0);
	};

	FROM() {
	    return this.getToken(SqlBaseParser.FROM, 0);
	};

	multipartIdentifier() {
	    return this.getTypedRuleContext(MultipartIdentifierContext,0);
	};

	tableAlias() {
	    return this.getTypedRuleContext(TableAliasContext,0);
	};

	whereClause() {
	    return this.getTypedRuleContext(WhereClauseContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof SqlBaseVisitor ) {
	        return visitor.visitDeleteFromTable(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

SqlBaseParser.DeleteFromTableContext = DeleteFromTableContext;

class SingleInsertQueryContext extends DmlStatementNoWithContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	insertInto() {
	    return this.getTypedRuleContext(InsertIntoContext,0);
	};

	queryTerm() {
	    return this.getTypedRuleContext(QueryTermContext,0);
	};

	queryOrganization() {
	    return this.getTypedRuleContext(QueryOrganizationContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof SqlBaseVisitor ) {
	        return visitor.visitSingleInsertQuery(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

SqlBaseParser.SingleInsertQueryContext = SingleInsertQueryContext;

class MultiInsertQueryContext extends DmlStatementNoWithContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	fromClause() {
	    return this.getTypedRuleContext(FromClauseContext,0);
	};

	multiInsertQueryBody = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(MultiInsertQueryBodyContext);
	    } else {
	        return this.getTypedRuleContext(MultiInsertQueryBodyContext,i);
	    }
	};

	accept(visitor) {
	    if ( visitor instanceof SqlBaseVisitor ) {
	        return visitor.visitMultiInsertQuery(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

SqlBaseParser.MultiInsertQueryContext = MultiInsertQueryContext;

class UpdateTableContext extends DmlStatementNoWithContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	UPDATE() {
	    return this.getToken(SqlBaseParser.UPDATE, 0);
	};

	multipartIdentifier() {
	    return this.getTypedRuleContext(MultipartIdentifierContext,0);
	};

	tableAlias() {
	    return this.getTypedRuleContext(TableAliasContext,0);
	};

	setClause() {
	    return this.getTypedRuleContext(SetClauseContext,0);
	};

	whereClause() {
	    return this.getTypedRuleContext(WhereClauseContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof SqlBaseVisitor ) {
	        return visitor.visitUpdateTable(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

SqlBaseParser.UpdateTableContext = UpdateTableContext;

class MergeIntoTableContext extends DmlStatementNoWithContext {

    constructor(parser, ctx) {
        super(parser);
        this.target = null; // MultipartIdentifierContext;
        this.targetAlias = null; // TableAliasContext;
        this.source = null; // MultipartIdentifierContext;
        this.sourceQuery = null; // QueryContext;
        this.sourceAlias = null; // TableAliasContext;
        this.mergeCondition = null; // BooleanExpressionContext;
        super.copyFrom(ctx);
    }

	MERGE() {
	    return this.getToken(SqlBaseParser.MERGE, 0);
	};

	INTO() {
	    return this.getToken(SqlBaseParser.INTO, 0);
	};

	USING() {
	    return this.getToken(SqlBaseParser.USING, 0);
	};

	ON() {
	    return this.getToken(SqlBaseParser.ON, 0);
	};

	multipartIdentifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(MultipartIdentifierContext);
	    } else {
	        return this.getTypedRuleContext(MultipartIdentifierContext,i);
	    }
	};

	tableAlias = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(TableAliasContext);
	    } else {
	        return this.getTypedRuleContext(TableAliasContext,i);
	    }
	};

	booleanExpression() {
	    return this.getTypedRuleContext(BooleanExpressionContext,0);
	};

	query() {
	    return this.getTypedRuleContext(QueryContext,0);
	};

	matchedClause = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(MatchedClauseContext);
	    } else {
	        return this.getTypedRuleContext(MatchedClauseContext,i);
	    }
	};

	notMatchedClause = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(NotMatchedClauseContext);
	    } else {
	        return this.getTypedRuleContext(NotMatchedClauseContext,i);
	    }
	};

	accept(visitor) {
	    if ( visitor instanceof SqlBaseVisitor ) {
	        return visitor.visitMergeIntoTable(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

SqlBaseParser.MergeIntoTableContext = MergeIntoTableContext;

class QueryOrganizationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SqlBaseParser.RULE_queryOrganization;
        this._sortItem = null; // SortItemContext
        this.order = []; // of SortItemContexts
        this._expression = null; // ExpressionContext
        this.clusterBy = []; // of ExpressionContexts
        this.distributeBy = []; // of ExpressionContexts
        this.sort = []; // of SortItemContexts
        this.limit = null; // ExpressionContext
    }

	ORDER() {
	    return this.getToken(SqlBaseParser.ORDER, 0);
	};

	BY = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SqlBaseParser.BY);
	    } else {
	        return this.getToken(SqlBaseParser.BY, i);
	    }
	};


	CLUSTER() {
	    return this.getToken(SqlBaseParser.CLUSTER, 0);
	};

	DISTRIBUTE() {
	    return this.getToken(SqlBaseParser.DISTRIBUTE, 0);
	};

	SORT() {
	    return this.getToken(SqlBaseParser.SORT, 0);
	};

	windowClause() {
	    return this.getTypedRuleContext(WindowClauseContext,0);
	};

	LIMIT() {
	    return this.getToken(SqlBaseParser.LIMIT, 0);
	};

	sortItem = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SortItemContext);
	    } else {
	        return this.getTypedRuleContext(SortItemContext,i);
	    }
	};

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	ALL() {
	    return this.getToken(SqlBaseParser.ALL, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof SqlBaseVisitor ) {
	        return visitor.visitQueryOrganization(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class MultiInsertQueryBodyContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SqlBaseParser.RULE_multiInsertQueryBody;
    }

	insertInto() {
	    return this.getTypedRuleContext(InsertIntoContext,0);
	};

	fromStatementBody() {
	    return this.getTypedRuleContext(FromStatementBodyContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof SqlBaseVisitor ) {
	        return visitor.visitMultiInsertQueryBody(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class QueryTermContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SqlBaseParser.RULE_queryTerm;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class QueryTermDefaultContext extends QueryTermContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	queryPrimary() {
	    return this.getTypedRuleContext(QueryPrimaryContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof SqlBaseVisitor ) {
	        return visitor.visitQueryTermDefault(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

SqlBaseParser.QueryTermDefaultContext = QueryTermDefaultContext;

class SetOperationContext extends QueryTermContext {

    constructor(parser, ctx) {
        super(parser);
        this.left = null; // QueryTermContext;
        this.operator = null; // Token;
        this.right = null; // QueryTermContext;
        super.copyFrom(ctx);
    }

	queryTerm = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(QueryTermContext);
	    } else {
	        return this.getTypedRuleContext(QueryTermContext,i);
	    }
	};

	INTERSECT() {
	    return this.getToken(SqlBaseParser.INTERSECT, 0);
	};

	UNION() {
	    return this.getToken(SqlBaseParser.UNION, 0);
	};

	EXCEPT() {
	    return this.getToken(SqlBaseParser.EXCEPT, 0);
	};

	SETMINUS() {
	    return this.getToken(SqlBaseParser.SETMINUS, 0);
	};

	setQuantifier() {
	    return this.getTypedRuleContext(SetQuantifierContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof SqlBaseVisitor ) {
	        return visitor.visitSetOperation(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

SqlBaseParser.SetOperationContext = SetOperationContext;

class QueryPrimaryContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SqlBaseParser.RULE_queryPrimary;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class SubqueryContext extends QueryPrimaryContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	query() {
	    return this.getTypedRuleContext(QueryContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof SqlBaseVisitor ) {
	        return visitor.visitSubquery(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

SqlBaseParser.SubqueryContext = SubqueryContext;

class QueryPrimaryDefaultContext extends QueryPrimaryContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	querySpecification() {
	    return this.getTypedRuleContext(QuerySpecificationContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof SqlBaseVisitor ) {
	        return visitor.visitQueryPrimaryDefault(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

SqlBaseParser.QueryPrimaryDefaultContext = QueryPrimaryDefaultContext;

class InlineTableDefault1Context extends QueryPrimaryContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	inlineTable() {
	    return this.getTypedRuleContext(InlineTableContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof SqlBaseVisitor ) {
	        return visitor.visitInlineTableDefault1(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

SqlBaseParser.InlineTableDefault1Context = InlineTableDefault1Context;

class FromStmtContext extends QueryPrimaryContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	fromStatement() {
	    return this.getTypedRuleContext(FromStatementContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof SqlBaseVisitor ) {
	        return visitor.visitFromStmt(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

SqlBaseParser.FromStmtContext = FromStmtContext;

class TableContext extends QueryPrimaryContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	TABLE() {
	    return this.getToken(SqlBaseParser.TABLE, 0);
	};

	multipartIdentifier() {
	    return this.getTypedRuleContext(MultipartIdentifierContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof SqlBaseVisitor ) {
	        return visitor.visitTable(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

SqlBaseParser.TableContext = TableContext;

class SortItemContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SqlBaseParser.RULE_sortItem;
        this.ordering = null; // Token
        this.nullOrder = null; // Token
    }

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	NULLS() {
	    return this.getToken(SqlBaseParser.NULLS, 0);
	};

	ASC() {
	    return this.getToken(SqlBaseParser.ASC, 0);
	};

	DESC() {
	    return this.getToken(SqlBaseParser.DESC, 0);
	};

	LAST() {
	    return this.getToken(SqlBaseParser.LAST, 0);
	};

	FIRST() {
	    return this.getToken(SqlBaseParser.FIRST, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof SqlBaseVisitor ) {
	        return visitor.visitSortItem(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class FromStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SqlBaseParser.RULE_fromStatement;
    }

	fromClause() {
	    return this.getTypedRuleContext(FromClauseContext,0);
	};

	fromStatementBody = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(FromStatementBodyContext);
	    } else {
	        return this.getTypedRuleContext(FromStatementBodyContext,i);
	    }
	};

	accept(visitor) {
	    if ( visitor instanceof SqlBaseVisitor ) {
	        return visitor.visitFromStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class FromStatementBodyContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SqlBaseParser.RULE_fromStatementBody;
    }

	transformClause() {
	    return this.getTypedRuleContext(TransformClauseContext,0);
	};

	queryOrganization() {
	    return this.getTypedRuleContext(QueryOrganizationContext,0);
	};

	whereClause() {
	    return this.getTypedRuleContext(WhereClauseContext,0);
	};

	selectClause() {
	    return this.getTypedRuleContext(SelectClauseContext,0);
	};

	lateralView = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(LateralViewContext);
	    } else {
	        return this.getTypedRuleContext(LateralViewContext,i);
	    }
	};

	aggregationClause() {
	    return this.getTypedRuleContext(AggregationClauseContext,0);
	};

	havingClause() {
	    return this.getTypedRuleContext(HavingClauseContext,0);
	};

	windowClause() {
	    return this.getTypedRuleContext(WindowClauseContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof SqlBaseVisitor ) {
	        return visitor.visitFromStatementBody(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class QuerySpecificationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SqlBaseParser.RULE_querySpecification;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class RegularQuerySpecificationContext extends QuerySpecificationContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	selectClause() {
	    return this.getTypedRuleContext(SelectClauseContext,0);
	};

	fromClause() {
	    return this.getTypedRuleContext(FromClauseContext,0);
	};

	lateralView = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(LateralViewContext);
	    } else {
	        return this.getTypedRuleContext(LateralViewContext,i);
	    }
	};

	whereClause() {
	    return this.getTypedRuleContext(WhereClauseContext,0);
	};

	aggregationClause() {
	    return this.getTypedRuleContext(AggregationClauseContext,0);
	};

	havingClause() {
	    return this.getTypedRuleContext(HavingClauseContext,0);
	};

	windowClause() {
	    return this.getTypedRuleContext(WindowClauseContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof SqlBaseVisitor ) {
	        return visitor.visitRegularQuerySpecification(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

SqlBaseParser.RegularQuerySpecificationContext = RegularQuerySpecificationContext;

class TransformQuerySpecificationContext extends QuerySpecificationContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	transformClause() {
	    return this.getTypedRuleContext(TransformClauseContext,0);
	};

	fromClause() {
	    return this.getTypedRuleContext(FromClauseContext,0);
	};

	whereClause() {
	    return this.getTypedRuleContext(WhereClauseContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof SqlBaseVisitor ) {
	        return visitor.visitTransformQuerySpecification(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

SqlBaseParser.TransformQuerySpecificationContext = TransformQuerySpecificationContext;

class TransformClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SqlBaseParser.RULE_transformClause;
        this.kind = null; // Token
        this.inRowFormat = null; // RowFormatContext
        this.recordWriter = null; // Token
        this.script = null; // Token
        this.outRowFormat = null; // RowFormatContext
        this.recordReader = null; // Token
    }

	USING() {
	    return this.getToken(SqlBaseParser.USING, 0);
	};

	STRING = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SqlBaseParser.STRING);
	    } else {
	        return this.getToken(SqlBaseParser.STRING, i);
	    }
	};


	SELECT() {
	    return this.getToken(SqlBaseParser.SELECT, 0);
	};

	namedExpressionSeq() {
	    return this.getTypedRuleContext(NamedExpressionSeqContext,0);
	};

	TRANSFORM() {
	    return this.getToken(SqlBaseParser.TRANSFORM, 0);
	};

	MAP() {
	    return this.getToken(SqlBaseParser.MAP, 0);
	};

	REDUCE() {
	    return this.getToken(SqlBaseParser.REDUCE, 0);
	};

	RECORDWRITER() {
	    return this.getToken(SqlBaseParser.RECORDWRITER, 0);
	};

	AS() {
	    return this.getToken(SqlBaseParser.AS, 0);
	};

	RECORDREADER() {
	    return this.getToken(SqlBaseParser.RECORDREADER, 0);
	};

	rowFormat = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(RowFormatContext);
	    } else {
	        return this.getTypedRuleContext(RowFormatContext,i);
	    }
	};

	identifierSeq() {
	    return this.getTypedRuleContext(IdentifierSeqContext,0);
	};

	colTypeList() {
	    return this.getTypedRuleContext(ColTypeListContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof SqlBaseVisitor ) {
	        return visitor.visitTransformClause(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class SelectClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SqlBaseParser.RULE_selectClause;
        this._hint = null; // HintContext
        this.hints = []; // of HintContexts
    }

	SELECT() {
	    return this.getToken(SqlBaseParser.SELECT, 0);
	};

	namedExpressionSeq() {
	    return this.getTypedRuleContext(NamedExpressionSeqContext,0);
	};

	setQuantifier() {
	    return this.getTypedRuleContext(SetQuantifierContext,0);
	};

	hint = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(HintContext);
	    } else {
	        return this.getTypedRuleContext(HintContext,i);
	    }
	};

	accept(visitor) {
	    if ( visitor instanceof SqlBaseVisitor ) {
	        return visitor.visitSelectClause(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class SetClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SqlBaseParser.RULE_setClause;
    }

	SET() {
	    return this.getToken(SqlBaseParser.SET, 0);
	};

	assignmentList() {
	    return this.getTypedRuleContext(AssignmentListContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof SqlBaseVisitor ) {
	        return visitor.visitSetClause(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class MatchedClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SqlBaseParser.RULE_matchedClause;
        this.matchedCond = null; // BooleanExpressionContext
    }

	WHEN() {
	    return this.getToken(SqlBaseParser.WHEN, 0);
	};

	MATCHED() {
	    return this.getToken(SqlBaseParser.MATCHED, 0);
	};

	THEN() {
	    return this.getToken(SqlBaseParser.THEN, 0);
	};

	matchedAction() {
	    return this.getTypedRuleContext(MatchedActionContext,0);
	};

	AND() {
	    return this.getToken(SqlBaseParser.AND, 0);
	};

	booleanExpression() {
	    return this.getTypedRuleContext(BooleanExpressionContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof SqlBaseVisitor ) {
	        return visitor.visitMatchedClause(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class NotMatchedClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SqlBaseParser.RULE_notMatchedClause;
        this.notMatchedCond = null; // BooleanExpressionContext
    }

	WHEN() {
	    return this.getToken(SqlBaseParser.WHEN, 0);
	};

	NOT() {
	    return this.getToken(SqlBaseParser.NOT, 0);
	};

	MATCHED() {
	    return this.getToken(SqlBaseParser.MATCHED, 0);
	};

	THEN() {
	    return this.getToken(SqlBaseParser.THEN, 0);
	};

	notMatchedAction() {
	    return this.getTypedRuleContext(NotMatchedActionContext,0);
	};

	AND() {
	    return this.getToken(SqlBaseParser.AND, 0);
	};

	booleanExpression() {
	    return this.getTypedRuleContext(BooleanExpressionContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof SqlBaseVisitor ) {
	        return visitor.visitNotMatchedClause(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class MatchedActionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SqlBaseParser.RULE_matchedAction;
    }

	DELETE() {
	    return this.getToken(SqlBaseParser.DELETE, 0);
	};

	UPDATE() {
	    return this.getToken(SqlBaseParser.UPDATE, 0);
	};

	SET() {
	    return this.getToken(SqlBaseParser.SET, 0);
	};

	ASTERISK() {
	    return this.getToken(SqlBaseParser.ASTERISK, 0);
	};

	assignmentList() {
	    return this.getTypedRuleContext(AssignmentListContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof SqlBaseVisitor ) {
	        return visitor.visitMatchedAction(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class NotMatchedActionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SqlBaseParser.RULE_notMatchedAction;
        this.columns = null; // MultipartIdentifierListContext
    }

	INSERT() {
	    return this.getToken(SqlBaseParser.INSERT, 0);
	};

	ASTERISK() {
	    return this.getToken(SqlBaseParser.ASTERISK, 0);
	};

	VALUES() {
	    return this.getToken(SqlBaseParser.VALUES, 0);
	};

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	multipartIdentifierList() {
	    return this.getTypedRuleContext(MultipartIdentifierListContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof SqlBaseVisitor ) {
	        return visitor.visitNotMatchedAction(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class AssignmentListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SqlBaseParser.RULE_assignmentList;
    }

	assignment = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(AssignmentContext);
	    } else {
	        return this.getTypedRuleContext(AssignmentContext,i);
	    }
	};

	accept(visitor) {
	    if ( visitor instanceof SqlBaseVisitor ) {
	        return visitor.visitAssignmentList(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class AssignmentContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SqlBaseParser.RULE_assignment;
        this.key = null; // MultipartIdentifierContext
        this.value = null; // ExpressionContext
    }

	EQ() {
	    return this.getToken(SqlBaseParser.EQ, 0);
	};

	multipartIdentifier() {
	    return this.getTypedRuleContext(MultipartIdentifierContext,0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof SqlBaseVisitor ) {
	        return visitor.visitAssignment(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class WhereClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SqlBaseParser.RULE_whereClause;
    }

	WHERE() {
	    return this.getToken(SqlBaseParser.WHERE, 0);
	};

	booleanExpression() {
	    return this.getTypedRuleContext(BooleanExpressionContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof SqlBaseVisitor ) {
	        return visitor.visitWhereClause(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class HavingClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SqlBaseParser.RULE_havingClause;
    }

	HAVING() {
	    return this.getToken(SqlBaseParser.HAVING, 0);
	};

	booleanExpression() {
	    return this.getTypedRuleContext(BooleanExpressionContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof SqlBaseVisitor ) {
	        return visitor.visitHavingClause(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class HintContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SqlBaseParser.RULE_hint;
        this._hintStatement = null; // HintStatementContext
        this.hintStatements = []; // of HintStatementContexts
    }

	hintStatement = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(HintStatementContext);
	    } else {
	        return this.getTypedRuleContext(HintStatementContext,i);
	    }
	};

	accept(visitor) {
	    if ( visitor instanceof SqlBaseVisitor ) {
	        return visitor.visitHint(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class HintStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SqlBaseParser.RULE_hintStatement;
        this.hintName = null; // IdentifierContext
        this._primaryExpression = null; // PrimaryExpressionContext
        this.parameters = []; // of PrimaryExpressionContexts
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	primaryExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(PrimaryExpressionContext);
	    } else {
	        return this.getTypedRuleContext(PrimaryExpressionContext,i);
	    }
	};

	accept(visitor) {
	    if ( visitor instanceof SqlBaseVisitor ) {
	        return visitor.visitHintStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class FromClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SqlBaseParser.RULE_fromClause;
    }

	FROM() {
	    return this.getToken(SqlBaseParser.FROM, 0);
	};

	relation = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(RelationContext);
	    } else {
	        return this.getTypedRuleContext(RelationContext,i);
	    }
	};

	lateralView = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(LateralViewContext);
	    } else {
	        return this.getTypedRuleContext(LateralViewContext,i);
	    }
	};

	pivotClause() {
	    return this.getTypedRuleContext(PivotClauseContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof SqlBaseVisitor ) {
	        return visitor.visitFromClause(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class AggregationClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SqlBaseParser.RULE_aggregationClause;
        this._groupByClause = null; // GroupByClauseContext
        this.groupingExpressionsWithGroupingAnalytics = []; // of GroupByClauseContexts
        this._expression = null; // ExpressionContext
        this.groupingExpressions = []; // of ExpressionContexts
        this.kind = null; // Token
    }

	GROUP() {
	    return this.getToken(SqlBaseParser.GROUP, 0);
	};

	BY() {
	    return this.getToken(SqlBaseParser.BY, 0);
	};

	groupByClause = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(GroupByClauseContext);
	    } else {
	        return this.getTypedRuleContext(GroupByClauseContext,i);
	    }
	};

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	WITH() {
	    return this.getToken(SqlBaseParser.WITH, 0);
	};

	SETS() {
	    return this.getToken(SqlBaseParser.SETS, 0);
	};

	groupingSet = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(GroupingSetContext);
	    } else {
	        return this.getTypedRuleContext(GroupingSetContext,i);
	    }
	};

	ROLLUP() {
	    return this.getToken(SqlBaseParser.ROLLUP, 0);
	};

	CUBE() {
	    return this.getToken(SqlBaseParser.CUBE, 0);
	};

	GROUPING() {
	    return this.getToken(SqlBaseParser.GROUPING, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof SqlBaseVisitor ) {
	        return visitor.visitAggregationClause(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class GroupByClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SqlBaseParser.RULE_groupByClause;
    }

	groupingAnalytics() {
	    return this.getTypedRuleContext(GroupingAnalyticsContext,0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof SqlBaseVisitor ) {
	        return visitor.visitGroupByClause(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class GroupingAnalyticsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SqlBaseParser.RULE_groupingAnalytics;
    }

	groupingSet = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(GroupingSetContext);
	    } else {
	        return this.getTypedRuleContext(GroupingSetContext,i);
	    }
	};

	ROLLUP() {
	    return this.getToken(SqlBaseParser.ROLLUP, 0);
	};

	CUBE() {
	    return this.getToken(SqlBaseParser.CUBE, 0);
	};

	GROUPING() {
	    return this.getToken(SqlBaseParser.GROUPING, 0);
	};

	SETS() {
	    return this.getToken(SqlBaseParser.SETS, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof SqlBaseVisitor ) {
	        return visitor.visitGroupingAnalytics(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class GroupingSetContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SqlBaseParser.RULE_groupingSet;
    }

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	accept(visitor) {
	    if ( visitor instanceof SqlBaseVisitor ) {
	        return visitor.visitGroupingSet(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class PivotClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SqlBaseParser.RULE_pivotClause;
        this.aggregates = null; // NamedExpressionSeqContext
        this._pivotValue = null; // PivotValueContext
        this.pivotValues = []; // of PivotValueContexts
    }

	PIVOT() {
	    return this.getToken(SqlBaseParser.PIVOT, 0);
	};

	FOR() {
	    return this.getToken(SqlBaseParser.FOR, 0);
	};

	pivotColumn() {
	    return this.getTypedRuleContext(PivotColumnContext,0);
	};

	IN() {
	    return this.getToken(SqlBaseParser.IN, 0);
	};

	namedExpressionSeq() {
	    return this.getTypedRuleContext(NamedExpressionSeqContext,0);
	};

	pivotValue = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(PivotValueContext);
	    } else {
	        return this.getTypedRuleContext(PivotValueContext,i);
	    }
	};

	accept(visitor) {
	    if ( visitor instanceof SqlBaseVisitor ) {
	        return visitor.visitPivotClause(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class PivotColumnContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SqlBaseParser.RULE_pivotColumn;
        this._identifier = null; // IdentifierContext
        this.identifiers = []; // of IdentifierContexts
    }

	identifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IdentifierContext);
	    } else {
	        return this.getTypedRuleContext(IdentifierContext,i);
	    }
	};

	accept(visitor) {
	    if ( visitor instanceof SqlBaseVisitor ) {
	        return visitor.visitPivotColumn(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class PivotValueContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SqlBaseParser.RULE_pivotValue;
    }

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	AS() {
	    return this.getToken(SqlBaseParser.AS, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof SqlBaseVisitor ) {
	        return visitor.visitPivotValue(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class LateralViewContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SqlBaseParser.RULE_lateralView;
        this.tblName = null; // IdentifierContext
        this._identifier = null; // IdentifierContext
        this.colName = []; // of IdentifierContexts
    }

	LATERAL() {
	    return this.getToken(SqlBaseParser.LATERAL, 0);
	};

	VIEW() {
	    return this.getToken(SqlBaseParser.VIEW, 0);
	};

	qualifiedName() {
	    return this.getTypedRuleContext(QualifiedNameContext,0);
	};

	identifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IdentifierContext);
	    } else {
	        return this.getTypedRuleContext(IdentifierContext,i);
	    }
	};

	OUTER() {
	    return this.getToken(SqlBaseParser.OUTER, 0);
	};

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	AS() {
	    return this.getToken(SqlBaseParser.AS, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof SqlBaseVisitor ) {
	        return visitor.visitLateralView(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class SetQuantifierContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SqlBaseParser.RULE_setQuantifier;
    }

	DISTINCT() {
	    return this.getToken(SqlBaseParser.DISTINCT, 0);
	};

	ALL() {
	    return this.getToken(SqlBaseParser.ALL, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof SqlBaseVisitor ) {
	        return visitor.visitSetQuantifier(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class RelationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SqlBaseParser.RULE_relation;
    }

	relationPrimary() {
	    return this.getTypedRuleContext(RelationPrimaryContext,0);
	};

	joinRelation = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(JoinRelationContext);
	    } else {
	        return this.getTypedRuleContext(JoinRelationContext,i);
	    }
	};

	accept(visitor) {
	    if ( visitor instanceof SqlBaseVisitor ) {
	        return visitor.visitRelation(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class JoinRelationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SqlBaseParser.RULE_joinRelation;
        this.right = null; // RelationPrimaryContext
    }

	JOIN() {
	    return this.getToken(SqlBaseParser.JOIN, 0);
	};

	relationPrimary() {
	    return this.getTypedRuleContext(RelationPrimaryContext,0);
	};

	joinType() {
	    return this.getTypedRuleContext(JoinTypeContext,0);
	};

	joinCriteria() {
	    return this.getTypedRuleContext(JoinCriteriaContext,0);
	};

	NATURAL() {
	    return this.getToken(SqlBaseParser.NATURAL, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof SqlBaseVisitor ) {
	        return visitor.visitJoinRelation(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class JoinTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SqlBaseParser.RULE_joinType;
    }

	INNER() {
	    return this.getToken(SqlBaseParser.INNER, 0);
	};

	CROSS() {
	    return this.getToken(SqlBaseParser.CROSS, 0);
	};

	LEFT() {
	    return this.getToken(SqlBaseParser.LEFT, 0);
	};

	OUTER() {
	    return this.getToken(SqlBaseParser.OUTER, 0);
	};

	SEMI() {
	    return this.getToken(SqlBaseParser.SEMI, 0);
	};

	RIGHT() {
	    return this.getToken(SqlBaseParser.RIGHT, 0);
	};

	FULL() {
	    return this.getToken(SqlBaseParser.FULL, 0);
	};

	ANTI() {
	    return this.getToken(SqlBaseParser.ANTI, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof SqlBaseVisitor ) {
	        return visitor.visitJoinType(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class JoinCriteriaContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SqlBaseParser.RULE_joinCriteria;
    }

	ON() {
	    return this.getToken(SqlBaseParser.ON, 0);
	};

	booleanExpression() {
	    return this.getTypedRuleContext(BooleanExpressionContext,0);
	};

	USING() {
	    return this.getToken(SqlBaseParser.USING, 0);
	};

	identifierList() {
	    return this.getTypedRuleContext(IdentifierListContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof SqlBaseVisitor ) {
	        return visitor.visitJoinCriteria(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class SampleContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SqlBaseParser.RULE_sample;
    }

	TABLESAMPLE() {
	    return this.getToken(SqlBaseParser.TABLESAMPLE, 0);
	};

	sampleMethod() {
	    return this.getTypedRuleContext(SampleMethodContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof SqlBaseVisitor ) {
	        return visitor.visitSample(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class SampleMethodContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SqlBaseParser.RULE_sampleMethod;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class SampleByRowsContext extends SampleMethodContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	ROWS() {
	    return this.getToken(SqlBaseParser.ROWS, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof SqlBaseVisitor ) {
	        return visitor.visitSampleByRows(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

SqlBaseParser.SampleByRowsContext = SampleByRowsContext;

class SampleByPercentileContext extends SampleMethodContext {

    constructor(parser, ctx) {
        super(parser);
        this.negativeSign = null; // Token;
        this.percentage = null; // Token;
        super.copyFrom(ctx);
    }

	PERCENTLIT() {
	    return this.getToken(SqlBaseParser.PERCENTLIT, 0);
	};

	INTEGER_VALUE() {
	    return this.getToken(SqlBaseParser.INTEGER_VALUE, 0);
	};

	DECIMAL_VALUE() {
	    return this.getToken(SqlBaseParser.DECIMAL_VALUE, 0);
	};

	MINUS() {
	    return this.getToken(SqlBaseParser.MINUS, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof SqlBaseVisitor ) {
	        return visitor.visitSampleByPercentile(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

SqlBaseParser.SampleByPercentileContext = SampleByPercentileContext;

class SampleByBucketContext extends SampleMethodContext {

    constructor(parser, ctx) {
        super(parser);
        this.sampleType = null; // Token;
        this.numerator = null; // Token;
        this.denominator = null; // Token;
        super.copyFrom(ctx);
    }

	OUT() {
	    return this.getToken(SqlBaseParser.OUT, 0);
	};

	OF() {
	    return this.getToken(SqlBaseParser.OF, 0);
	};

	BUCKET() {
	    return this.getToken(SqlBaseParser.BUCKET, 0);
	};

	INTEGER_VALUE = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SqlBaseParser.INTEGER_VALUE);
	    } else {
	        return this.getToken(SqlBaseParser.INTEGER_VALUE, i);
	    }
	};


	ON() {
	    return this.getToken(SqlBaseParser.ON, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	qualifiedName() {
	    return this.getTypedRuleContext(QualifiedNameContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof SqlBaseVisitor ) {
	        return visitor.visitSampleByBucket(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

SqlBaseParser.SampleByBucketContext = SampleByBucketContext;

class SampleByBytesContext extends SampleMethodContext {

    constructor(parser, ctx) {
        super(parser);
        this.bytes = null; // ExpressionContext;
        super.copyFrom(ctx);
    }

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof SqlBaseVisitor ) {
	        return visitor.visitSampleByBytes(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

SqlBaseParser.SampleByBytesContext = SampleByBytesContext;

class IdentifierListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SqlBaseParser.RULE_identifierList;
    }

	identifierSeq() {
	    return this.getTypedRuleContext(IdentifierSeqContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof SqlBaseVisitor ) {
	        return visitor.visitIdentifierList(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class IdentifierSeqContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SqlBaseParser.RULE_identifierSeq;
        this._errorCapturingIdentifier = null; // ErrorCapturingIdentifierContext
        this.ident = []; // of ErrorCapturingIdentifierContexts
    }

	errorCapturingIdentifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ErrorCapturingIdentifierContext);
	    } else {
	        return this.getTypedRuleContext(ErrorCapturingIdentifierContext,i);
	    }
	};

	accept(visitor) {
	    if ( visitor instanceof SqlBaseVisitor ) {
	        return visitor.visitIdentifierSeq(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class OrderedIdentifierListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SqlBaseParser.RULE_orderedIdentifierList;
    }

	orderedIdentifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(OrderedIdentifierContext);
	    } else {
	        return this.getTypedRuleContext(OrderedIdentifierContext,i);
	    }
	};

	accept(visitor) {
	    if ( visitor instanceof SqlBaseVisitor ) {
	        return visitor.visitOrderedIdentifierList(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class OrderedIdentifierContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SqlBaseParser.RULE_orderedIdentifier;
        this.ident = null; // ErrorCapturingIdentifierContext
        this.ordering = null; // Token
    }

	errorCapturingIdentifier() {
	    return this.getTypedRuleContext(ErrorCapturingIdentifierContext,0);
	};

	ASC() {
	    return this.getToken(SqlBaseParser.ASC, 0);
	};

	DESC() {
	    return this.getToken(SqlBaseParser.DESC, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof SqlBaseVisitor ) {
	        return visitor.visitOrderedIdentifier(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class IdentifierCommentListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SqlBaseParser.RULE_identifierCommentList;
    }

	identifierComment = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IdentifierCommentContext);
	    } else {
	        return this.getTypedRuleContext(IdentifierCommentContext,i);
	    }
	};

	accept(visitor) {
	    if ( visitor instanceof SqlBaseVisitor ) {
	        return visitor.visitIdentifierCommentList(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class IdentifierCommentContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SqlBaseParser.RULE_identifierComment;
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	commentSpec() {
	    return this.getTypedRuleContext(CommentSpecContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof SqlBaseVisitor ) {
	        return visitor.visitIdentifierComment(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class RelationPrimaryContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SqlBaseParser.RULE_relationPrimary;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class TableValuedFunctionContext extends RelationPrimaryContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	functionTable() {
	    return this.getTypedRuleContext(FunctionTableContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof SqlBaseVisitor ) {
	        return visitor.visitTableValuedFunction(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

SqlBaseParser.TableValuedFunctionContext = TableValuedFunctionContext;

class InlineTableDefault2Context extends RelationPrimaryContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	inlineTable() {
	    return this.getTypedRuleContext(InlineTableContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof SqlBaseVisitor ) {
	        return visitor.visitInlineTableDefault2(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

SqlBaseParser.InlineTableDefault2Context = InlineTableDefault2Context;

class AliasedRelationContext extends RelationPrimaryContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	relation() {
	    return this.getTypedRuleContext(RelationContext,0);
	};

	tableAlias() {
	    return this.getTypedRuleContext(TableAliasContext,0);
	};

	sample() {
	    return this.getTypedRuleContext(SampleContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof SqlBaseVisitor ) {
	        return visitor.visitAliasedRelation(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

SqlBaseParser.AliasedRelationContext = AliasedRelationContext;

class AliasedQueryContext extends RelationPrimaryContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	query() {
	    return this.getTypedRuleContext(QueryContext,0);
	};

	tableAlias() {
	    return this.getTypedRuleContext(TableAliasContext,0);
	};

	sample() {
	    return this.getTypedRuleContext(SampleContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof SqlBaseVisitor ) {
	        return visitor.visitAliasedQuery(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

SqlBaseParser.AliasedQueryContext = AliasedQueryContext;

class TableNameContext extends RelationPrimaryContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	multipartIdentifier() {
	    return this.getTypedRuleContext(MultipartIdentifierContext,0);
	};

	tableAlias() {
	    return this.getTypedRuleContext(TableAliasContext,0);
	};

	sample() {
	    return this.getTypedRuleContext(SampleContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof SqlBaseVisitor ) {
	        return visitor.visitTableName(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

SqlBaseParser.TableNameContext = TableNameContext;

class InlineTableContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SqlBaseParser.RULE_inlineTable;
    }

	VALUES() {
	    return this.getToken(SqlBaseParser.VALUES, 0);
	};

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	tableAlias() {
	    return this.getTypedRuleContext(TableAliasContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof SqlBaseVisitor ) {
	        return visitor.visitInlineTable(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class FunctionTableContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SqlBaseParser.RULE_functionTable;
        this.funcName = null; // FunctionNameContext
    }

	tableAlias() {
	    return this.getTypedRuleContext(TableAliasContext,0);
	};

	functionName() {
	    return this.getTypedRuleContext(FunctionNameContext,0);
	};

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	accept(visitor) {
	    if ( visitor instanceof SqlBaseVisitor ) {
	        return visitor.visitFunctionTable(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class TableAliasContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SqlBaseParser.RULE_tableAlias;
    }

	strictIdentifier() {
	    return this.getTypedRuleContext(StrictIdentifierContext,0);
	};

	AS() {
	    return this.getToken(SqlBaseParser.AS, 0);
	};

	identifierList() {
	    return this.getTypedRuleContext(IdentifierListContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof SqlBaseVisitor ) {
	        return visitor.visitTableAlias(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class RowFormatContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SqlBaseParser.RULE_rowFormat;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class RowFormatSerdeContext extends RowFormatContext {

    constructor(parser, ctx) {
        super(parser);
        this.name = null; // Token;
        this.props = null; // TablePropertyListContext;
        super.copyFrom(ctx);
    }

	ROW() {
	    return this.getToken(SqlBaseParser.ROW, 0);
	};

	FORMAT() {
	    return this.getToken(SqlBaseParser.FORMAT, 0);
	};

	SERDE() {
	    return this.getToken(SqlBaseParser.SERDE, 0);
	};

	STRING() {
	    return this.getToken(SqlBaseParser.STRING, 0);
	};

	WITH() {
	    return this.getToken(SqlBaseParser.WITH, 0);
	};

	SERDEPROPERTIES() {
	    return this.getToken(SqlBaseParser.SERDEPROPERTIES, 0);
	};

	tablePropertyList() {
	    return this.getTypedRuleContext(TablePropertyListContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof SqlBaseVisitor ) {
	        return visitor.visitRowFormatSerde(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

SqlBaseParser.RowFormatSerdeContext = RowFormatSerdeContext;

class RowFormatDelimitedContext extends RowFormatContext {

    constructor(parser, ctx) {
        super(parser);
        this.fieldsTerminatedBy = null; // Token;
        this.escapedBy = null; // Token;
        this.collectionItemsTerminatedBy = null; // Token;
        this.keysTerminatedBy = null; // Token;
        this.linesSeparatedBy = null; // Token;
        this.nullDefinedAs = null; // Token;
        super.copyFrom(ctx);
    }

	ROW() {
	    return this.getToken(SqlBaseParser.ROW, 0);
	};

	FORMAT() {
	    return this.getToken(SqlBaseParser.FORMAT, 0);
	};

	DELIMITED() {
	    return this.getToken(SqlBaseParser.DELIMITED, 0);
	};

	FIELDS() {
	    return this.getToken(SqlBaseParser.FIELDS, 0);
	};

	TERMINATED = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SqlBaseParser.TERMINATED);
	    } else {
	        return this.getToken(SqlBaseParser.TERMINATED, i);
	    }
	};


	BY = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SqlBaseParser.BY);
	    } else {
	        return this.getToken(SqlBaseParser.BY, i);
	    }
	};


	COLLECTION() {
	    return this.getToken(SqlBaseParser.COLLECTION, 0);
	};

	ITEMS() {
	    return this.getToken(SqlBaseParser.ITEMS, 0);
	};

	MAP() {
	    return this.getToken(SqlBaseParser.MAP, 0);
	};

	KEYS() {
	    return this.getToken(SqlBaseParser.KEYS, 0);
	};

	LINES() {
	    return this.getToken(SqlBaseParser.LINES, 0);
	};

	NULL() {
	    return this.getToken(SqlBaseParser.NULL, 0);
	};

	DEFINED() {
	    return this.getToken(SqlBaseParser.DEFINED, 0);
	};

	AS() {
	    return this.getToken(SqlBaseParser.AS, 0);
	};

	STRING = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SqlBaseParser.STRING);
	    } else {
	        return this.getToken(SqlBaseParser.STRING, i);
	    }
	};


	ESCAPED() {
	    return this.getToken(SqlBaseParser.ESCAPED, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof SqlBaseVisitor ) {
	        return visitor.visitRowFormatDelimited(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

SqlBaseParser.RowFormatDelimitedContext = RowFormatDelimitedContext;

class MultipartIdentifierListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SqlBaseParser.RULE_multipartIdentifierList;
    }

	multipartIdentifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(MultipartIdentifierContext);
	    } else {
	        return this.getTypedRuleContext(MultipartIdentifierContext,i);
	    }
	};

	accept(visitor) {
	    if ( visitor instanceof SqlBaseVisitor ) {
	        return visitor.visitMultipartIdentifierList(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class MultipartIdentifierContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SqlBaseParser.RULE_multipartIdentifier;
        this._errorCapturingIdentifier = null; // ErrorCapturingIdentifierContext
        this.parts = []; // of ErrorCapturingIdentifierContexts
    }

	errorCapturingIdentifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ErrorCapturingIdentifierContext);
	    } else {
	        return this.getTypedRuleContext(ErrorCapturingIdentifierContext,i);
	    }
	};

	accept(visitor) {
	    if ( visitor instanceof SqlBaseVisitor ) {
	        return visitor.visitMultipartIdentifier(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class TableIdentifierContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SqlBaseParser.RULE_tableIdentifier;
        this.db = null; // ErrorCapturingIdentifierContext
        this.table = null; // ErrorCapturingIdentifierContext
    }

	errorCapturingIdentifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ErrorCapturingIdentifierContext);
	    } else {
	        return this.getTypedRuleContext(ErrorCapturingIdentifierContext,i);
	    }
	};

	accept(visitor) {
	    if ( visitor instanceof SqlBaseVisitor ) {
	        return visitor.visitTableIdentifier(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class FunctionIdentifierContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SqlBaseParser.RULE_functionIdentifier;
        this.db = null; // ErrorCapturingIdentifierContext
        this.func = null; // ErrorCapturingIdentifierContext
    }

	errorCapturingIdentifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ErrorCapturingIdentifierContext);
	    } else {
	        return this.getTypedRuleContext(ErrorCapturingIdentifierContext,i);
	    }
	};

	accept(visitor) {
	    if ( visitor instanceof SqlBaseVisitor ) {
	        return visitor.visitFunctionIdentifier(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class NamedExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SqlBaseParser.RULE_namedExpression;
        this.name = null; // ErrorCapturingIdentifierContext
    }

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	identifierList() {
	    return this.getTypedRuleContext(IdentifierListContext,0);
	};

	AS() {
	    return this.getToken(SqlBaseParser.AS, 0);
	};

	errorCapturingIdentifier() {
	    return this.getTypedRuleContext(ErrorCapturingIdentifierContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof SqlBaseVisitor ) {
	        return visitor.visitNamedExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class NamedExpressionSeqContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SqlBaseParser.RULE_namedExpressionSeq;
    }

	namedExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(NamedExpressionContext);
	    } else {
	        return this.getTypedRuleContext(NamedExpressionContext,i);
	    }
	};

	accept(visitor) {
	    if ( visitor instanceof SqlBaseVisitor ) {
	        return visitor.visitNamedExpressionSeq(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class PartitionFieldListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SqlBaseParser.RULE_partitionFieldList;
        this._partitionField = null; // PartitionFieldContext
        this.fields = []; // of PartitionFieldContexts
    }

	partitionField = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(PartitionFieldContext);
	    } else {
	        return this.getTypedRuleContext(PartitionFieldContext,i);
	    }
	};

	accept(visitor) {
	    if ( visitor instanceof SqlBaseVisitor ) {
	        return visitor.visitPartitionFieldList(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class PartitionFieldContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SqlBaseParser.RULE_partitionField;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class PartitionColumnContext extends PartitionFieldContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	colType() {
	    return this.getTypedRuleContext(ColTypeContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof SqlBaseVisitor ) {
	        return visitor.visitPartitionColumn(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

SqlBaseParser.PartitionColumnContext = PartitionColumnContext;

class PartitionTransformContext extends PartitionFieldContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	transform() {
	    return this.getTypedRuleContext(TransformContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof SqlBaseVisitor ) {
	        return visitor.visitPartitionTransform(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

SqlBaseParser.PartitionTransformContext = PartitionTransformContext;

class TransformContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SqlBaseParser.RULE_transform;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class IdentityTransformContext extends TransformContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	qualifiedName() {
	    return this.getTypedRuleContext(QualifiedNameContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof SqlBaseVisitor ) {
	        return visitor.visitIdentityTransform(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

SqlBaseParser.IdentityTransformContext = IdentityTransformContext;

class ApplyTransformContext extends TransformContext {

    constructor(parser, ctx) {
        super(parser);
        this.transformName = null; // IdentifierContext;
        this._transformArgument = null; // TransformArgumentContext;
        this.argument = []; // of TransformArgumentContexts;
        super.copyFrom(ctx);
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	transformArgument = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(TransformArgumentContext);
	    } else {
	        return this.getTypedRuleContext(TransformArgumentContext,i);
	    }
	};

	accept(visitor) {
	    if ( visitor instanceof SqlBaseVisitor ) {
	        return visitor.visitApplyTransform(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

SqlBaseParser.ApplyTransformContext = ApplyTransformContext;

class TransformArgumentContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SqlBaseParser.RULE_transformArgument;
    }

	qualifiedName() {
	    return this.getTypedRuleContext(QualifiedNameContext,0);
	};

	constant() {
	    return this.getTypedRuleContext(ConstantContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof SqlBaseVisitor ) {
	        return visitor.visitTransformArgument(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SqlBaseParser.RULE_expression;
    }

	booleanExpression() {
	    return this.getTypedRuleContext(BooleanExpressionContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof SqlBaseVisitor ) {
	        return visitor.visitExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class BooleanExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SqlBaseParser.RULE_booleanExpression;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class LogicalNotContext extends BooleanExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	NOT() {
	    return this.getToken(SqlBaseParser.NOT, 0);
	};

	booleanExpression() {
	    return this.getTypedRuleContext(BooleanExpressionContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof SqlBaseVisitor ) {
	        return visitor.visitLogicalNot(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

SqlBaseParser.LogicalNotContext = LogicalNotContext;

class PredicatedContext extends BooleanExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	valueExpression() {
	    return this.getTypedRuleContext(ValueExpressionContext,0);
	};

	predicate() {
	    return this.getTypedRuleContext(PredicateContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof SqlBaseVisitor ) {
	        return visitor.visitPredicated(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

SqlBaseParser.PredicatedContext = PredicatedContext;

class ExistsContext extends BooleanExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	EXISTS() {
	    return this.getToken(SqlBaseParser.EXISTS, 0);
	};

	query() {
	    return this.getTypedRuleContext(QueryContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof SqlBaseVisitor ) {
	        return visitor.visitExists(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

SqlBaseParser.ExistsContext = ExistsContext;

class LogicalBinaryContext extends BooleanExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        this.left = null; // BooleanExpressionContext;
        this.operator = null; // Token;
        this.right = null; // BooleanExpressionContext;
        super.copyFrom(ctx);
    }

	booleanExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(BooleanExpressionContext);
	    } else {
	        return this.getTypedRuleContext(BooleanExpressionContext,i);
	    }
	};

	AND() {
	    return this.getToken(SqlBaseParser.AND, 0);
	};

	OR() {
	    return this.getToken(SqlBaseParser.OR, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof SqlBaseVisitor ) {
	        return visitor.visitLogicalBinary(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

SqlBaseParser.LogicalBinaryContext = LogicalBinaryContext;

class PredicateContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SqlBaseParser.RULE_predicate;
        this.kind = null; // Token
        this.lower = null; // ValueExpressionContext
        this.upper = null; // ValueExpressionContext
        this.pattern = null; // ValueExpressionContext
        this.quantifier = null; // Token
        this.escapeChar = null; // Token
        this.right = null; // ValueExpressionContext
    }

	AND() {
	    return this.getToken(SqlBaseParser.AND, 0);
	};

	BETWEEN() {
	    return this.getToken(SqlBaseParser.BETWEEN, 0);
	};

	valueExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ValueExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ValueExpressionContext,i);
	    }
	};

	NOT() {
	    return this.getToken(SqlBaseParser.NOT, 0);
	};

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	IN() {
	    return this.getToken(SqlBaseParser.IN, 0);
	};

	query() {
	    return this.getTypedRuleContext(QueryContext,0);
	};

	RLIKE() {
	    return this.getToken(SqlBaseParser.RLIKE, 0);
	};

	LIKE() {
	    return this.getToken(SqlBaseParser.LIKE, 0);
	};

	ANY() {
	    return this.getToken(SqlBaseParser.ANY, 0);
	};

	SOME() {
	    return this.getToken(SqlBaseParser.SOME, 0);
	};

	ALL() {
	    return this.getToken(SqlBaseParser.ALL, 0);
	};

	ESCAPE() {
	    return this.getToken(SqlBaseParser.ESCAPE, 0);
	};

	STRING() {
	    return this.getToken(SqlBaseParser.STRING, 0);
	};

	IS() {
	    return this.getToken(SqlBaseParser.IS, 0);
	};

	NULL() {
	    return this.getToken(SqlBaseParser.NULL, 0);
	};

	TRUE() {
	    return this.getToken(SqlBaseParser.TRUE, 0);
	};

	FALSE() {
	    return this.getToken(SqlBaseParser.FALSE, 0);
	};

	UNKNOWN() {
	    return this.getToken(SqlBaseParser.UNKNOWN, 0);
	};

	FROM() {
	    return this.getToken(SqlBaseParser.FROM, 0);
	};

	DISTINCT() {
	    return this.getToken(SqlBaseParser.DISTINCT, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof SqlBaseVisitor ) {
	        return visitor.visitPredicate(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ValueExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SqlBaseParser.RULE_valueExpression;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class ValueExpressionDefaultContext extends ValueExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	primaryExpression() {
	    return this.getTypedRuleContext(PrimaryExpressionContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof SqlBaseVisitor ) {
	        return visitor.visitValueExpressionDefault(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

SqlBaseParser.ValueExpressionDefaultContext = ValueExpressionDefaultContext;

class ComparisonContext extends ValueExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        this.left = null; // ValueExpressionContext;
        this.right = null; // ValueExpressionContext;
        super.copyFrom(ctx);
    }

	comparisonOperator() {
	    return this.getTypedRuleContext(ComparisonOperatorContext,0);
	};

	valueExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ValueExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ValueExpressionContext,i);
	    }
	};

	accept(visitor) {
	    if ( visitor instanceof SqlBaseVisitor ) {
	        return visitor.visitComparison(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

SqlBaseParser.ComparisonContext = ComparisonContext;

class ArithmeticBinaryContext extends ValueExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        this.left = null; // ValueExpressionContext;
        this.operator = null; // Token;
        this.right = null; // ValueExpressionContext;
        super.copyFrom(ctx);
    }

	valueExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ValueExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ValueExpressionContext,i);
	    }
	};

	ASTERISK() {
	    return this.getToken(SqlBaseParser.ASTERISK, 0);
	};

	SLASH() {
	    return this.getToken(SqlBaseParser.SLASH, 0);
	};

	PERCENT() {
	    return this.getToken(SqlBaseParser.PERCENT, 0);
	};

	DIV() {
	    return this.getToken(SqlBaseParser.DIV, 0);
	};

	PLUS() {
	    return this.getToken(SqlBaseParser.PLUS, 0);
	};

	MINUS() {
	    return this.getToken(SqlBaseParser.MINUS, 0);
	};

	CONCAT_PIPE() {
	    return this.getToken(SqlBaseParser.CONCAT_PIPE, 0);
	};

	AMPERSAND() {
	    return this.getToken(SqlBaseParser.AMPERSAND, 0);
	};

	HAT() {
	    return this.getToken(SqlBaseParser.HAT, 0);
	};

	PIPE() {
	    return this.getToken(SqlBaseParser.PIPE, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof SqlBaseVisitor ) {
	        return visitor.visitArithmeticBinary(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

SqlBaseParser.ArithmeticBinaryContext = ArithmeticBinaryContext;

class ArithmeticUnaryContext extends ValueExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        this.operator = null; // Token;
        super.copyFrom(ctx);
    }

	valueExpression() {
	    return this.getTypedRuleContext(ValueExpressionContext,0);
	};

	MINUS() {
	    return this.getToken(SqlBaseParser.MINUS, 0);
	};

	PLUS() {
	    return this.getToken(SqlBaseParser.PLUS, 0);
	};

	TILDE() {
	    return this.getToken(SqlBaseParser.TILDE, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof SqlBaseVisitor ) {
	        return visitor.visitArithmeticUnary(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

SqlBaseParser.ArithmeticUnaryContext = ArithmeticUnaryContext;

class PrimaryExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SqlBaseParser.RULE_primaryExpression;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class StructContext extends PrimaryExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        this._namedExpression = null; // NamedExpressionContext;
        this.argument = []; // of NamedExpressionContexts;
        super.copyFrom(ctx);
    }

	STRUCT() {
	    return this.getToken(SqlBaseParser.STRUCT, 0);
	};

	namedExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(NamedExpressionContext);
	    } else {
	        return this.getTypedRuleContext(NamedExpressionContext,i);
	    }
	};

	accept(visitor) {
	    if ( visitor instanceof SqlBaseVisitor ) {
	        return visitor.visitStruct(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

SqlBaseParser.StructContext = StructContext;

class DereferenceContext extends PrimaryExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        this.base = null; // PrimaryExpressionContext;
        this.fieldName = null; // IdentifierContext;
        super.copyFrom(ctx);
    }

	primaryExpression() {
	    return this.getTypedRuleContext(PrimaryExpressionContext,0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof SqlBaseVisitor ) {
	        return visitor.visitDereference(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

SqlBaseParser.DereferenceContext = DereferenceContext;

class SimpleCaseContext extends PrimaryExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        this.value = null; // ExpressionContext;
        this.elseExpression = null; // ExpressionContext;
        super.copyFrom(ctx);
    }

	CASE() {
	    return this.getToken(SqlBaseParser.CASE, 0);
	};

	END() {
	    return this.getToken(SqlBaseParser.END, 0);
	};

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	whenClause = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(WhenClauseContext);
	    } else {
	        return this.getTypedRuleContext(WhenClauseContext,i);
	    }
	};

	ELSE() {
	    return this.getToken(SqlBaseParser.ELSE, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof SqlBaseVisitor ) {
	        return visitor.visitSimpleCase(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

SqlBaseParser.SimpleCaseContext = SimpleCaseContext;

class ColumnReferenceContext extends PrimaryExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof SqlBaseVisitor ) {
	        return visitor.visitColumnReference(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

SqlBaseParser.ColumnReferenceContext = ColumnReferenceContext;

class RowConstructorContext extends PrimaryExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	namedExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(NamedExpressionContext);
	    } else {
	        return this.getTypedRuleContext(NamedExpressionContext,i);
	    }
	};

	accept(visitor) {
	    if ( visitor instanceof SqlBaseVisitor ) {
	        return visitor.visitRowConstructor(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

SqlBaseParser.RowConstructorContext = RowConstructorContext;

class LastContext extends PrimaryExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	LAST() {
	    return this.getToken(SqlBaseParser.LAST, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	IGNORE() {
	    return this.getToken(SqlBaseParser.IGNORE, 0);
	};

	NULLS() {
	    return this.getToken(SqlBaseParser.NULLS, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof SqlBaseVisitor ) {
	        return visitor.visitLast(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

SqlBaseParser.LastContext = LastContext;

class StarContext extends PrimaryExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	ASTERISK() {
	    return this.getToken(SqlBaseParser.ASTERISK, 0);
	};

	qualifiedName() {
	    return this.getTypedRuleContext(QualifiedNameContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof SqlBaseVisitor ) {
	        return visitor.visitStar(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

SqlBaseParser.StarContext = StarContext;

class OverlayContext extends PrimaryExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        this.input = null; // ValueExpressionContext;
        this.replace = null; // ValueExpressionContext;
        this.position = null; // ValueExpressionContext;
        this.length = null; // ValueExpressionContext;
        super.copyFrom(ctx);
    }

	OVERLAY() {
	    return this.getToken(SqlBaseParser.OVERLAY, 0);
	};

	PLACING() {
	    return this.getToken(SqlBaseParser.PLACING, 0);
	};

	FROM() {
	    return this.getToken(SqlBaseParser.FROM, 0);
	};

	valueExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ValueExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ValueExpressionContext,i);
	    }
	};

	FOR() {
	    return this.getToken(SqlBaseParser.FOR, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof SqlBaseVisitor ) {
	        return visitor.visitOverlay(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

SqlBaseParser.OverlayContext = OverlayContext;

class SubscriptContext extends PrimaryExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        this.value = null; // PrimaryExpressionContext;
        this.index = null; // ValueExpressionContext;
        super.copyFrom(ctx);
    }

	primaryExpression() {
	    return this.getTypedRuleContext(PrimaryExpressionContext,0);
	};

	valueExpression() {
	    return this.getTypedRuleContext(ValueExpressionContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof SqlBaseVisitor ) {
	        return visitor.visitSubscript(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

SqlBaseParser.SubscriptContext = SubscriptContext;

class SubqueryExpressionContext extends PrimaryExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	query() {
	    return this.getTypedRuleContext(QueryContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof SqlBaseVisitor ) {
	        return visitor.visitSubqueryExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

SqlBaseParser.SubqueryExpressionContext = SubqueryExpressionContext;

class SubstringContext extends PrimaryExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        this.str = null; // ValueExpressionContext;
        this.pos = null; // ValueExpressionContext;
        this.len = null; // ValueExpressionContext;
        super.copyFrom(ctx);
    }

	SUBSTR() {
	    return this.getToken(SqlBaseParser.SUBSTR, 0);
	};

	SUBSTRING() {
	    return this.getToken(SqlBaseParser.SUBSTRING, 0);
	};

	valueExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ValueExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ValueExpressionContext,i);
	    }
	};

	FROM() {
	    return this.getToken(SqlBaseParser.FROM, 0);
	};

	FOR() {
	    return this.getToken(SqlBaseParser.FOR, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof SqlBaseVisitor ) {
	        return visitor.visitSubstring(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

SqlBaseParser.SubstringContext = SubstringContext;

class CurrentDatetimeContext extends PrimaryExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        this.name = null; // Token;
        super.copyFrom(ctx);
    }

	CURRENT_DATE() {
	    return this.getToken(SqlBaseParser.CURRENT_DATE, 0);
	};

	CURRENT_TIMESTAMP() {
	    return this.getToken(SqlBaseParser.CURRENT_TIMESTAMP, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof SqlBaseVisitor ) {
	        return visitor.visitCurrentDatetime(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

SqlBaseParser.CurrentDatetimeContext = CurrentDatetimeContext;

class CastContext extends PrimaryExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        this.name = null; // Token;
        super.copyFrom(ctx);
    }

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	AS() {
	    return this.getToken(SqlBaseParser.AS, 0);
	};

	dataType() {
	    return this.getTypedRuleContext(DataTypeContext,0);
	};

	CAST() {
	    return this.getToken(SqlBaseParser.CAST, 0);
	};

	TRY_CAST() {
	    return this.getToken(SqlBaseParser.TRY_CAST, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof SqlBaseVisitor ) {
	        return visitor.visitCast(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

SqlBaseParser.CastContext = CastContext;

class ConstantDefaultContext extends PrimaryExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	constant() {
	    return this.getTypedRuleContext(ConstantContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof SqlBaseVisitor ) {
	        return visitor.visitConstantDefault(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

SqlBaseParser.ConstantDefaultContext = ConstantDefaultContext;

class LambdaContext extends PrimaryExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	identifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IdentifierContext);
	    } else {
	        return this.getTypedRuleContext(IdentifierContext,i);
	    }
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof SqlBaseVisitor ) {
	        return visitor.visitLambda(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

SqlBaseParser.LambdaContext = LambdaContext;

class ParenthesizedExpressionContext extends PrimaryExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof SqlBaseVisitor ) {
	        return visitor.visitParenthesizedExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

SqlBaseParser.ParenthesizedExpressionContext = ParenthesizedExpressionContext;

class ExtractContext extends PrimaryExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        this.field = null; // IdentifierContext;
        this.source = null; // ValueExpressionContext;
        super.copyFrom(ctx);
    }

	EXTRACT() {
	    return this.getToken(SqlBaseParser.EXTRACT, 0);
	};

	FROM() {
	    return this.getToken(SqlBaseParser.FROM, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	valueExpression() {
	    return this.getTypedRuleContext(ValueExpressionContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof SqlBaseVisitor ) {
	        return visitor.visitExtract(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

SqlBaseParser.ExtractContext = ExtractContext;

class TrimContext extends PrimaryExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        this.trimOption = null; // Token;
        this.trimStr = null; // ValueExpressionContext;
        this.srcStr = null; // ValueExpressionContext;
        super.copyFrom(ctx);
    }

	TRIM() {
	    return this.getToken(SqlBaseParser.TRIM, 0);
	};

	FROM() {
	    return this.getToken(SqlBaseParser.FROM, 0);
	};

	valueExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ValueExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ValueExpressionContext,i);
	    }
	};

	BOTH() {
	    return this.getToken(SqlBaseParser.BOTH, 0);
	};

	LEADING() {
	    return this.getToken(SqlBaseParser.LEADING, 0);
	};

	TRAILING() {
	    return this.getToken(SqlBaseParser.TRAILING, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof SqlBaseVisitor ) {
	        return visitor.visitTrim(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

SqlBaseParser.TrimContext = TrimContext;

class FunctionCallContext extends PrimaryExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        this._expression = null; // ExpressionContext;
        this.argument = []; // of ExpressionContexts;
        this.where = null; // BooleanExpressionContext;
        this.nullsOption = null; // Token;
        super.copyFrom(ctx);
    }

	functionName() {
	    return this.getTypedRuleContext(FunctionNameContext,0);
	};

	FILTER() {
	    return this.getToken(SqlBaseParser.FILTER, 0);
	};

	WHERE() {
	    return this.getToken(SqlBaseParser.WHERE, 0);
	};

	NULLS() {
	    return this.getToken(SqlBaseParser.NULLS, 0);
	};

	OVER() {
	    return this.getToken(SqlBaseParser.OVER, 0);
	};

	windowSpec() {
	    return this.getTypedRuleContext(WindowSpecContext,0);
	};

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	booleanExpression() {
	    return this.getTypedRuleContext(BooleanExpressionContext,0);
	};

	IGNORE() {
	    return this.getToken(SqlBaseParser.IGNORE, 0);
	};

	RESPECT() {
	    return this.getToken(SqlBaseParser.RESPECT, 0);
	};

	setQuantifier() {
	    return this.getTypedRuleContext(SetQuantifierContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof SqlBaseVisitor ) {
	        return visitor.visitFunctionCall(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

SqlBaseParser.FunctionCallContext = FunctionCallContext;

class SearchedCaseContext extends PrimaryExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        this.elseExpression = null; // ExpressionContext;
        super.copyFrom(ctx);
    }

	CASE() {
	    return this.getToken(SqlBaseParser.CASE, 0);
	};

	END() {
	    return this.getToken(SqlBaseParser.END, 0);
	};

	whenClause = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(WhenClauseContext);
	    } else {
	        return this.getTypedRuleContext(WhenClauseContext,i);
	    }
	};

	ELSE() {
	    return this.getToken(SqlBaseParser.ELSE, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof SqlBaseVisitor ) {
	        return visitor.visitSearchedCase(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

SqlBaseParser.SearchedCaseContext = SearchedCaseContext;

class PositionContext extends PrimaryExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        this.substr = null; // ValueExpressionContext;
        this.str = null; // ValueExpressionContext;
        super.copyFrom(ctx);
    }

	POSITION() {
	    return this.getToken(SqlBaseParser.POSITION, 0);
	};

	IN() {
	    return this.getToken(SqlBaseParser.IN, 0);
	};

	valueExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ValueExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ValueExpressionContext,i);
	    }
	};

	accept(visitor) {
	    if ( visitor instanceof SqlBaseVisitor ) {
	        return visitor.visitPosition(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

SqlBaseParser.PositionContext = PositionContext;

class FirstContext extends PrimaryExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	FIRST() {
	    return this.getToken(SqlBaseParser.FIRST, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	IGNORE() {
	    return this.getToken(SqlBaseParser.IGNORE, 0);
	};

	NULLS() {
	    return this.getToken(SqlBaseParser.NULLS, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof SqlBaseVisitor ) {
	        return visitor.visitFirst(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

SqlBaseParser.FirstContext = FirstContext;

class ConstantContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SqlBaseParser.RULE_constant;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class NullLiteralContext extends ConstantContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	NULL() {
	    return this.getToken(SqlBaseParser.NULL, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof SqlBaseVisitor ) {
	        return visitor.visitNullLiteral(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

SqlBaseParser.NullLiteralContext = NullLiteralContext;

class StringLiteralContext extends ConstantContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	STRING = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SqlBaseParser.STRING);
	    } else {
	        return this.getToken(SqlBaseParser.STRING, i);
	    }
	};


	accept(visitor) {
	    if ( visitor instanceof SqlBaseVisitor ) {
	        return visitor.visitStringLiteral(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

SqlBaseParser.StringLiteralContext = StringLiteralContext;

class TypeConstructorContext extends ConstantContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	STRING() {
	    return this.getToken(SqlBaseParser.STRING, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof SqlBaseVisitor ) {
	        return visitor.visitTypeConstructor(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

SqlBaseParser.TypeConstructorContext = TypeConstructorContext;

class IntervalLiteralContext extends ConstantContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	interval() {
	    return this.getTypedRuleContext(IntervalContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof SqlBaseVisitor ) {
	        return visitor.visitIntervalLiteral(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

SqlBaseParser.IntervalLiteralContext = IntervalLiteralContext;

class NumericLiteralContext extends ConstantContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	number() {
	    return this.getTypedRuleContext(NumberContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof SqlBaseVisitor ) {
	        return visitor.visitNumericLiteral(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

SqlBaseParser.NumericLiteralContext = NumericLiteralContext;

class BooleanLiteralContext extends ConstantContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	booleanValue() {
	    return this.getTypedRuleContext(BooleanValueContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof SqlBaseVisitor ) {
	        return visitor.visitBooleanLiteral(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

SqlBaseParser.BooleanLiteralContext = BooleanLiteralContext;

class ComparisonOperatorContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SqlBaseParser.RULE_comparisonOperator;
    }

	EQ() {
	    return this.getToken(SqlBaseParser.EQ, 0);
	};

	NEQ() {
	    return this.getToken(SqlBaseParser.NEQ, 0);
	};

	NEQJ() {
	    return this.getToken(SqlBaseParser.NEQJ, 0);
	};

	LT() {
	    return this.getToken(SqlBaseParser.LT, 0);
	};

	LTE() {
	    return this.getToken(SqlBaseParser.LTE, 0);
	};

	GT() {
	    return this.getToken(SqlBaseParser.GT, 0);
	};

	GTE() {
	    return this.getToken(SqlBaseParser.GTE, 0);
	};

	NSEQ() {
	    return this.getToken(SqlBaseParser.NSEQ, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof SqlBaseVisitor ) {
	        return visitor.visitComparisonOperator(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ArithmeticOperatorContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SqlBaseParser.RULE_arithmeticOperator;
    }

	PLUS() {
	    return this.getToken(SqlBaseParser.PLUS, 0);
	};

	MINUS() {
	    return this.getToken(SqlBaseParser.MINUS, 0);
	};

	ASTERISK() {
	    return this.getToken(SqlBaseParser.ASTERISK, 0);
	};

	SLASH() {
	    return this.getToken(SqlBaseParser.SLASH, 0);
	};

	PERCENT() {
	    return this.getToken(SqlBaseParser.PERCENT, 0);
	};

	DIV() {
	    return this.getToken(SqlBaseParser.DIV, 0);
	};

	TILDE() {
	    return this.getToken(SqlBaseParser.TILDE, 0);
	};

	AMPERSAND() {
	    return this.getToken(SqlBaseParser.AMPERSAND, 0);
	};

	PIPE() {
	    return this.getToken(SqlBaseParser.PIPE, 0);
	};

	CONCAT_PIPE() {
	    return this.getToken(SqlBaseParser.CONCAT_PIPE, 0);
	};

	HAT() {
	    return this.getToken(SqlBaseParser.HAT, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof SqlBaseVisitor ) {
	        return visitor.visitArithmeticOperator(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class PredicateOperatorContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SqlBaseParser.RULE_predicateOperator;
    }

	OR() {
	    return this.getToken(SqlBaseParser.OR, 0);
	};

	AND() {
	    return this.getToken(SqlBaseParser.AND, 0);
	};

	IN() {
	    return this.getToken(SqlBaseParser.IN, 0);
	};

	NOT() {
	    return this.getToken(SqlBaseParser.NOT, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof SqlBaseVisitor ) {
	        return visitor.visitPredicateOperator(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class BooleanValueContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SqlBaseParser.RULE_booleanValue;
    }

	TRUE() {
	    return this.getToken(SqlBaseParser.TRUE, 0);
	};

	FALSE() {
	    return this.getToken(SqlBaseParser.FALSE, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof SqlBaseVisitor ) {
	        return visitor.visitBooleanValue(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class IntervalContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SqlBaseParser.RULE_interval;
    }

	INTERVAL() {
	    return this.getToken(SqlBaseParser.INTERVAL, 0);
	};

	errorCapturingMultiUnitsInterval() {
	    return this.getTypedRuleContext(ErrorCapturingMultiUnitsIntervalContext,0);
	};

	errorCapturingUnitToUnitInterval() {
	    return this.getTypedRuleContext(ErrorCapturingUnitToUnitIntervalContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof SqlBaseVisitor ) {
	        return visitor.visitInterval(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ErrorCapturingMultiUnitsIntervalContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SqlBaseParser.RULE_errorCapturingMultiUnitsInterval;
    }

	multiUnitsInterval() {
	    return this.getTypedRuleContext(MultiUnitsIntervalContext,0);
	};

	unitToUnitInterval() {
	    return this.getTypedRuleContext(UnitToUnitIntervalContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof SqlBaseVisitor ) {
	        return visitor.visitErrorCapturingMultiUnitsInterval(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class MultiUnitsIntervalContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SqlBaseParser.RULE_multiUnitsInterval;
        this._identifier = null; // IdentifierContext
        this.unit = []; // of IdentifierContexts
    }

	intervalValue = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IntervalValueContext);
	    } else {
	        return this.getTypedRuleContext(IntervalValueContext,i);
	    }
	};

	identifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IdentifierContext);
	    } else {
	        return this.getTypedRuleContext(IdentifierContext,i);
	    }
	};

	accept(visitor) {
	    if ( visitor instanceof SqlBaseVisitor ) {
	        return visitor.visitMultiUnitsInterval(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ErrorCapturingUnitToUnitIntervalContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SqlBaseParser.RULE_errorCapturingUnitToUnitInterval;
        this.body = null; // UnitToUnitIntervalContext
        this.error1 = null; // MultiUnitsIntervalContext
        this.error2 = null; // UnitToUnitIntervalContext
    }

	unitToUnitInterval = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(UnitToUnitIntervalContext);
	    } else {
	        return this.getTypedRuleContext(UnitToUnitIntervalContext,i);
	    }
	};

	multiUnitsInterval() {
	    return this.getTypedRuleContext(MultiUnitsIntervalContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof SqlBaseVisitor ) {
	        return visitor.visitErrorCapturingUnitToUnitInterval(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class UnitToUnitIntervalContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SqlBaseParser.RULE_unitToUnitInterval;
        this.value = null; // IntervalValueContext
        this.from = null; // IdentifierContext
        this.to = null; // IdentifierContext
    }

	TO() {
	    return this.getToken(SqlBaseParser.TO, 0);
	};

	intervalValue() {
	    return this.getTypedRuleContext(IntervalValueContext,0);
	};

	identifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IdentifierContext);
	    } else {
	        return this.getTypedRuleContext(IdentifierContext,i);
	    }
	};

	accept(visitor) {
	    if ( visitor instanceof SqlBaseVisitor ) {
	        return visitor.visitUnitToUnitInterval(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class IntervalValueContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SqlBaseParser.RULE_intervalValue;
    }

	INTEGER_VALUE() {
	    return this.getToken(SqlBaseParser.INTEGER_VALUE, 0);
	};

	DECIMAL_VALUE() {
	    return this.getToken(SqlBaseParser.DECIMAL_VALUE, 0);
	};

	PLUS() {
	    return this.getToken(SqlBaseParser.PLUS, 0);
	};

	MINUS() {
	    return this.getToken(SqlBaseParser.MINUS, 0);
	};

	STRING() {
	    return this.getToken(SqlBaseParser.STRING, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof SqlBaseVisitor ) {
	        return visitor.visitIntervalValue(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ColPositionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SqlBaseParser.RULE_colPosition;
        this.position = null; // Token
        this.afterCol = null; // ErrorCapturingIdentifierContext
    }

	FIRST() {
	    return this.getToken(SqlBaseParser.FIRST, 0);
	};

	AFTER() {
	    return this.getToken(SqlBaseParser.AFTER, 0);
	};

	errorCapturingIdentifier() {
	    return this.getTypedRuleContext(ErrorCapturingIdentifierContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof SqlBaseVisitor ) {
	        return visitor.visitColPosition(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class DataTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SqlBaseParser.RULE_dataType;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class MapDataTypeContext extends DataTypeContext {

    constructor(parser, ctx) {
        super(parser);
        this.complex = null; // Token;
        this.key = null; // DataTypeContext;
        this.val = null; // DataTypeContext;
        super.copyFrom(ctx);
    }

	LT() {
	    return this.getToken(SqlBaseParser.LT, 0);
	};

	GT() {
	    return this.getToken(SqlBaseParser.GT, 0);
	};

	MAP() {
	    return this.getToken(SqlBaseParser.MAP, 0);
	};

	dataType = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(DataTypeContext);
	    } else {
	        return this.getTypedRuleContext(DataTypeContext,i);
	    }
	};

	accept(visitor) {
	    if ( visitor instanceof SqlBaseVisitor ) {
	        return visitor.visitMapDataType(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

SqlBaseParser.MapDataTypeContext = MapDataTypeContext;

class StructDataTypeContext extends DataTypeContext {

    constructor(parser, ctx) {
        super(parser);
        this.complex = null; // Token;
        super.copyFrom(ctx);
    }

	STRUCT() {
	    return this.getToken(SqlBaseParser.STRUCT, 0);
	};

	LT() {
	    return this.getToken(SqlBaseParser.LT, 0);
	};

	GT() {
	    return this.getToken(SqlBaseParser.GT, 0);
	};

	NEQ() {
	    return this.getToken(SqlBaseParser.NEQ, 0);
	};

	complexColTypeList() {
	    return this.getTypedRuleContext(ComplexColTypeListContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof SqlBaseVisitor ) {
	        return visitor.visitStructDataType(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

SqlBaseParser.StructDataTypeContext = StructDataTypeContext;

class ArrayDataTypeContext extends DataTypeContext {

    constructor(parser, ctx) {
        super(parser);
        this.complex = null; // Token;
        super.copyFrom(ctx);
    }

	LT() {
	    return this.getToken(SqlBaseParser.LT, 0);
	};

	dataType() {
	    return this.getTypedRuleContext(DataTypeContext,0);
	};

	GT() {
	    return this.getToken(SqlBaseParser.GT, 0);
	};

	ARRAY() {
	    return this.getToken(SqlBaseParser.ARRAY, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof SqlBaseVisitor ) {
	        return visitor.visitArrayDataType(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

SqlBaseParser.ArrayDataTypeContext = ArrayDataTypeContext;

class PrimitiveDataTypeContext extends DataTypeContext {

    constructor(parser, ctx) {
        super(parser);
        this.precision = null; // Token;
        this.scale = null; // Token;
        super.copyFrom(ctx);
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	INTEGER_VALUE = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SqlBaseParser.INTEGER_VALUE);
	    } else {
	        return this.getToken(SqlBaseParser.INTEGER_VALUE, i);
	    }
	};


	accept(visitor) {
	    if ( visitor instanceof SqlBaseVisitor ) {
	        return visitor.visitPrimitiveDataType(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

SqlBaseParser.PrimitiveDataTypeContext = PrimitiveDataTypeContext;

class QualifiedColTypeWithPositionListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SqlBaseParser.RULE_qualifiedColTypeWithPositionList;
    }

	qualifiedColTypeWithPosition = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(QualifiedColTypeWithPositionContext);
	    } else {
	        return this.getTypedRuleContext(QualifiedColTypeWithPositionContext,i);
	    }
	};

	accept(visitor) {
	    if ( visitor instanceof SqlBaseVisitor ) {
	        return visitor.visitQualifiedColTypeWithPositionList(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class QualifiedColTypeWithPositionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SqlBaseParser.RULE_qualifiedColTypeWithPosition;
        this.name = null; // MultipartIdentifierContext
    }

	dataType() {
	    return this.getTypedRuleContext(DataTypeContext,0);
	};

	multipartIdentifier() {
	    return this.getTypedRuleContext(MultipartIdentifierContext,0);
	};

	columnConstraint() {
	    return this.getTypedRuleContext(ColumnConstraintContext,0);
	};

	commentSpec() {
	    return this.getTypedRuleContext(CommentSpecContext,0);
	};

	colPosition() {
	    return this.getTypedRuleContext(ColPositionContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof SqlBaseVisitor ) {
	        return visitor.visitQualifiedColTypeWithPosition(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ColTypeListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SqlBaseParser.RULE_colTypeList;
    }

	colType = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ColTypeContext);
	    } else {
	        return this.getTypedRuleContext(ColTypeContext,i);
	    }
	};

	accept(visitor) {
	    if ( visitor instanceof SqlBaseVisitor ) {
	        return visitor.visitColTypeList(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ColTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SqlBaseParser.RULE_colType;
        this.colName = null; // ErrorCapturingIdentifierContext
    }

	dataType() {
	    return this.getTypedRuleContext(DataTypeContext,0);
	};

	errorCapturingIdentifier() {
	    return this.getTypedRuleContext(ErrorCapturingIdentifierContext,0);
	};

	columnConstraint() {
	    return this.getTypedRuleContext(ColumnConstraintContext,0);
	};

	commentSpec() {
	    return this.getTypedRuleContext(CommentSpecContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof SqlBaseVisitor ) {
	        return visitor.visitColType(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class TableConstraintContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SqlBaseParser.RULE_tableConstraint;
    }

	primaryKeyConstraint() {
	    return this.getTypedRuleContext(PrimaryKeyConstraintContext,0);
	};

	foreignKeyConstraint() {
	    return this.getTypedRuleContext(ForeignKeyConstraintContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof SqlBaseVisitor ) {
	        return visitor.visitTableConstraint(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class PrimaryKeyConstraintContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SqlBaseParser.RULE_primaryKeyConstraint;
    }

	PRIMARY() {
	    return this.getToken(SqlBaseParser.PRIMARY, 0);
	};

	KEY() {
	    return this.getToken(SqlBaseParser.KEY, 0);
	};

	keyNameList() {
	    return this.getTypedRuleContext(KeyNameListContext,0);
	};

	tableConstraintName() {
	    return this.getTypedRuleContext(TableConstraintNameContext,0);
	};

	constraintOptions = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ConstraintOptionsContext);
	    } else {
	        return this.getTypedRuleContext(ConstraintOptionsContext,i);
	    }
	};

	accept(visitor) {
	    if ( visitor instanceof SqlBaseVisitor ) {
	        return visitor.visitPrimaryKeyConstraint(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ForeignKeyConstraintContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SqlBaseParser.RULE_foreignKeyConstraint;
    }

	FOREIGN() {
	    return this.getToken(SqlBaseParser.FOREIGN, 0);
	};

	KEY() {
	    return this.getToken(SqlBaseParser.KEY, 0);
	};

	keyNameList = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(KeyNameListContext);
	    } else {
	        return this.getTypedRuleContext(KeyNameListContext,i);
	    }
	};

	REFERENCES() {
	    return this.getToken(SqlBaseParser.REFERENCES, 0);
	};

	multipartIdentifier() {
	    return this.getTypedRuleContext(MultipartIdentifierContext,0);
	};

	tableConstraintName() {
	    return this.getTypedRuleContext(TableConstraintNameContext,0);
	};

	foreignKeyOptions = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ForeignKeyOptionsContext);
	    } else {
	        return this.getTypedRuleContext(ForeignKeyOptionsContext,i);
	    }
	};

	accept(visitor) {
	    if ( visitor instanceof SqlBaseVisitor ) {
	        return visitor.visitForeignKeyConstraint(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class TableConstraintNameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SqlBaseParser.RULE_tableConstraintName;
    }

	CONSTRAINT() {
	    return this.getToken(SqlBaseParser.CONSTRAINT, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof SqlBaseVisitor ) {
	        return visitor.visitTableConstraintName(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class KeyNameListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SqlBaseParser.RULE_keyNameList;
    }

	identifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IdentifierContext);
	    } else {
	        return this.getTypedRuleContext(IdentifierContext,i);
	    }
	};

	accept(visitor) {
	    if ( visitor instanceof SqlBaseVisitor ) {
	        return visitor.visitKeyNameList(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ForeignKeyOptionsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SqlBaseParser.RULE_foreignKeyOptions;
    }

	foreignKeyConstraintOptions() {
	    return this.getTypedRuleContext(ForeignKeyConstraintOptionsContext,0);
	};

	constraintOptions() {
	    return this.getTypedRuleContext(ConstraintOptionsContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof SqlBaseVisitor ) {
	        return visitor.visitForeignKeyOptions(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ForeignKeyConstraintOptionsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SqlBaseParser.RULE_foreignKeyConstraintOptions;
    }

	MATCH() {
	    return this.getToken(SqlBaseParser.MATCH, 0);
	};

	FULL() {
	    return this.getToken(SqlBaseParser.FULL, 0);
	};

	ON() {
	    return this.getToken(SqlBaseParser.ON, 0);
	};

	UPDATE() {
	    return this.getToken(SqlBaseParser.UPDATE, 0);
	};

	NO() {
	    return this.getToken(SqlBaseParser.NO, 0);
	};

	ACTION() {
	    return this.getToken(SqlBaseParser.ACTION, 0);
	};

	DELETE() {
	    return this.getToken(SqlBaseParser.DELETE, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof SqlBaseVisitor ) {
	        return visitor.visitForeignKeyConstraintOptions(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ConstraintOptionsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SqlBaseParser.RULE_constraintOptions;
    }

	NOT() {
	    return this.getToken(SqlBaseParser.NOT, 0);
	};

	ENFORCED() {
	    return this.getToken(SqlBaseParser.ENFORCED, 0);
	};

	DEFERRABLE() {
	    return this.getToken(SqlBaseParser.DEFERRABLE, 0);
	};

	INITIALLY() {
	    return this.getToken(SqlBaseParser.INITIALLY, 0);
	};

	DEFERRED() {
	    return this.getToken(SqlBaseParser.DEFERRED, 0);
	};

	NORELY() {
	    return this.getToken(SqlBaseParser.NORELY, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof SqlBaseVisitor ) {
	        return visitor.visitConstraintOptions(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ColumnConstraintContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SqlBaseParser.RULE_columnConstraint;
    }

	columnConstraintType = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ColumnConstraintTypeContext);
	    } else {
	        return this.getTypedRuleContext(ColumnConstraintTypeContext,i);
	    }
	};

	accept(visitor) {
	    if ( visitor instanceof SqlBaseVisitor ) {
	        return visitor.visitColumnConstraint(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ColumnConstraintTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SqlBaseParser.RULE_columnConstraintType;
    }

	NOT() {
	    return this.getToken(SqlBaseParser.NOT, 0);
	};

	NULL() {
	    return this.getToken(SqlBaseParser.NULL, 0);
	};

	PRIMARY() {
	    return this.getToken(SqlBaseParser.PRIMARY, 0);
	};

	KEY() {
	    return this.getToken(SqlBaseParser.KEY, 0);
	};

	columnGeneratedAs() {
	    return this.getTypedRuleContext(ColumnGeneratedAsContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof SqlBaseVisitor ) {
	        return visitor.visitColumnConstraintType(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ColumnGeneratedAsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SqlBaseParser.RULE_columnGeneratedAs;
    }

	KW_GENERATED() {
	    return this.getToken(SqlBaseParser.KW_GENERATED, 0);
	};

	generatedAsExpression() {
	    return this.getTypedRuleContext(GeneratedAsExpressionContext,0);
	};

	generatedAsIdentity() {
	    return this.getTypedRuleContext(GeneratedAsIdentityContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof SqlBaseVisitor ) {
	        return visitor.visitColumnGeneratedAs(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class GeneratedAsExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SqlBaseParser.RULE_generatedAsExpression;
    }

	KW_ALWAYS() {
	    return this.getToken(SqlBaseParser.KW_ALWAYS, 0);
	};

	AS() {
	    return this.getToken(SqlBaseParser.AS, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof SqlBaseVisitor ) {
	        return visitor.visitGeneratedAsExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class GeneratedAsIdentityContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SqlBaseParser.RULE_generatedAsIdentity;
    }

	AS() {
	    return this.getToken(SqlBaseParser.AS, 0);
	};

	KW_IDENTITY() {
	    return this.getToken(SqlBaseParser.KW_IDENTITY, 0);
	};

	KW_ALWAYS() {
	    return this.getToken(SqlBaseParser.KW_ALWAYS, 0);
	};

	BY = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SqlBaseParser.BY);
	    } else {
	        return this.getToken(SqlBaseParser.BY, i);
	    }
	};


	KW_DEFAULT() {
	    return this.getToken(SqlBaseParser.KW_DEFAULT, 0);
	};

	START() {
	    return this.getToken(SqlBaseParser.START, 0);
	};

	WITH() {
	    return this.getToken(SqlBaseParser.WITH, 0);
	};

	number = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(NumberContext);
	    } else {
	        return this.getTypedRuleContext(NumberContext,i);
	    }
	};

	KW_INCREMENT() {
	    return this.getToken(SqlBaseParser.KW_INCREMENT, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof SqlBaseVisitor ) {
	        return visitor.visitGeneratedAsIdentity(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ComplexColTypeListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SqlBaseParser.RULE_complexColTypeList;
    }

	complexColType = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ComplexColTypeContext);
	    } else {
	        return this.getTypedRuleContext(ComplexColTypeContext,i);
	    }
	};

	accept(visitor) {
	    if ( visitor instanceof SqlBaseVisitor ) {
	        return visitor.visitComplexColTypeList(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ComplexColTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SqlBaseParser.RULE_complexColType;
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	dataType() {
	    return this.getTypedRuleContext(DataTypeContext,0);
	};

	NOT() {
	    return this.getToken(SqlBaseParser.NOT, 0);
	};

	NULL() {
	    return this.getToken(SqlBaseParser.NULL, 0);
	};

	commentSpec() {
	    return this.getTypedRuleContext(CommentSpecContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof SqlBaseVisitor ) {
	        return visitor.visitComplexColType(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class WhenClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SqlBaseParser.RULE_whenClause;
        this.condition = null; // ExpressionContext
        this.result = null; // ExpressionContext
    }

	WHEN() {
	    return this.getToken(SqlBaseParser.WHEN, 0);
	};

	THEN() {
	    return this.getToken(SqlBaseParser.THEN, 0);
	};

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	accept(visitor) {
	    if ( visitor instanceof SqlBaseVisitor ) {
	        return visitor.visitWhenClause(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class WindowClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SqlBaseParser.RULE_windowClause;
    }

	WINDOW() {
	    return this.getToken(SqlBaseParser.WINDOW, 0);
	};

	namedWindow = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(NamedWindowContext);
	    } else {
	        return this.getTypedRuleContext(NamedWindowContext,i);
	    }
	};

	accept(visitor) {
	    if ( visitor instanceof SqlBaseVisitor ) {
	        return visitor.visitWindowClause(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class NamedWindowContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SqlBaseParser.RULE_namedWindow;
        this.name = null; // ErrorCapturingIdentifierContext
    }

	AS() {
	    return this.getToken(SqlBaseParser.AS, 0);
	};

	windowSpec() {
	    return this.getTypedRuleContext(WindowSpecContext,0);
	};

	errorCapturingIdentifier() {
	    return this.getTypedRuleContext(ErrorCapturingIdentifierContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof SqlBaseVisitor ) {
	        return visitor.visitNamedWindow(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class WindowSpecContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SqlBaseParser.RULE_windowSpec;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class WindowRefContext extends WindowSpecContext {

    constructor(parser, ctx) {
        super(parser);
        this.name = null; // ErrorCapturingIdentifierContext;
        super.copyFrom(ctx);
    }

	errorCapturingIdentifier() {
	    return this.getTypedRuleContext(ErrorCapturingIdentifierContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof SqlBaseVisitor ) {
	        return visitor.visitWindowRef(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

SqlBaseParser.WindowRefContext = WindowRefContext;

class WindowDefContext extends WindowSpecContext {

    constructor(parser, ctx) {
        super(parser);
        this._expression = null; // ExpressionContext;
        this.partition = []; // of ExpressionContexts;
        super.copyFrom(ctx);
    }

	CLUSTER() {
	    return this.getToken(SqlBaseParser.CLUSTER, 0);
	};

	BY = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SqlBaseParser.BY);
	    } else {
	        return this.getToken(SqlBaseParser.BY, i);
	    }
	};


	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	windowFrame() {
	    return this.getTypedRuleContext(WindowFrameContext,0);
	};

	sortItem = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SortItemContext);
	    } else {
	        return this.getTypedRuleContext(SortItemContext,i);
	    }
	};

	PARTITION() {
	    return this.getToken(SqlBaseParser.PARTITION, 0);
	};

	DISTRIBUTE() {
	    return this.getToken(SqlBaseParser.DISTRIBUTE, 0);
	};

	ORDER() {
	    return this.getToken(SqlBaseParser.ORDER, 0);
	};

	SORT() {
	    return this.getToken(SqlBaseParser.SORT, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof SqlBaseVisitor ) {
	        return visitor.visitWindowDef(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

SqlBaseParser.WindowDefContext = WindowDefContext;

class WindowFrameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SqlBaseParser.RULE_windowFrame;
        this.frameType = null; // Token
        this.start = null; // FrameBoundContext
        this.end = null; // FrameBoundContext
    }

	RANGE() {
	    return this.getToken(SqlBaseParser.RANGE, 0);
	};

	frameBound = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(FrameBoundContext);
	    } else {
	        return this.getTypedRuleContext(FrameBoundContext,i);
	    }
	};

	ROWS() {
	    return this.getToken(SqlBaseParser.ROWS, 0);
	};

	BETWEEN() {
	    return this.getToken(SqlBaseParser.BETWEEN, 0);
	};

	AND() {
	    return this.getToken(SqlBaseParser.AND, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof SqlBaseVisitor ) {
	        return visitor.visitWindowFrame(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class FrameBoundContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SqlBaseParser.RULE_frameBound;
        this.boundType = null; // Token
    }

	UNBOUNDED() {
	    return this.getToken(SqlBaseParser.UNBOUNDED, 0);
	};

	PRECEDING() {
	    return this.getToken(SqlBaseParser.PRECEDING, 0);
	};

	FOLLOWING() {
	    return this.getToken(SqlBaseParser.FOLLOWING, 0);
	};

	ROW() {
	    return this.getToken(SqlBaseParser.ROW, 0);
	};

	CURRENT() {
	    return this.getToken(SqlBaseParser.CURRENT, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof SqlBaseVisitor ) {
	        return visitor.visitFrameBound(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class QualifiedNameListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SqlBaseParser.RULE_qualifiedNameList;
    }

	qualifiedName = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(QualifiedNameContext);
	    } else {
	        return this.getTypedRuleContext(QualifiedNameContext,i);
	    }
	};

	accept(visitor) {
	    if ( visitor instanceof SqlBaseVisitor ) {
	        return visitor.visitQualifiedNameList(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class FunctionNameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SqlBaseParser.RULE_functionName;
    }

	qualifiedName() {
	    return this.getTypedRuleContext(QualifiedNameContext,0);
	};

	FILTER() {
	    return this.getToken(SqlBaseParser.FILTER, 0);
	};

	LEFT() {
	    return this.getToken(SqlBaseParser.LEFT, 0);
	};

	RIGHT() {
	    return this.getToken(SqlBaseParser.RIGHT, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof SqlBaseVisitor ) {
	        return visitor.visitFunctionName(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class QualifiedNameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SqlBaseParser.RULE_qualifiedName;
    }

	identifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IdentifierContext);
	    } else {
	        return this.getTypedRuleContext(IdentifierContext,i);
	    }
	};

	accept(visitor) {
	    if ( visitor instanceof SqlBaseVisitor ) {
	        return visitor.visitQualifiedName(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ErrorCapturingIdentifierContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SqlBaseParser.RULE_errorCapturingIdentifier;
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	errorCapturingIdentifierExtra() {
	    return this.getTypedRuleContext(ErrorCapturingIdentifierExtraContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof SqlBaseVisitor ) {
	        return visitor.visitErrorCapturingIdentifier(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ErrorCapturingIdentifierExtraContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SqlBaseParser.RULE_errorCapturingIdentifierExtra;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class ErrorIdentContext extends ErrorCapturingIdentifierExtraContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	MINUS = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SqlBaseParser.MINUS);
	    } else {
	        return this.getToken(SqlBaseParser.MINUS, i);
	    }
	};


	identifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IdentifierContext);
	    } else {
	        return this.getTypedRuleContext(IdentifierContext,i);
	    }
	};

	accept(visitor) {
	    if ( visitor instanceof SqlBaseVisitor ) {
	        return visitor.visitErrorIdent(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

SqlBaseParser.ErrorIdentContext = ErrorIdentContext;

class RealIdentContext extends ErrorCapturingIdentifierExtraContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }


	accept(visitor) {
	    if ( visitor instanceof SqlBaseVisitor ) {
	        return visitor.visitRealIdent(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

SqlBaseParser.RealIdentContext = RealIdentContext;

class IdentifierContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SqlBaseParser.RULE_identifier;
    }

	strictIdentifier() {
	    return this.getTypedRuleContext(StrictIdentifierContext,0);
	};

	strictNonReserved() {
	    return this.getTypedRuleContext(StrictNonReservedContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof SqlBaseVisitor ) {
	        return visitor.visitIdentifier(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class StrictIdentifierContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SqlBaseParser.RULE_strictIdentifier;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class QuotedIdentifierAlternativeContext extends StrictIdentifierContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	quotedIdentifier() {
	    return this.getTypedRuleContext(QuotedIdentifierContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof SqlBaseVisitor ) {
	        return visitor.visitQuotedIdentifierAlternative(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

SqlBaseParser.QuotedIdentifierAlternativeContext = QuotedIdentifierAlternativeContext;

class UnquotedIdentifierContext extends StrictIdentifierContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	IDENTIFIER() {
	    return this.getToken(SqlBaseParser.IDENTIFIER, 0);
	};

	ansiNonReserved() {
	    return this.getTypedRuleContext(AnsiNonReservedContext,0);
	};

	nonReserved() {
	    return this.getTypedRuleContext(NonReservedContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof SqlBaseVisitor ) {
	        return visitor.visitUnquotedIdentifier(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

SqlBaseParser.UnquotedIdentifierContext = UnquotedIdentifierContext;

class QuotedIdentifierContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SqlBaseParser.RULE_quotedIdentifier;
    }

	BACKQUOTED_IDENTIFIER() {
	    return this.getToken(SqlBaseParser.BACKQUOTED_IDENTIFIER, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof SqlBaseVisitor ) {
	        return visitor.visitQuotedIdentifier(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class NumberContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SqlBaseParser.RULE_number;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class DecimalLiteralContext extends NumberContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	DECIMAL_VALUE() {
	    return this.getToken(SqlBaseParser.DECIMAL_VALUE, 0);
	};

	MINUS() {
	    return this.getToken(SqlBaseParser.MINUS, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof SqlBaseVisitor ) {
	        return visitor.visitDecimalLiteral(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

SqlBaseParser.DecimalLiteralContext = DecimalLiteralContext;

class BigIntLiteralContext extends NumberContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	BIGINT_LITERAL() {
	    return this.getToken(SqlBaseParser.BIGINT_LITERAL, 0);
	};

	MINUS() {
	    return this.getToken(SqlBaseParser.MINUS, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof SqlBaseVisitor ) {
	        return visitor.visitBigIntLiteral(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

SqlBaseParser.BigIntLiteralContext = BigIntLiteralContext;

class TinyIntLiteralContext extends NumberContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	TINYINT_LITERAL() {
	    return this.getToken(SqlBaseParser.TINYINT_LITERAL, 0);
	};

	MINUS() {
	    return this.getToken(SqlBaseParser.MINUS, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof SqlBaseVisitor ) {
	        return visitor.visitTinyIntLiteral(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

SqlBaseParser.TinyIntLiteralContext = TinyIntLiteralContext;

class LegacyDecimalLiteralContext extends NumberContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	EXPONENT_VALUE() {
	    return this.getToken(SqlBaseParser.EXPONENT_VALUE, 0);
	};

	DECIMAL_VALUE() {
	    return this.getToken(SqlBaseParser.DECIMAL_VALUE, 0);
	};

	MINUS() {
	    return this.getToken(SqlBaseParser.MINUS, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof SqlBaseVisitor ) {
	        return visitor.visitLegacyDecimalLiteral(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

SqlBaseParser.LegacyDecimalLiteralContext = LegacyDecimalLiteralContext;

class BigDecimalLiteralContext extends NumberContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	BIGDECIMAL_LITERAL() {
	    return this.getToken(SqlBaseParser.BIGDECIMAL_LITERAL, 0);
	};

	MINUS() {
	    return this.getToken(SqlBaseParser.MINUS, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof SqlBaseVisitor ) {
	        return visitor.visitBigDecimalLiteral(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

SqlBaseParser.BigDecimalLiteralContext = BigDecimalLiteralContext;

class ExponentLiteralContext extends NumberContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	EXPONENT_VALUE() {
	    return this.getToken(SqlBaseParser.EXPONENT_VALUE, 0);
	};

	MINUS() {
	    return this.getToken(SqlBaseParser.MINUS, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof SqlBaseVisitor ) {
	        return visitor.visitExponentLiteral(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

SqlBaseParser.ExponentLiteralContext = ExponentLiteralContext;

class DoubleLiteralContext extends NumberContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	DOUBLE_LITERAL() {
	    return this.getToken(SqlBaseParser.DOUBLE_LITERAL, 0);
	};

	MINUS() {
	    return this.getToken(SqlBaseParser.MINUS, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof SqlBaseVisitor ) {
	        return visitor.visitDoubleLiteral(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

SqlBaseParser.DoubleLiteralContext = DoubleLiteralContext;

class IntegerLiteralContext extends NumberContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	INTEGER_VALUE() {
	    return this.getToken(SqlBaseParser.INTEGER_VALUE, 0);
	};

	MINUS() {
	    return this.getToken(SqlBaseParser.MINUS, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof SqlBaseVisitor ) {
	        return visitor.visitIntegerLiteral(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

SqlBaseParser.IntegerLiteralContext = IntegerLiteralContext;

class FloatLiteralContext extends NumberContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	FLOAT_LITERAL() {
	    return this.getToken(SqlBaseParser.FLOAT_LITERAL, 0);
	};

	MINUS() {
	    return this.getToken(SqlBaseParser.MINUS, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof SqlBaseVisitor ) {
	        return visitor.visitFloatLiteral(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

SqlBaseParser.FloatLiteralContext = FloatLiteralContext;

class SmallIntLiteralContext extends NumberContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	SMALLINT_LITERAL() {
	    return this.getToken(SqlBaseParser.SMALLINT_LITERAL, 0);
	};

	MINUS() {
	    return this.getToken(SqlBaseParser.MINUS, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof SqlBaseVisitor ) {
	        return visitor.visitSmallIntLiteral(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

SqlBaseParser.SmallIntLiteralContext = SmallIntLiteralContext;

class AlterColumnActionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SqlBaseParser.RULE_alterColumnAction;
        this.setOrDrop = null; // Token
    }

	TYPE() {
	    return this.getToken(SqlBaseParser.TYPE, 0);
	};

	dataType() {
	    return this.getTypedRuleContext(DataTypeContext,0);
	};

	commentSpec() {
	    return this.getTypedRuleContext(CommentSpecContext,0);
	};

	colPosition() {
	    return this.getTypedRuleContext(ColPositionContext,0);
	};

	NOT() {
	    return this.getToken(SqlBaseParser.NOT, 0);
	};

	NULL() {
	    return this.getToken(SqlBaseParser.NULL, 0);
	};

	SET() {
	    return this.getToken(SqlBaseParser.SET, 0);
	};

	DROP() {
	    return this.getToken(SqlBaseParser.DROP, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof SqlBaseVisitor ) {
	        return visitor.visitAlterColumnAction(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class AnsiNonReservedContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SqlBaseParser.RULE_ansiNonReserved;
    }

	ADD() {
	    return this.getToken(SqlBaseParser.ADD, 0);
	};

	AFTER() {
	    return this.getToken(SqlBaseParser.AFTER, 0);
	};

	ALTER() {
	    return this.getToken(SqlBaseParser.ALTER, 0);
	};

	ANALYZE() {
	    return this.getToken(SqlBaseParser.ANALYZE, 0);
	};

	ANTI() {
	    return this.getToken(SqlBaseParser.ANTI, 0);
	};

	ARCHIVE() {
	    return this.getToken(SqlBaseParser.ARCHIVE, 0);
	};

	ARRAY() {
	    return this.getToken(SqlBaseParser.ARRAY, 0);
	};

	ASC() {
	    return this.getToken(SqlBaseParser.ASC, 0);
	};

	AT() {
	    return this.getToken(SqlBaseParser.AT, 0);
	};

	BETWEEN() {
	    return this.getToken(SqlBaseParser.BETWEEN, 0);
	};

	BUCKET() {
	    return this.getToken(SqlBaseParser.BUCKET, 0);
	};

	BUCKETS() {
	    return this.getToken(SqlBaseParser.BUCKETS, 0);
	};

	BY() {
	    return this.getToken(SqlBaseParser.BY, 0);
	};

	CACHE() {
	    return this.getToken(SqlBaseParser.CACHE, 0);
	};

	CASCADE() {
	    return this.getToken(SqlBaseParser.CASCADE, 0);
	};

	CHANGE() {
	    return this.getToken(SqlBaseParser.CHANGE, 0);
	};

	CLEAR() {
	    return this.getToken(SqlBaseParser.CLEAR, 0);
	};

	CLUSTER() {
	    return this.getToken(SqlBaseParser.CLUSTER, 0);
	};

	CLUSTERED() {
	    return this.getToken(SqlBaseParser.CLUSTERED, 0);
	};

	CODEGEN() {
	    return this.getToken(SqlBaseParser.CODEGEN, 0);
	};

	COLLECTION() {
	    return this.getToken(SqlBaseParser.COLLECTION, 0);
	};

	COLUMNS() {
	    return this.getToken(SqlBaseParser.COLUMNS, 0);
	};

	COMMENT() {
	    return this.getToken(SqlBaseParser.COMMENT, 0);
	};

	COMMIT() {
	    return this.getToken(SqlBaseParser.COMMIT, 0);
	};

	COMPACT() {
	    return this.getToken(SqlBaseParser.COMPACT, 0);
	};

	COMPACTIONS() {
	    return this.getToken(SqlBaseParser.COMPACTIONS, 0);
	};

	COMPUTE() {
	    return this.getToken(SqlBaseParser.COMPUTE, 0);
	};

	CONCATENATE() {
	    return this.getToken(SqlBaseParser.CONCATENATE, 0);
	};

	COST() {
	    return this.getToken(SqlBaseParser.COST, 0);
	};

	CUBE() {
	    return this.getToken(SqlBaseParser.CUBE, 0);
	};

	CURRENT() {
	    return this.getToken(SqlBaseParser.CURRENT, 0);
	};

	DATA() {
	    return this.getToken(SqlBaseParser.DATA, 0);
	};

	DATABASE() {
	    return this.getToken(SqlBaseParser.DATABASE, 0);
	};

	DATABASES() {
	    return this.getToken(SqlBaseParser.DATABASES, 0);
	};

	DBPROPERTIES() {
	    return this.getToken(SqlBaseParser.DBPROPERTIES, 0);
	};

	DEFINED() {
	    return this.getToken(SqlBaseParser.DEFINED, 0);
	};

	DELETE() {
	    return this.getToken(SqlBaseParser.DELETE, 0);
	};

	DELIMITED() {
	    return this.getToken(SqlBaseParser.DELIMITED, 0);
	};

	DESC() {
	    return this.getToken(SqlBaseParser.DESC, 0);
	};

	DESCRIBE() {
	    return this.getToken(SqlBaseParser.DESCRIBE, 0);
	};

	DFS() {
	    return this.getToken(SqlBaseParser.DFS, 0);
	};

	DIRECTORIES() {
	    return this.getToken(SqlBaseParser.DIRECTORIES, 0);
	};

	DIRECTORY() {
	    return this.getToken(SqlBaseParser.DIRECTORY, 0);
	};

	DISTRIBUTE() {
	    return this.getToken(SqlBaseParser.DISTRIBUTE, 0);
	};

	DIV() {
	    return this.getToken(SqlBaseParser.DIV, 0);
	};

	DROP() {
	    return this.getToken(SqlBaseParser.DROP, 0);
	};

	ESCAPED() {
	    return this.getToken(SqlBaseParser.ESCAPED, 0);
	};

	EXCHANGE() {
	    return this.getToken(SqlBaseParser.EXCHANGE, 0);
	};

	EXISTS() {
	    return this.getToken(SqlBaseParser.EXISTS, 0);
	};

	EXPLAIN() {
	    return this.getToken(SqlBaseParser.EXPLAIN, 0);
	};

	EXPORT() {
	    return this.getToken(SqlBaseParser.EXPORT, 0);
	};

	EXTENDED() {
	    return this.getToken(SqlBaseParser.EXTENDED, 0);
	};

	EXTERNAL() {
	    return this.getToken(SqlBaseParser.EXTERNAL, 0);
	};

	EXTRACT() {
	    return this.getToken(SqlBaseParser.EXTRACT, 0);
	};

	FIELDS() {
	    return this.getToken(SqlBaseParser.FIELDS, 0);
	};

	FILEFORMAT() {
	    return this.getToken(SqlBaseParser.FILEFORMAT, 0);
	};

	FIRST() {
	    return this.getToken(SqlBaseParser.FIRST, 0);
	};

	FOLLOWING() {
	    return this.getToken(SqlBaseParser.FOLLOWING, 0);
	};

	FORMAT() {
	    return this.getToken(SqlBaseParser.FORMAT, 0);
	};

	FORMATTED() {
	    return this.getToken(SqlBaseParser.FORMATTED, 0);
	};

	FUNCTION() {
	    return this.getToken(SqlBaseParser.FUNCTION, 0);
	};

	FUNCTIONS() {
	    return this.getToken(SqlBaseParser.FUNCTIONS, 0);
	};

	GLOBAL() {
	    return this.getToken(SqlBaseParser.GLOBAL, 0);
	};

	GROUPING() {
	    return this.getToken(SqlBaseParser.GROUPING, 0);
	};

	IF() {
	    return this.getToken(SqlBaseParser.IF, 0);
	};

	IGNORE() {
	    return this.getToken(SqlBaseParser.IGNORE, 0);
	};

	IMPORT() {
	    return this.getToken(SqlBaseParser.IMPORT, 0);
	};

	INDEX() {
	    return this.getToken(SqlBaseParser.INDEX, 0);
	};

	INDEXES() {
	    return this.getToken(SqlBaseParser.INDEXES, 0);
	};

	INPATH() {
	    return this.getToken(SqlBaseParser.INPATH, 0);
	};

	INPUTFORMAT() {
	    return this.getToken(SqlBaseParser.INPUTFORMAT, 0);
	};

	INSERT() {
	    return this.getToken(SqlBaseParser.INSERT, 0);
	};

	INTERVAL() {
	    return this.getToken(SqlBaseParser.INTERVAL, 0);
	};

	ITEMS() {
	    return this.getToken(SqlBaseParser.ITEMS, 0);
	};

	KEYS() {
	    return this.getToken(SqlBaseParser.KEYS, 0);
	};

	LAST() {
	    return this.getToken(SqlBaseParser.LAST, 0);
	};

	LATERAL() {
	    return this.getToken(SqlBaseParser.LATERAL, 0);
	};

	LAZY() {
	    return this.getToken(SqlBaseParser.LAZY, 0);
	};

	LIKE() {
	    return this.getToken(SqlBaseParser.LIKE, 0);
	};

	LIMIT() {
	    return this.getToken(SqlBaseParser.LIMIT, 0);
	};

	LINES() {
	    return this.getToken(SqlBaseParser.LINES, 0);
	};

	LIST() {
	    return this.getToken(SqlBaseParser.LIST, 0);
	};

	LOAD() {
	    return this.getToken(SqlBaseParser.LOAD, 0);
	};

	LOCAL() {
	    return this.getToken(SqlBaseParser.LOCAL, 0);
	};

	LOCATION() {
	    return this.getToken(SqlBaseParser.LOCATION, 0);
	};

	LOCK() {
	    return this.getToken(SqlBaseParser.LOCK, 0);
	};

	LOCKS() {
	    return this.getToken(SqlBaseParser.LOCKS, 0);
	};

	LOGICAL() {
	    return this.getToken(SqlBaseParser.LOGICAL, 0);
	};

	MACRO() {
	    return this.getToken(SqlBaseParser.MACRO, 0);
	};

	MAP() {
	    return this.getToken(SqlBaseParser.MAP, 0);
	};

	MATCHED() {
	    return this.getToken(SqlBaseParser.MATCHED, 0);
	};

	MERGE() {
	    return this.getToken(SqlBaseParser.MERGE, 0);
	};

	MSCK() {
	    return this.getToken(SqlBaseParser.MSCK, 0);
	};

	NAMESPACE() {
	    return this.getToken(SqlBaseParser.NAMESPACE, 0);
	};

	NAMESPACES() {
	    return this.getToken(SqlBaseParser.NAMESPACES, 0);
	};

	NO() {
	    return this.getToken(SqlBaseParser.NO, 0);
	};

	NULLS() {
	    return this.getToken(SqlBaseParser.NULLS, 0);
	};

	OF() {
	    return this.getToken(SqlBaseParser.OF, 0);
	};

	OPTION() {
	    return this.getToken(SqlBaseParser.OPTION, 0);
	};

	OPTIONS() {
	    return this.getToken(SqlBaseParser.OPTIONS, 0);
	};

	OUT() {
	    return this.getToken(SqlBaseParser.OUT, 0);
	};

	OUTPUTFORMAT() {
	    return this.getToken(SqlBaseParser.OUTPUTFORMAT, 0);
	};

	OVER() {
	    return this.getToken(SqlBaseParser.OVER, 0);
	};

	OVERLAY() {
	    return this.getToken(SqlBaseParser.OVERLAY, 0);
	};

	OVERWRITE() {
	    return this.getToken(SqlBaseParser.OVERWRITE, 0);
	};

	PARTITION() {
	    return this.getToken(SqlBaseParser.PARTITION, 0);
	};

	PARTITIONED() {
	    return this.getToken(SqlBaseParser.PARTITIONED, 0);
	};

	PARTITIONS() {
	    return this.getToken(SqlBaseParser.PARTITIONS, 0);
	};

	PERCENTLIT() {
	    return this.getToken(SqlBaseParser.PERCENTLIT, 0);
	};

	PIVOT() {
	    return this.getToken(SqlBaseParser.PIVOT, 0);
	};

	PLACING() {
	    return this.getToken(SqlBaseParser.PLACING, 0);
	};

	POSITION() {
	    return this.getToken(SqlBaseParser.POSITION, 0);
	};

	PRECEDING() {
	    return this.getToken(SqlBaseParser.PRECEDING, 0);
	};

	PRINCIPALS() {
	    return this.getToken(SqlBaseParser.PRINCIPALS, 0);
	};

	PROPERTIES() {
	    return this.getToken(SqlBaseParser.PROPERTIES, 0);
	};

	PURGE() {
	    return this.getToken(SqlBaseParser.PURGE, 0);
	};

	QUERY() {
	    return this.getToken(SqlBaseParser.QUERY, 0);
	};

	RANGE() {
	    return this.getToken(SqlBaseParser.RANGE, 0);
	};

	RECORDREADER() {
	    return this.getToken(SqlBaseParser.RECORDREADER, 0);
	};

	RECORDWRITER() {
	    return this.getToken(SqlBaseParser.RECORDWRITER, 0);
	};

	RECOVER() {
	    return this.getToken(SqlBaseParser.RECOVER, 0);
	};

	REDUCE() {
	    return this.getToken(SqlBaseParser.REDUCE, 0);
	};

	REFRESH() {
	    return this.getToken(SqlBaseParser.REFRESH, 0);
	};

	RENAME() {
	    return this.getToken(SqlBaseParser.RENAME, 0);
	};

	REPAIR() {
	    return this.getToken(SqlBaseParser.REPAIR, 0);
	};

	REPLACE() {
	    return this.getToken(SqlBaseParser.REPLACE, 0);
	};

	RESET() {
	    return this.getToken(SqlBaseParser.RESET, 0);
	};

	RESPECT() {
	    return this.getToken(SqlBaseParser.RESPECT, 0);
	};

	RESTRICT() {
	    return this.getToken(SqlBaseParser.RESTRICT, 0);
	};

	REVOKE() {
	    return this.getToken(SqlBaseParser.REVOKE, 0);
	};

	RLIKE() {
	    return this.getToken(SqlBaseParser.RLIKE, 0);
	};

	ROLE() {
	    return this.getToken(SqlBaseParser.ROLE, 0);
	};

	ROLES() {
	    return this.getToken(SqlBaseParser.ROLES, 0);
	};

	ROLLBACK() {
	    return this.getToken(SqlBaseParser.ROLLBACK, 0);
	};

	ROLLUP() {
	    return this.getToken(SqlBaseParser.ROLLUP, 0);
	};

	ROW() {
	    return this.getToken(SqlBaseParser.ROW, 0);
	};

	ROWS() {
	    return this.getToken(SqlBaseParser.ROWS, 0);
	};

	SCHEMA() {
	    return this.getToken(SqlBaseParser.SCHEMA, 0);
	};

	SEMI() {
	    return this.getToken(SqlBaseParser.SEMI, 0);
	};

	SEPARATED() {
	    return this.getToken(SqlBaseParser.SEPARATED, 0);
	};

	SERDE() {
	    return this.getToken(SqlBaseParser.SERDE, 0);
	};

	SERDEPROPERTIES() {
	    return this.getToken(SqlBaseParser.SERDEPROPERTIES, 0);
	};

	SET() {
	    return this.getToken(SqlBaseParser.SET, 0);
	};

	SETMINUS() {
	    return this.getToken(SqlBaseParser.SETMINUS, 0);
	};

	SETS() {
	    return this.getToken(SqlBaseParser.SETS, 0);
	};

	SHOW() {
	    return this.getToken(SqlBaseParser.SHOW, 0);
	};

	SKEWED() {
	    return this.getToken(SqlBaseParser.SKEWED, 0);
	};

	SORT() {
	    return this.getToken(SqlBaseParser.SORT, 0);
	};

	SORTED() {
	    return this.getToken(SqlBaseParser.SORTED, 0);
	};

	START() {
	    return this.getToken(SqlBaseParser.START, 0);
	};

	STATISTICS() {
	    return this.getToken(SqlBaseParser.STATISTICS, 0);
	};

	STORED() {
	    return this.getToken(SqlBaseParser.STORED, 0);
	};

	STRATIFY() {
	    return this.getToken(SqlBaseParser.STRATIFY, 0);
	};

	STRUCT() {
	    return this.getToken(SqlBaseParser.STRUCT, 0);
	};

	SUBSTR() {
	    return this.getToken(SqlBaseParser.SUBSTR, 0);
	};

	SUBSTRING() {
	    return this.getToken(SqlBaseParser.SUBSTRING, 0);
	};

	SYNC() {
	    return this.getToken(SqlBaseParser.SYNC, 0);
	};

	TABLES() {
	    return this.getToken(SqlBaseParser.TABLES, 0);
	};

	TABLESAMPLE() {
	    return this.getToken(SqlBaseParser.TABLESAMPLE, 0);
	};

	TBLPROPERTIES() {
	    return this.getToken(SqlBaseParser.TBLPROPERTIES, 0);
	};

	TEMPORARY() {
	    return this.getToken(SqlBaseParser.TEMPORARY, 0);
	};

	TERMINATED() {
	    return this.getToken(SqlBaseParser.TERMINATED, 0);
	};

	TOUCH() {
	    return this.getToken(SqlBaseParser.TOUCH, 0);
	};

	TRANSACTION() {
	    return this.getToken(SqlBaseParser.TRANSACTION, 0);
	};

	TRANSACTIONS() {
	    return this.getToken(SqlBaseParser.TRANSACTIONS, 0);
	};

	TRANSFORM() {
	    return this.getToken(SqlBaseParser.TRANSFORM, 0);
	};

	TRIM() {
	    return this.getToken(SqlBaseParser.TRIM, 0);
	};

	TRUE() {
	    return this.getToken(SqlBaseParser.TRUE, 0);
	};

	TRUNCATE() {
	    return this.getToken(SqlBaseParser.TRUNCATE, 0);
	};

	TRY_CAST() {
	    return this.getToken(SqlBaseParser.TRY_CAST, 0);
	};

	TYPE() {
	    return this.getToken(SqlBaseParser.TYPE, 0);
	};

	UNARCHIVE() {
	    return this.getToken(SqlBaseParser.UNARCHIVE, 0);
	};

	UNBOUNDED() {
	    return this.getToken(SqlBaseParser.UNBOUNDED, 0);
	};

	UNCACHE() {
	    return this.getToken(SqlBaseParser.UNCACHE, 0);
	};

	UNLOCK() {
	    return this.getToken(SqlBaseParser.UNLOCK, 0);
	};

	UNSET() {
	    return this.getToken(SqlBaseParser.UNSET, 0);
	};

	UPDATE() {
	    return this.getToken(SqlBaseParser.UPDATE, 0);
	};

	USE() {
	    return this.getToken(SqlBaseParser.USE, 0);
	};

	VALUES() {
	    return this.getToken(SqlBaseParser.VALUES, 0);
	};

	VIEW() {
	    return this.getToken(SqlBaseParser.VIEW, 0);
	};

	VIEWS() {
	    return this.getToken(SqlBaseParser.VIEWS, 0);
	};

	WINDOW() {
	    return this.getToken(SqlBaseParser.WINDOW, 0);
	};

	ZONE() {
	    return this.getToken(SqlBaseParser.ZONE, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof SqlBaseVisitor ) {
	        return visitor.visitAnsiNonReserved(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class StrictNonReservedContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SqlBaseParser.RULE_strictNonReserved;
    }

	ANTI() {
	    return this.getToken(SqlBaseParser.ANTI, 0);
	};

	CROSS() {
	    return this.getToken(SqlBaseParser.CROSS, 0);
	};

	EXCEPT() {
	    return this.getToken(SqlBaseParser.EXCEPT, 0);
	};

	FULL() {
	    return this.getToken(SqlBaseParser.FULL, 0);
	};

	INNER() {
	    return this.getToken(SqlBaseParser.INNER, 0);
	};

	INTERSECT() {
	    return this.getToken(SqlBaseParser.INTERSECT, 0);
	};

	JOIN() {
	    return this.getToken(SqlBaseParser.JOIN, 0);
	};

	LEFT() {
	    return this.getToken(SqlBaseParser.LEFT, 0);
	};

	NATURAL() {
	    return this.getToken(SqlBaseParser.NATURAL, 0);
	};

	ON() {
	    return this.getToken(SqlBaseParser.ON, 0);
	};

	RIGHT() {
	    return this.getToken(SqlBaseParser.RIGHT, 0);
	};

	SEMI() {
	    return this.getToken(SqlBaseParser.SEMI, 0);
	};

	SETMINUS() {
	    return this.getToken(SqlBaseParser.SETMINUS, 0);
	};

	UNION() {
	    return this.getToken(SqlBaseParser.UNION, 0);
	};

	USING() {
	    return this.getToken(SqlBaseParser.USING, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof SqlBaseVisitor ) {
	        return visitor.visitStrictNonReserved(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class NonReservedContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SqlBaseParser.RULE_nonReserved;
    }

	ADD() {
	    return this.getToken(SqlBaseParser.ADD, 0);
	};

	AFTER() {
	    return this.getToken(SqlBaseParser.AFTER, 0);
	};

	ALL() {
	    return this.getToken(SqlBaseParser.ALL, 0);
	};

	ALTER() {
	    return this.getToken(SqlBaseParser.ALTER, 0);
	};

	ANALYZE() {
	    return this.getToken(SqlBaseParser.ANALYZE, 0);
	};

	AND() {
	    return this.getToken(SqlBaseParser.AND, 0);
	};

	ANY() {
	    return this.getToken(SqlBaseParser.ANY, 0);
	};

	ARCHIVE() {
	    return this.getToken(SqlBaseParser.ARCHIVE, 0);
	};

	ARRAY() {
	    return this.getToken(SqlBaseParser.ARRAY, 0);
	};

	AS() {
	    return this.getToken(SqlBaseParser.AS, 0);
	};

	ASC() {
	    return this.getToken(SqlBaseParser.ASC, 0);
	};

	AT() {
	    return this.getToken(SqlBaseParser.AT, 0);
	};

	AUTHORIZATION() {
	    return this.getToken(SqlBaseParser.AUTHORIZATION, 0);
	};

	BETWEEN() {
	    return this.getToken(SqlBaseParser.BETWEEN, 0);
	};

	BOTH() {
	    return this.getToken(SqlBaseParser.BOTH, 0);
	};

	BUCKET() {
	    return this.getToken(SqlBaseParser.BUCKET, 0);
	};

	BUCKETS() {
	    return this.getToken(SqlBaseParser.BUCKETS, 0);
	};

	BY() {
	    return this.getToken(SqlBaseParser.BY, 0);
	};

	CACHE() {
	    return this.getToken(SqlBaseParser.CACHE, 0);
	};

	CASCADE() {
	    return this.getToken(SqlBaseParser.CASCADE, 0);
	};

	CASE() {
	    return this.getToken(SqlBaseParser.CASE, 0);
	};

	CAST() {
	    return this.getToken(SqlBaseParser.CAST, 0);
	};

	CHANGE() {
	    return this.getToken(SqlBaseParser.CHANGE, 0);
	};

	CHECK() {
	    return this.getToken(SqlBaseParser.CHECK, 0);
	};

	CLEAR() {
	    return this.getToken(SqlBaseParser.CLEAR, 0);
	};

	CLUSTER() {
	    return this.getToken(SqlBaseParser.CLUSTER, 0);
	};

	CLUSTERED() {
	    return this.getToken(SqlBaseParser.CLUSTERED, 0);
	};

	CODEGEN() {
	    return this.getToken(SqlBaseParser.CODEGEN, 0);
	};

	COLLATE() {
	    return this.getToken(SqlBaseParser.COLLATE, 0);
	};

	COLLECTION() {
	    return this.getToken(SqlBaseParser.COLLECTION, 0);
	};

	COLUMN() {
	    return this.getToken(SqlBaseParser.COLUMN, 0);
	};

	COLUMNS() {
	    return this.getToken(SqlBaseParser.COLUMNS, 0);
	};

	COMMENT() {
	    return this.getToken(SqlBaseParser.COMMENT, 0);
	};

	COMMIT() {
	    return this.getToken(SqlBaseParser.COMMIT, 0);
	};

	COMPACT() {
	    return this.getToken(SqlBaseParser.COMPACT, 0);
	};

	COMPACTIONS() {
	    return this.getToken(SqlBaseParser.COMPACTIONS, 0);
	};

	COMPUTE() {
	    return this.getToken(SqlBaseParser.COMPUTE, 0);
	};

	CONCATENATE() {
	    return this.getToken(SqlBaseParser.CONCATENATE, 0);
	};

	CONSTRAINT() {
	    return this.getToken(SqlBaseParser.CONSTRAINT, 0);
	};

	COST() {
	    return this.getToken(SqlBaseParser.COST, 0);
	};

	CREATE() {
	    return this.getToken(SqlBaseParser.CREATE, 0);
	};

	CUBE() {
	    return this.getToken(SqlBaseParser.CUBE, 0);
	};

	CURRENT() {
	    return this.getToken(SqlBaseParser.CURRENT, 0);
	};

	CURRENT_DATE() {
	    return this.getToken(SqlBaseParser.CURRENT_DATE, 0);
	};

	CURRENT_TIME() {
	    return this.getToken(SqlBaseParser.CURRENT_TIME, 0);
	};

	CURRENT_TIMESTAMP() {
	    return this.getToken(SqlBaseParser.CURRENT_TIMESTAMP, 0);
	};

	CURRENT_USER() {
	    return this.getToken(SqlBaseParser.CURRENT_USER, 0);
	};

	DATA() {
	    return this.getToken(SqlBaseParser.DATA, 0);
	};

	DATABASE() {
	    return this.getToken(SqlBaseParser.DATABASE, 0);
	};

	DATABASES() {
	    return this.getToken(SqlBaseParser.DATABASES, 0);
	};

	DBPROPERTIES() {
	    return this.getToken(SqlBaseParser.DBPROPERTIES, 0);
	};

	DEFINED() {
	    return this.getToken(SqlBaseParser.DEFINED, 0);
	};

	DELETE() {
	    return this.getToken(SqlBaseParser.DELETE, 0);
	};

	DELIMITED() {
	    return this.getToken(SqlBaseParser.DELIMITED, 0);
	};

	DESC() {
	    return this.getToken(SqlBaseParser.DESC, 0);
	};

	DESCRIBE() {
	    return this.getToken(SqlBaseParser.DESCRIBE, 0);
	};

	DFS() {
	    return this.getToken(SqlBaseParser.DFS, 0);
	};

	DIRECTORIES() {
	    return this.getToken(SqlBaseParser.DIRECTORIES, 0);
	};

	DIRECTORY() {
	    return this.getToken(SqlBaseParser.DIRECTORY, 0);
	};

	DISTINCT() {
	    return this.getToken(SqlBaseParser.DISTINCT, 0);
	};

	DISTRIBUTE() {
	    return this.getToken(SqlBaseParser.DISTRIBUTE, 0);
	};

	DIV() {
	    return this.getToken(SqlBaseParser.DIV, 0);
	};

	DROP() {
	    return this.getToken(SqlBaseParser.DROP, 0);
	};

	ELSE() {
	    return this.getToken(SqlBaseParser.ELSE, 0);
	};

	END() {
	    return this.getToken(SqlBaseParser.END, 0);
	};

	ESCAPE() {
	    return this.getToken(SqlBaseParser.ESCAPE, 0);
	};

	ESCAPED() {
	    return this.getToken(SqlBaseParser.ESCAPED, 0);
	};

	EXCHANGE() {
	    return this.getToken(SqlBaseParser.EXCHANGE, 0);
	};

	EXISTS() {
	    return this.getToken(SqlBaseParser.EXISTS, 0);
	};

	EXPLAIN() {
	    return this.getToken(SqlBaseParser.EXPLAIN, 0);
	};

	EXPORT() {
	    return this.getToken(SqlBaseParser.EXPORT, 0);
	};

	EXTENDED() {
	    return this.getToken(SqlBaseParser.EXTENDED, 0);
	};

	EXTERNAL() {
	    return this.getToken(SqlBaseParser.EXTERNAL, 0);
	};

	EXTRACT() {
	    return this.getToken(SqlBaseParser.EXTRACT, 0);
	};

	FALSE() {
	    return this.getToken(SqlBaseParser.FALSE, 0);
	};

	FETCH() {
	    return this.getToken(SqlBaseParser.FETCH, 0);
	};

	FILTER() {
	    return this.getToken(SqlBaseParser.FILTER, 0);
	};

	FIELDS() {
	    return this.getToken(SqlBaseParser.FIELDS, 0);
	};

	FILEFORMAT() {
	    return this.getToken(SqlBaseParser.FILEFORMAT, 0);
	};

	FIRST() {
	    return this.getToken(SqlBaseParser.FIRST, 0);
	};

	FOLLOWING() {
	    return this.getToken(SqlBaseParser.FOLLOWING, 0);
	};

	FOR() {
	    return this.getToken(SqlBaseParser.FOR, 0);
	};

	FOREIGN() {
	    return this.getToken(SqlBaseParser.FOREIGN, 0);
	};

	FORMAT() {
	    return this.getToken(SqlBaseParser.FORMAT, 0);
	};

	FORMATTED() {
	    return this.getToken(SqlBaseParser.FORMATTED, 0);
	};

	FROM() {
	    return this.getToken(SqlBaseParser.FROM, 0);
	};

	FUNCTION() {
	    return this.getToken(SqlBaseParser.FUNCTION, 0);
	};

	FUNCTIONS() {
	    return this.getToken(SqlBaseParser.FUNCTIONS, 0);
	};

	GLOBAL() {
	    return this.getToken(SqlBaseParser.GLOBAL, 0);
	};

	GRANT() {
	    return this.getToken(SqlBaseParser.GRANT, 0);
	};

	GROUP() {
	    return this.getToken(SqlBaseParser.GROUP, 0);
	};

	GROUPING() {
	    return this.getToken(SqlBaseParser.GROUPING, 0);
	};

	HAVING() {
	    return this.getToken(SqlBaseParser.HAVING, 0);
	};

	IF() {
	    return this.getToken(SqlBaseParser.IF, 0);
	};

	IGNORE() {
	    return this.getToken(SqlBaseParser.IGNORE, 0);
	};

	IMPORT() {
	    return this.getToken(SqlBaseParser.IMPORT, 0);
	};

	IN() {
	    return this.getToken(SqlBaseParser.IN, 0);
	};

	INDEX() {
	    return this.getToken(SqlBaseParser.INDEX, 0);
	};

	INDEXES() {
	    return this.getToken(SqlBaseParser.INDEXES, 0);
	};

	INPATH() {
	    return this.getToken(SqlBaseParser.INPATH, 0);
	};

	INPUTFORMAT() {
	    return this.getToken(SqlBaseParser.INPUTFORMAT, 0);
	};

	INSERT() {
	    return this.getToken(SqlBaseParser.INSERT, 0);
	};

	INTERVAL() {
	    return this.getToken(SqlBaseParser.INTERVAL, 0);
	};

	INTO() {
	    return this.getToken(SqlBaseParser.INTO, 0);
	};

	IS() {
	    return this.getToken(SqlBaseParser.IS, 0);
	};

	ITEMS() {
	    return this.getToken(SqlBaseParser.ITEMS, 0);
	};

	KEYS() {
	    return this.getToken(SqlBaseParser.KEYS, 0);
	};

	KW_DEFAULT() {
	    return this.getToken(SqlBaseParser.KW_DEFAULT, 0);
	};

	LAST() {
	    return this.getToken(SqlBaseParser.LAST, 0);
	};

	LATERAL() {
	    return this.getToken(SqlBaseParser.LATERAL, 0);
	};

	LAZY() {
	    return this.getToken(SqlBaseParser.LAZY, 0);
	};

	LEADING() {
	    return this.getToken(SqlBaseParser.LEADING, 0);
	};

	LIKE() {
	    return this.getToken(SqlBaseParser.LIKE, 0);
	};

	LIMIT() {
	    return this.getToken(SqlBaseParser.LIMIT, 0);
	};

	LINES() {
	    return this.getToken(SqlBaseParser.LINES, 0);
	};

	LIST() {
	    return this.getToken(SqlBaseParser.LIST, 0);
	};

	LOAD() {
	    return this.getToken(SqlBaseParser.LOAD, 0);
	};

	LOCAL() {
	    return this.getToken(SqlBaseParser.LOCAL, 0);
	};

	LOCATION() {
	    return this.getToken(SqlBaseParser.LOCATION, 0);
	};

	LOCK() {
	    return this.getToken(SqlBaseParser.LOCK, 0);
	};

	LOCKS() {
	    return this.getToken(SqlBaseParser.LOCKS, 0);
	};

	LOGICAL() {
	    return this.getToken(SqlBaseParser.LOGICAL, 0);
	};

	MACRO() {
	    return this.getToken(SqlBaseParser.MACRO, 0);
	};

	MAP() {
	    return this.getToken(SqlBaseParser.MAP, 0);
	};

	MATCHED() {
	    return this.getToken(SqlBaseParser.MATCHED, 0);
	};

	MERGE() {
	    return this.getToken(SqlBaseParser.MERGE, 0);
	};

	MSCK() {
	    return this.getToken(SqlBaseParser.MSCK, 0);
	};

	NAMESPACE() {
	    return this.getToken(SqlBaseParser.NAMESPACE, 0);
	};

	NAMESPACES() {
	    return this.getToken(SqlBaseParser.NAMESPACES, 0);
	};

	NO() {
	    return this.getToken(SqlBaseParser.NO, 0);
	};

	NOT() {
	    return this.getToken(SqlBaseParser.NOT, 0);
	};

	NULL() {
	    return this.getToken(SqlBaseParser.NULL, 0);
	};

	NULLS() {
	    return this.getToken(SqlBaseParser.NULLS, 0);
	};

	OF() {
	    return this.getToken(SqlBaseParser.OF, 0);
	};

	ONLY() {
	    return this.getToken(SqlBaseParser.ONLY, 0);
	};

	OPTION() {
	    return this.getToken(SqlBaseParser.OPTION, 0);
	};

	OPTIONS() {
	    return this.getToken(SqlBaseParser.OPTIONS, 0);
	};

	OR() {
	    return this.getToken(SqlBaseParser.OR, 0);
	};

	ORDER() {
	    return this.getToken(SqlBaseParser.ORDER, 0);
	};

	OUT() {
	    return this.getToken(SqlBaseParser.OUT, 0);
	};

	OUTER() {
	    return this.getToken(SqlBaseParser.OUTER, 0);
	};

	OUTPUTFORMAT() {
	    return this.getToken(SqlBaseParser.OUTPUTFORMAT, 0);
	};

	OVER() {
	    return this.getToken(SqlBaseParser.OVER, 0);
	};

	OVERLAPS() {
	    return this.getToken(SqlBaseParser.OVERLAPS, 0);
	};

	OVERLAY() {
	    return this.getToken(SqlBaseParser.OVERLAY, 0);
	};

	OVERWRITE() {
	    return this.getToken(SqlBaseParser.OVERWRITE, 0);
	};

	PARTITION() {
	    return this.getToken(SqlBaseParser.PARTITION, 0);
	};

	PARTITIONED() {
	    return this.getToken(SqlBaseParser.PARTITIONED, 0);
	};

	PARTITIONS() {
	    return this.getToken(SqlBaseParser.PARTITIONS, 0);
	};

	PERCENTLIT() {
	    return this.getToken(SqlBaseParser.PERCENTLIT, 0);
	};

	PIVOT() {
	    return this.getToken(SqlBaseParser.PIVOT, 0);
	};

	PLACING() {
	    return this.getToken(SqlBaseParser.PLACING, 0);
	};

	POSITION() {
	    return this.getToken(SqlBaseParser.POSITION, 0);
	};

	PRECEDING() {
	    return this.getToken(SqlBaseParser.PRECEDING, 0);
	};

	PRIMARY() {
	    return this.getToken(SqlBaseParser.PRIMARY, 0);
	};

	PRINCIPALS() {
	    return this.getToken(SqlBaseParser.PRINCIPALS, 0);
	};

	PROPERTIES() {
	    return this.getToken(SqlBaseParser.PROPERTIES, 0);
	};

	PURGE() {
	    return this.getToken(SqlBaseParser.PURGE, 0);
	};

	QUERY() {
	    return this.getToken(SqlBaseParser.QUERY, 0);
	};

	RANGE() {
	    return this.getToken(SqlBaseParser.RANGE, 0);
	};

	RECORDREADER() {
	    return this.getToken(SqlBaseParser.RECORDREADER, 0);
	};

	RECORDWRITER() {
	    return this.getToken(SqlBaseParser.RECORDWRITER, 0);
	};

	RECOVER() {
	    return this.getToken(SqlBaseParser.RECOVER, 0);
	};

	REDUCE() {
	    return this.getToken(SqlBaseParser.REDUCE, 0);
	};

	REFERENCES() {
	    return this.getToken(SqlBaseParser.REFERENCES, 0);
	};

	REFRESH() {
	    return this.getToken(SqlBaseParser.REFRESH, 0);
	};

	RENAME() {
	    return this.getToken(SqlBaseParser.RENAME, 0);
	};

	REPAIR() {
	    return this.getToken(SqlBaseParser.REPAIR, 0);
	};

	REPLACE() {
	    return this.getToken(SqlBaseParser.REPLACE, 0);
	};

	RESET() {
	    return this.getToken(SqlBaseParser.RESET, 0);
	};

	RESPECT() {
	    return this.getToken(SqlBaseParser.RESPECT, 0);
	};

	RESTRICT() {
	    return this.getToken(SqlBaseParser.RESTRICT, 0);
	};

	REVOKE() {
	    return this.getToken(SqlBaseParser.REVOKE, 0);
	};

	RLIKE() {
	    return this.getToken(SqlBaseParser.RLIKE, 0);
	};

	ROLE() {
	    return this.getToken(SqlBaseParser.ROLE, 0);
	};

	ROLES() {
	    return this.getToken(SqlBaseParser.ROLES, 0);
	};

	ROLLBACK() {
	    return this.getToken(SqlBaseParser.ROLLBACK, 0);
	};

	ROLLUP() {
	    return this.getToken(SqlBaseParser.ROLLUP, 0);
	};

	ROW() {
	    return this.getToken(SqlBaseParser.ROW, 0);
	};

	ROWS() {
	    return this.getToken(SqlBaseParser.ROWS, 0);
	};

	SCHEMA() {
	    return this.getToken(SqlBaseParser.SCHEMA, 0);
	};

	SELECT() {
	    return this.getToken(SqlBaseParser.SELECT, 0);
	};

	SEPARATED() {
	    return this.getToken(SqlBaseParser.SEPARATED, 0);
	};

	SERDE() {
	    return this.getToken(SqlBaseParser.SERDE, 0);
	};

	SERDEPROPERTIES() {
	    return this.getToken(SqlBaseParser.SERDEPROPERTIES, 0);
	};

	SESSION_USER() {
	    return this.getToken(SqlBaseParser.SESSION_USER, 0);
	};

	SET() {
	    return this.getToken(SqlBaseParser.SET, 0);
	};

	SETS() {
	    return this.getToken(SqlBaseParser.SETS, 0);
	};

	SHOW() {
	    return this.getToken(SqlBaseParser.SHOW, 0);
	};

	SKEWED() {
	    return this.getToken(SqlBaseParser.SKEWED, 0);
	};

	SOME() {
	    return this.getToken(SqlBaseParser.SOME, 0);
	};

	SORT() {
	    return this.getToken(SqlBaseParser.SORT, 0);
	};

	SORTED() {
	    return this.getToken(SqlBaseParser.SORTED, 0);
	};

	START() {
	    return this.getToken(SqlBaseParser.START, 0);
	};

	STATISTICS() {
	    return this.getToken(SqlBaseParser.STATISTICS, 0);
	};

	STORED() {
	    return this.getToken(SqlBaseParser.STORED, 0);
	};

	STRATIFY() {
	    return this.getToken(SqlBaseParser.STRATIFY, 0);
	};

	STRUCT() {
	    return this.getToken(SqlBaseParser.STRUCT, 0);
	};

	SUBSTR() {
	    return this.getToken(SqlBaseParser.SUBSTR, 0);
	};

	SUBSTRING() {
	    return this.getToken(SqlBaseParser.SUBSTRING, 0);
	};

	SYNC() {
	    return this.getToken(SqlBaseParser.SYNC, 0);
	};

	TABLE() {
	    return this.getToken(SqlBaseParser.TABLE, 0);
	};

	TABLES() {
	    return this.getToken(SqlBaseParser.TABLES, 0);
	};

	TABLESAMPLE() {
	    return this.getToken(SqlBaseParser.TABLESAMPLE, 0);
	};

	TBLPROPERTIES() {
	    return this.getToken(SqlBaseParser.TBLPROPERTIES, 0);
	};

	TEMPORARY() {
	    return this.getToken(SqlBaseParser.TEMPORARY, 0);
	};

	TERMINATED() {
	    return this.getToken(SqlBaseParser.TERMINATED, 0);
	};

	THEN() {
	    return this.getToken(SqlBaseParser.THEN, 0);
	};

	TIME() {
	    return this.getToken(SqlBaseParser.TIME, 0);
	};

	TO() {
	    return this.getToken(SqlBaseParser.TO, 0);
	};

	TOUCH() {
	    return this.getToken(SqlBaseParser.TOUCH, 0);
	};

	TRAILING() {
	    return this.getToken(SqlBaseParser.TRAILING, 0);
	};

	TRANSACTION() {
	    return this.getToken(SqlBaseParser.TRANSACTION, 0);
	};

	TRANSACTIONS() {
	    return this.getToken(SqlBaseParser.TRANSACTIONS, 0);
	};

	TRANSFORM() {
	    return this.getToken(SqlBaseParser.TRANSFORM, 0);
	};

	TRIM() {
	    return this.getToken(SqlBaseParser.TRIM, 0);
	};

	TRUE() {
	    return this.getToken(SqlBaseParser.TRUE, 0);
	};

	TRUNCATE() {
	    return this.getToken(SqlBaseParser.TRUNCATE, 0);
	};

	TRY_CAST() {
	    return this.getToken(SqlBaseParser.TRY_CAST, 0);
	};

	TYPE() {
	    return this.getToken(SqlBaseParser.TYPE, 0);
	};

	UNARCHIVE() {
	    return this.getToken(SqlBaseParser.UNARCHIVE, 0);
	};

	UNBOUNDED() {
	    return this.getToken(SqlBaseParser.UNBOUNDED, 0);
	};

	UNCACHE() {
	    return this.getToken(SqlBaseParser.UNCACHE, 0);
	};

	UNIQUE() {
	    return this.getToken(SqlBaseParser.UNIQUE, 0);
	};

	UNKNOWN() {
	    return this.getToken(SqlBaseParser.UNKNOWN, 0);
	};

	UNLOCK() {
	    return this.getToken(SqlBaseParser.UNLOCK, 0);
	};

	UNSET() {
	    return this.getToken(SqlBaseParser.UNSET, 0);
	};

	UPDATE() {
	    return this.getToken(SqlBaseParser.UPDATE, 0);
	};

	USE() {
	    return this.getToken(SqlBaseParser.USE, 0);
	};

	USER() {
	    return this.getToken(SqlBaseParser.USER, 0);
	};

	VALUES() {
	    return this.getToken(SqlBaseParser.VALUES, 0);
	};

	VIEW() {
	    return this.getToken(SqlBaseParser.VIEW, 0);
	};

	VIEWS() {
	    return this.getToken(SqlBaseParser.VIEWS, 0);
	};

	WHEN() {
	    return this.getToken(SqlBaseParser.WHEN, 0);
	};

	WHERE() {
	    return this.getToken(SqlBaseParser.WHERE, 0);
	};

	WINDOW() {
	    return this.getToken(SqlBaseParser.WINDOW, 0);
	};

	WITH() {
	    return this.getToken(SqlBaseParser.WITH, 0);
	};

	ZONE() {
	    return this.getToken(SqlBaseParser.ZONE, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof SqlBaseVisitor ) {
	        return visitor.visitNonReserved(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}




SqlBaseParser.SingleStatementContext = SingleStatementContext; 
SqlBaseParser.SingleExpressionContext = SingleExpressionContext; 
SqlBaseParser.SingleTableIdentifierContext = SingleTableIdentifierContext; 
SqlBaseParser.SingleMultipartIdentifierContext = SingleMultipartIdentifierContext; 
SqlBaseParser.SingleFunctionIdentifierContext = SingleFunctionIdentifierContext; 
SqlBaseParser.SingleDataTypeContext = SingleDataTypeContext; 
SqlBaseParser.SingleTableSchemaContext = SingleTableSchemaContext; 
SqlBaseParser.StatementContext = StatementContext; 
SqlBaseParser.ConfigKeyContext = ConfigKeyContext; 
SqlBaseParser.ConfigValueContext = ConfigValueContext; 
SqlBaseParser.UnsupportedHiveNativeCommandsContext = UnsupportedHiveNativeCommandsContext; 
SqlBaseParser.CreateTableHeaderContext = CreateTableHeaderContext; 
SqlBaseParser.ReplaceTableHeaderContext = ReplaceTableHeaderContext; 
SqlBaseParser.BucketSpecContext = BucketSpecContext; 
SqlBaseParser.SkewSpecContext = SkewSpecContext; 
SqlBaseParser.LocationSpecContext = LocationSpecContext; 
SqlBaseParser.CommentSpecContext = CommentSpecContext; 
SqlBaseParser.QueryContext = QueryContext; 
SqlBaseParser.InsertIntoContext = InsertIntoContext; 
SqlBaseParser.PartitionSpecLocationContext = PartitionSpecLocationContext; 
SqlBaseParser.PartitionSpecContext = PartitionSpecContext; 
SqlBaseParser.PartitionValContext = PartitionValContext; 
SqlBaseParser.NamespaceContext = NamespaceContext; 
SqlBaseParser.DescribeFuncNameContext = DescribeFuncNameContext; 
SqlBaseParser.DescribeColNameContext = DescribeColNameContext; 
SqlBaseParser.CtesContext = CtesContext; 
SqlBaseParser.NamedQueryContext = NamedQueryContext; 
SqlBaseParser.TableProviderContext = TableProviderContext; 
SqlBaseParser.CreateTableClausesContext = CreateTableClausesContext; 
SqlBaseParser.TablePropertiesContext = TablePropertiesContext; 
SqlBaseParser.TableOptionsContext = TableOptionsContext; 
SqlBaseParser.TablePropertyListContext = TablePropertyListContext; 
SqlBaseParser.TablePropertyContext = TablePropertyContext; 
SqlBaseParser.TablePropertyKeyContext = TablePropertyKeyContext; 
SqlBaseParser.TablePropertyValueContext = TablePropertyValueContext; 
SqlBaseParser.ConstantListContext = ConstantListContext; 
SqlBaseParser.NestedConstantListContext = NestedConstantListContext; 
SqlBaseParser.CreateFileFormatContext = CreateFileFormatContext; 
SqlBaseParser.FileFormatContext = FileFormatContext; 
SqlBaseParser.StorageHandlerContext = StorageHandlerContext; 
SqlBaseParser.ResourceContext = ResourceContext; 
SqlBaseParser.DmlStatementNoWithContext = DmlStatementNoWithContext; 
SqlBaseParser.QueryOrganizationContext = QueryOrganizationContext; 
SqlBaseParser.MultiInsertQueryBodyContext = MultiInsertQueryBodyContext; 
SqlBaseParser.QueryTermContext = QueryTermContext; 
SqlBaseParser.QueryPrimaryContext = QueryPrimaryContext; 
SqlBaseParser.SortItemContext = SortItemContext; 
SqlBaseParser.FromStatementContext = FromStatementContext; 
SqlBaseParser.FromStatementBodyContext = FromStatementBodyContext; 
SqlBaseParser.QuerySpecificationContext = QuerySpecificationContext; 
SqlBaseParser.TransformClauseContext = TransformClauseContext; 
SqlBaseParser.SelectClauseContext = SelectClauseContext; 
SqlBaseParser.SetClauseContext = SetClauseContext; 
SqlBaseParser.MatchedClauseContext = MatchedClauseContext; 
SqlBaseParser.NotMatchedClauseContext = NotMatchedClauseContext; 
SqlBaseParser.MatchedActionContext = MatchedActionContext; 
SqlBaseParser.NotMatchedActionContext = NotMatchedActionContext; 
SqlBaseParser.AssignmentListContext = AssignmentListContext; 
SqlBaseParser.AssignmentContext = AssignmentContext; 
SqlBaseParser.WhereClauseContext = WhereClauseContext; 
SqlBaseParser.HavingClauseContext = HavingClauseContext; 
SqlBaseParser.HintContext = HintContext; 
SqlBaseParser.HintStatementContext = HintStatementContext; 
SqlBaseParser.FromClauseContext = FromClauseContext; 
SqlBaseParser.AggregationClauseContext = AggregationClauseContext; 
SqlBaseParser.GroupByClauseContext = GroupByClauseContext; 
SqlBaseParser.GroupingAnalyticsContext = GroupingAnalyticsContext; 
SqlBaseParser.GroupingSetContext = GroupingSetContext; 
SqlBaseParser.PivotClauseContext = PivotClauseContext; 
SqlBaseParser.PivotColumnContext = PivotColumnContext; 
SqlBaseParser.PivotValueContext = PivotValueContext; 
SqlBaseParser.LateralViewContext = LateralViewContext; 
SqlBaseParser.SetQuantifierContext = SetQuantifierContext; 
SqlBaseParser.RelationContext = RelationContext; 
SqlBaseParser.JoinRelationContext = JoinRelationContext; 
SqlBaseParser.JoinTypeContext = JoinTypeContext; 
SqlBaseParser.JoinCriteriaContext = JoinCriteriaContext; 
SqlBaseParser.SampleContext = SampleContext; 
SqlBaseParser.SampleMethodContext = SampleMethodContext; 
SqlBaseParser.IdentifierListContext = IdentifierListContext; 
SqlBaseParser.IdentifierSeqContext = IdentifierSeqContext; 
SqlBaseParser.OrderedIdentifierListContext = OrderedIdentifierListContext; 
SqlBaseParser.OrderedIdentifierContext = OrderedIdentifierContext; 
SqlBaseParser.IdentifierCommentListContext = IdentifierCommentListContext; 
SqlBaseParser.IdentifierCommentContext = IdentifierCommentContext; 
SqlBaseParser.RelationPrimaryContext = RelationPrimaryContext; 
SqlBaseParser.InlineTableContext = InlineTableContext; 
SqlBaseParser.FunctionTableContext = FunctionTableContext; 
SqlBaseParser.TableAliasContext = TableAliasContext; 
SqlBaseParser.RowFormatContext = RowFormatContext; 
SqlBaseParser.MultipartIdentifierListContext = MultipartIdentifierListContext; 
SqlBaseParser.MultipartIdentifierContext = MultipartIdentifierContext; 
SqlBaseParser.TableIdentifierContext = TableIdentifierContext; 
SqlBaseParser.FunctionIdentifierContext = FunctionIdentifierContext; 
SqlBaseParser.NamedExpressionContext = NamedExpressionContext; 
SqlBaseParser.NamedExpressionSeqContext = NamedExpressionSeqContext; 
SqlBaseParser.PartitionFieldListContext = PartitionFieldListContext; 
SqlBaseParser.PartitionFieldContext = PartitionFieldContext; 
SqlBaseParser.TransformContext = TransformContext; 
SqlBaseParser.TransformArgumentContext = TransformArgumentContext; 
SqlBaseParser.ExpressionContext = ExpressionContext; 
SqlBaseParser.BooleanExpressionContext = BooleanExpressionContext; 
SqlBaseParser.PredicateContext = PredicateContext; 
SqlBaseParser.ValueExpressionContext = ValueExpressionContext; 
SqlBaseParser.PrimaryExpressionContext = PrimaryExpressionContext; 
SqlBaseParser.ConstantContext = ConstantContext; 
SqlBaseParser.ComparisonOperatorContext = ComparisonOperatorContext; 
SqlBaseParser.ArithmeticOperatorContext = ArithmeticOperatorContext; 
SqlBaseParser.PredicateOperatorContext = PredicateOperatorContext; 
SqlBaseParser.BooleanValueContext = BooleanValueContext; 
SqlBaseParser.IntervalContext = IntervalContext; 
SqlBaseParser.ErrorCapturingMultiUnitsIntervalContext = ErrorCapturingMultiUnitsIntervalContext; 
SqlBaseParser.MultiUnitsIntervalContext = MultiUnitsIntervalContext; 
SqlBaseParser.ErrorCapturingUnitToUnitIntervalContext = ErrorCapturingUnitToUnitIntervalContext; 
SqlBaseParser.UnitToUnitIntervalContext = UnitToUnitIntervalContext; 
SqlBaseParser.IntervalValueContext = IntervalValueContext; 
SqlBaseParser.ColPositionContext = ColPositionContext; 
SqlBaseParser.DataTypeContext = DataTypeContext; 
SqlBaseParser.QualifiedColTypeWithPositionListContext = QualifiedColTypeWithPositionListContext; 
SqlBaseParser.QualifiedColTypeWithPositionContext = QualifiedColTypeWithPositionContext; 
SqlBaseParser.ColTypeListContext = ColTypeListContext; 
SqlBaseParser.ColTypeContext = ColTypeContext; 
SqlBaseParser.TableConstraintContext = TableConstraintContext; 
SqlBaseParser.PrimaryKeyConstraintContext = PrimaryKeyConstraintContext; 
SqlBaseParser.ForeignKeyConstraintContext = ForeignKeyConstraintContext; 
SqlBaseParser.TableConstraintNameContext = TableConstraintNameContext; 
SqlBaseParser.KeyNameListContext = KeyNameListContext; 
SqlBaseParser.ForeignKeyOptionsContext = ForeignKeyOptionsContext; 
SqlBaseParser.ForeignKeyConstraintOptionsContext = ForeignKeyConstraintOptionsContext; 
SqlBaseParser.ConstraintOptionsContext = ConstraintOptionsContext; 
SqlBaseParser.ColumnConstraintContext = ColumnConstraintContext; 
SqlBaseParser.ColumnConstraintTypeContext = ColumnConstraintTypeContext; 
SqlBaseParser.ColumnGeneratedAsContext = ColumnGeneratedAsContext; 
SqlBaseParser.GeneratedAsExpressionContext = GeneratedAsExpressionContext; 
SqlBaseParser.GeneratedAsIdentityContext = GeneratedAsIdentityContext; 
SqlBaseParser.ComplexColTypeListContext = ComplexColTypeListContext; 
SqlBaseParser.ComplexColTypeContext = ComplexColTypeContext; 
SqlBaseParser.WhenClauseContext = WhenClauseContext; 
SqlBaseParser.WindowClauseContext = WindowClauseContext; 
SqlBaseParser.NamedWindowContext = NamedWindowContext; 
SqlBaseParser.WindowSpecContext = WindowSpecContext; 
SqlBaseParser.WindowFrameContext = WindowFrameContext; 
SqlBaseParser.FrameBoundContext = FrameBoundContext; 
SqlBaseParser.QualifiedNameListContext = QualifiedNameListContext; 
SqlBaseParser.FunctionNameContext = FunctionNameContext; 
SqlBaseParser.QualifiedNameContext = QualifiedNameContext; 
SqlBaseParser.ErrorCapturingIdentifierContext = ErrorCapturingIdentifierContext; 
SqlBaseParser.ErrorCapturingIdentifierExtraContext = ErrorCapturingIdentifierExtraContext; 
SqlBaseParser.IdentifierContext = IdentifierContext; 
SqlBaseParser.StrictIdentifierContext = StrictIdentifierContext; 
SqlBaseParser.QuotedIdentifierContext = QuotedIdentifierContext; 
SqlBaseParser.NumberContext = NumberContext; 
SqlBaseParser.AlterColumnActionContext = AlterColumnActionContext; 
SqlBaseParser.AnsiNonReservedContext = AnsiNonReservedContext; 
SqlBaseParser.StrictNonReservedContext = StrictNonReservedContext; 
SqlBaseParser.NonReservedContext = NonReservedContext; 

module.exports = { SqlBaseParser };
