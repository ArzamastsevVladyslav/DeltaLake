{"version":3,"file":"ExpressionFormatter.js","names":["ExpressionFormatter","cfg","params","layout","inline","nodes","index","length","formatNode","node","type","NodeType","function_call","formatFunctionCall","array_subscript","formatArraySubscript","property_access","formatPropertyAccess","parenthesis","formatParenthesis","between_predicate","formatBetweenPredicate","clause","formatClause","set_operation","formatSetOperation","limit_clause","formatLimitClause","all_columns_asterisk","formatAllColumnsAsterisk","literal","formatLiteral","identifier","formatIdentifier","parameter","formatParameter","operator","formatOperator","comma","formatComma","line_comment","formatLineComment","block_comment","formatBlockComment","keyword","formatKeywordNode","add","showKw","name","array","text","object","property","WS","NO_SPACE","inlineLayout","formatInlineExpression","children","openParen","getLayoutItems","closeParen","SPACE","NEWLINE","isTabularStyle","INDENT","formatSubExpression","indentation","increaseBlockLevel","decreaseBlockLevel","between","expr1","showNonTabularKw","and","expr2","increaseTopLevel","decreaseTopLevel","offset","count","_node","get","language","denseOperators","test","precedingWhitespace","MANDATORY_NEWLINE","NO_NEWLINE","splitBlockComment","forEach","line","comment","split","map","replace","format","oldParamIndex","getPositionalParameterIndex","InlineLayout","expressionWidth","e","InlineLayoutError","setPositionalParameterIndex","undefined","tokenType","TokenType","RESERVED_JOIN","formatJoin","RESERVED_DEPENDENT_CLAUSE","formatDependentClause","AND","OR","XOR","formatLogicalOperator","RESERVED_KEYWORD","RESERVED_FUNCTION_NAME","RESERVED_PHRASE","formatKeyword","CASE","formatCaseStart","END","formatCaseEnd","Error","logicalOperatorNewline","formatMultilineBlockEnd","isTabularToken","toTabularFormat","indentStyle","keywordCase","equalizeWhitespace","raw","toLowerCase"],"sources":["../../src/formatter/ExpressionFormatter.ts"],"sourcesContent":["import { FormatOptions } from 'src/FormatOptions';\nimport { equalizeWhitespace } from 'src/utils';\n\nimport Params from 'src/formatter/Params';\nimport { isTabularStyle } from 'src/formatter/config';\nimport { TokenType } from 'src/lexer/token';\nimport {\n  AllColumnsAsteriskNode,\n  ArraySubscriptNode,\n  AstNode,\n  BetweenPredicateNode,\n  SetOperationNode,\n  ClauseNode,\n  FunctionCallNode,\n  LimitClauseNode,\n  NodeType,\n  ParenthesisNode,\n  LiteralNode,\n  IdentifierNode,\n  ParameterNode,\n  OperatorNode,\n  LineCommentNode,\n  BlockCommentNode,\n  CommaNode,\n  KeywordNode,\n  PropertyAccessNode,\n} from 'src/parser/ast';\n\nimport Layout, { WS } from './Layout';\nimport toTabularFormat, { isTabularToken } from './tabularStyle';\nimport InlineLayout, { InlineLayoutError } from './InlineLayout';\n\ninterface ExpressionFormatterParams {\n  cfg: FormatOptions;\n  params: Params;\n  layout: Layout;\n  inline?: boolean;\n}\n\n/** Formats a generic SQL expression */\nexport default class ExpressionFormatter {\n  private cfg: FormatOptions;\n  private params: Params;\n  private layout: Layout;\n\n  private inline = false;\n  private nodes: AstNode[] = [];\n  private index = -1;\n\n  constructor({ cfg, params, layout, inline = false }: ExpressionFormatterParams) {\n    this.cfg = cfg;\n    this.inline = inline;\n    this.params = params;\n    this.layout = layout;\n  }\n\n  public format(nodes: AstNode[]): Layout {\n    this.nodes = nodes;\n\n    for (this.index = 0; this.index < this.nodes.length; this.index++) {\n      this.formatNode(this.nodes[this.index]);\n    }\n    return this.layout;\n  }\n\n  private formatNode(node: AstNode) {\n    switch (node.type) {\n      case NodeType.function_call:\n        return this.formatFunctionCall(node);\n      case NodeType.array_subscript:\n        return this.formatArraySubscript(node);\n      case NodeType.property_access:\n        return this.formatPropertyAccess(node);\n      case NodeType.parenthesis:\n        return this.formatParenthesis(node);\n      case NodeType.between_predicate:\n        return this.formatBetweenPredicate(node);\n      case NodeType.clause:\n        return this.formatClause(node);\n      case NodeType.set_operation:\n        return this.formatSetOperation(node);\n      case NodeType.limit_clause:\n        return this.formatLimitClause(node);\n      case NodeType.all_columns_asterisk:\n        return this.formatAllColumnsAsterisk(node);\n      case NodeType.literal:\n        return this.formatLiteral(node);\n      case NodeType.identifier:\n        return this.formatIdentifier(node);\n      case NodeType.parameter:\n        return this.formatParameter(node);\n      case NodeType.operator:\n        return this.formatOperator(node);\n      case NodeType.comma:\n        return this.formatComma(node);\n      case NodeType.line_comment:\n        return this.formatLineComment(node);\n      case NodeType.block_comment:\n        return this.formatBlockComment(node);\n      case NodeType.keyword:\n        return this.formatKeywordNode(node);\n    }\n  }\n\n  private formatFunctionCall(node: FunctionCallNode) {\n    this.layout.add(this.showKw(node.name));\n    this.formatParenthesis(node.parenthesis);\n  }\n\n  private formatArraySubscript({ array, parenthesis }: ArraySubscriptNode) {\n    this.layout.add(array.type === NodeType.keyword ? this.showKw(array) : array.text);\n    this.formatParenthesis(parenthesis);\n  }\n\n  private formatPropertyAccess({ object, property }: PropertyAccessNode) {\n    this.formatNode(object);\n    this.layout.add(WS.NO_SPACE, '.');\n    this.formatNode(property);\n  }\n\n  private formatParenthesis(node: ParenthesisNode) {\n    const inlineLayout = this.formatInlineExpression(node.children);\n\n    if (inlineLayout) {\n      this.layout.add(node.openParen);\n      this.layout.add(...inlineLayout.getLayoutItems());\n      this.layout.add(WS.NO_SPACE, node.closeParen, WS.SPACE);\n    } else {\n      this.layout.add(node.openParen, WS.NEWLINE);\n\n      if (isTabularStyle(this.cfg)) {\n        this.layout.add(WS.INDENT);\n        this.layout = this.formatSubExpression(node.children);\n      } else {\n        this.layout.indentation.increaseBlockLevel();\n        this.layout.add(WS.INDENT);\n        this.layout = this.formatSubExpression(node.children);\n        this.layout.indentation.decreaseBlockLevel();\n      }\n\n      this.layout.add(WS.NEWLINE, WS.INDENT, node.closeParen, WS.SPACE);\n    }\n  }\n\n  private formatBetweenPredicate(node: BetweenPredicateNode) {\n    this.layout.add(this.showKw(node.between), WS.SPACE);\n    this.layout = this.formatSubExpression(node.expr1);\n    this.layout.add(WS.NO_SPACE, WS.SPACE, this.showNonTabularKw(node.and), WS.SPACE);\n    this.layout = this.formatSubExpression(node.expr2);\n    this.layout.add(WS.SPACE);\n  }\n\n  private formatClause(node: ClauseNode) {\n    if (isTabularStyle(this.cfg)) {\n      this.layout.add(WS.NEWLINE, WS.INDENT, this.showKw(node.name), WS.SPACE);\n    } else {\n      this.layout.add(WS.NEWLINE, WS.INDENT, this.showKw(node.name), WS.NEWLINE);\n    }\n    this.layout.indentation.increaseTopLevel();\n\n    if (!isTabularStyle(this.cfg)) {\n      this.layout.add(WS.INDENT);\n    }\n    this.layout = this.formatSubExpression(node.children);\n\n    this.layout.indentation.decreaseTopLevel();\n  }\n\n  private formatSetOperation(node: SetOperationNode) {\n    this.layout.add(WS.NEWLINE, WS.INDENT, this.showKw(node.name), WS.NEWLINE);\n    this.layout.add(WS.INDENT);\n    this.layout = this.formatSubExpression(node.children);\n  }\n\n  private formatLimitClause(node: LimitClauseNode) {\n    this.layout.add(WS.NEWLINE, WS.INDENT, this.showKw(node.name));\n    this.layout.indentation.increaseTopLevel();\n\n    if (isTabularStyle(this.cfg)) {\n      this.layout.add(WS.SPACE);\n    } else {\n      this.layout.add(WS.NEWLINE, WS.INDENT);\n    }\n\n    if (node.offset) {\n      this.layout = this.formatSubExpression(node.offset);\n      this.layout.add(WS.NO_SPACE, ',', WS.SPACE);\n      this.layout = this.formatSubExpression(node.count);\n    } else {\n      this.layout = this.formatSubExpression(node.count);\n    }\n    this.layout.indentation.decreaseTopLevel();\n  }\n\n  private formatAllColumnsAsterisk(_node: AllColumnsAsteriskNode) {\n    this.layout.add('*', WS.SPACE);\n  }\n\n  private formatLiteral(node: LiteralNode) {\n    this.layout.add(node.text, WS.SPACE);\n  }\n\n  private formatIdentifier(node: IdentifierNode) {\n    this.layout.add(node.text, WS.SPACE);\n  }\n\n  private formatParameter(node: ParameterNode) {\n    this.layout.add(this.params.get(node), WS.SPACE);\n  }\n\n  private formatOperator({ text }: OperatorNode) {\n    // special operator\n    if (text === ':') {\n      this.layout.add(WS.NO_SPACE, text, WS.SPACE);\n      return;\n    } else if (text === '::') {\n      this.layout.add(WS.NO_SPACE, text);\n      return;\n    }\n    // special case for PLSQL @ dblink syntax\n    else if (text === '@' && this.cfg.language === 'plsql') {\n      this.layout.add(WS.NO_SPACE, text);\n      return;\n    }\n\n    // other operators\n    if (this.cfg.denseOperators) {\n      this.layout.add(WS.NO_SPACE, text);\n    } else {\n      this.layout.add(text, WS.SPACE);\n    }\n  }\n\n  private formatComma(_node: CommaNode) {\n    if (!this.inline) {\n      this.layout.add(WS.NO_SPACE, ',', WS.NEWLINE, WS.INDENT);\n    } else {\n      this.layout.add(WS.NO_SPACE, ',', WS.SPACE);\n    }\n  }\n\n  private formatLineComment(node: LineCommentNode) {\n    if (/\\n/.test(node.precedingWhitespace || '')) {\n      this.layout.add(WS.NEWLINE, WS.INDENT, node.text, WS.MANDATORY_NEWLINE, WS.INDENT);\n    } else {\n      this.layout.add(WS.NO_NEWLINE, WS.SPACE, node.text, WS.MANDATORY_NEWLINE, WS.INDENT);\n    }\n  }\n\n  private formatBlockComment(node: BlockCommentNode) {\n    this.splitBlockComment(node.text).forEach(line => {\n      this.layout.add(WS.NEWLINE, WS.INDENT, line);\n    });\n    this.layout.add(WS.NEWLINE, WS.INDENT);\n  }\n\n  // Breaks up block comment to multiple lines.\n  // For example this comment (dots representing leading whitespace):\n  //\n  //   ..../**\n  //   .....* Some description here\n  //   .....* and here too\n  //   .....*/\n  //\n  // gets broken to this array (note the leading single spaces):\n  //\n  //   [ '/**',\n  //     '.* Some description here',\n  //     '.* and here too',\n  //     '.*/' ]\n  //\n  private splitBlockComment(comment: string): string[] {\n    return comment.split(/\\n/).map(line => {\n      if (/^\\s*\\*/.test(line)) {\n        return ' ' + line.replace(/^\\s*/, '');\n      } else {\n        return line.replace(/^\\s*/, '');\n      }\n    });\n  }\n\n  private formatSubExpression(nodes: AstNode[]): Layout {\n    return new ExpressionFormatter({\n      cfg: this.cfg,\n      params: this.params,\n      layout: this.layout,\n      inline: this.inline,\n    }).format(nodes);\n  }\n\n  private formatInlineExpression(nodes: AstNode[]): Layout | undefined {\n    const oldParamIndex = this.params.getPositionalParameterIndex();\n    try {\n      return new ExpressionFormatter({\n        cfg: this.cfg,\n        params: this.params,\n        layout: new InlineLayout(this.cfg.expressionWidth),\n        inline: true,\n      }).format(nodes);\n    } catch (e) {\n      if (e instanceof InlineLayoutError) {\n        // While formatting, some of the positional parameters might have\n        // been consumed, which increased the current parameter index.\n        // We reset the index to an earlier state, so we can run the\n        // formatting again and re-consume these parameters in non-inline mode.\n        this.params.setPositionalParameterIndex(oldParamIndex);\n        return undefined;\n      } else {\n        // forward all unexpected errors\n        throw e;\n      }\n    }\n  }\n\n  private formatKeywordNode(node: KeywordNode): void {\n    switch (node.tokenType) {\n      case TokenType.RESERVED_JOIN:\n        return this.formatJoin(node);\n      case TokenType.RESERVED_DEPENDENT_CLAUSE:\n        return this.formatDependentClause(node);\n      case TokenType.AND:\n      case TokenType.OR:\n      case TokenType.XOR:\n        return this.formatLogicalOperator(node);\n      case TokenType.RESERVED_KEYWORD:\n      case TokenType.RESERVED_FUNCTION_NAME:\n      case TokenType.RESERVED_PHRASE:\n        return this.formatKeyword(node);\n      case TokenType.CASE:\n        return this.formatCaseStart(node);\n      case TokenType.END:\n        return this.formatCaseEnd(node);\n      default:\n        throw new Error(`Unexpected token type: ${node.tokenType}`);\n    }\n  }\n\n  private formatJoin(node: KeywordNode) {\n    if (isTabularStyle(this.cfg)) {\n      // in tabular style JOINs are at the same level as clauses\n      this.layout.indentation.decreaseTopLevel();\n      this.layout.add(WS.NEWLINE, WS.INDENT, this.showKw(node), WS.SPACE);\n      this.layout.indentation.increaseTopLevel();\n    } else {\n      this.layout.add(WS.NEWLINE, WS.INDENT, this.showKw(node), WS.SPACE);\n    }\n  }\n\n  private formatKeyword(node: KeywordNode) {\n    this.layout.add(this.showKw(node), WS.SPACE);\n  }\n\n  private formatDependentClause(node: KeywordNode) {\n    this.layout.add(WS.NEWLINE, WS.INDENT, this.showKw(node), WS.SPACE);\n  }\n\n  private formatLogicalOperator(node: KeywordNode) {\n    if (this.cfg.logicalOperatorNewline === 'before') {\n      if (isTabularStyle(this.cfg)) {\n        // In tabular style AND/OR is placed on the same level as clauses\n        this.layout.indentation.decreaseTopLevel();\n        this.layout.add(WS.NEWLINE, WS.INDENT, this.showKw(node), WS.SPACE);\n        this.layout.indentation.increaseTopLevel();\n      } else {\n        this.layout.add(WS.NEWLINE, WS.INDENT, this.showKw(node), WS.SPACE);\n      }\n    } else {\n      this.layout.add(this.showKw(node), WS.NEWLINE, WS.INDENT);\n    }\n  }\n\n  private formatCaseStart(node: KeywordNode) {\n    this.layout.indentation.increaseBlockLevel();\n    this.layout.add(this.showKw(node), WS.NEWLINE, WS.INDENT);\n  }\n\n  private formatCaseEnd(node: KeywordNode) {\n    this.formatMultilineBlockEnd(node);\n  }\n\n  private formatMultilineBlockEnd(node: KeywordNode) {\n    this.layout.indentation.decreaseBlockLevel();\n\n    this.layout.add(WS.NEWLINE, WS.INDENT, this.showKw(node), WS.SPACE);\n  }\n\n  private showKw(node: KeywordNode): string {\n    if (isTabularToken(node.tokenType)) {\n      return toTabularFormat(this.showNonTabularKw(node), this.cfg.indentStyle);\n    } else {\n      return this.showNonTabularKw(node);\n    }\n  }\n\n  // Like showKw(), but skips tabular formatting\n  private showNonTabularKw(node: KeywordNode): string {\n    switch (this.cfg.keywordCase) {\n      case 'preserve':\n        return equalizeWhitespace(node.raw);\n      case 'upper':\n        return node.text;\n      case 'lower':\n        return node.text.toLowerCase();\n    }\n  }\n}\n"],"mappings":"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"}