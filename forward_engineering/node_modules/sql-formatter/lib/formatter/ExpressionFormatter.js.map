{"version":3,"file":"ExpressionFormatter.js","names":["ExpressionFormatter","cfg","params","layout","inline","inlineBlock","InlineBlock","expressionWidth","nodes","index","length","formatNode","node","type","NodeType","function_call","formatFunctionCall","array_subscript","formatArraySubscript","parenthesis","formatParenthesis","between_predicate","formatBetweenPredicate","clause","formatClause","set_operation","formatSetOperation","limit_clause","formatLimitClause","all_columns_asterisk","formatAllColumnsAsterisk","literal","formatLiteral","identifier","formatIdentifier","parameter","formatParameter","operator","formatOperator","comma","formatComma","line_comment","formatLineComment","block_comment","formatBlockComment","keyword","formatKeywordNode","add","showKw","name","array","text","isInlineBlock","openParen","formatSubExpression","children","WS","NO_SPACE","closeParen","SPACE","NEWLINE","isTabularStyle","INDENT","indentation","increaseBlockLevel","decreaseBlockLevel","between","expr1","showNonTabularKw","and","expr2","increaseTopLevel","decreaseTopLevel","offset","count","_node","get","language","denseOperators","test","precedingWhitespace","MANDATORY_NEWLINE","NO_NEWLINE","splitBlockComment","forEach","line","comment","split","map","replace","format","tokenType","TokenType","RESERVED_JOIN","formatJoin","RESERVED_DEPENDENT_CLAUSE","formatDependentClause","AND","OR","XOR","formatLogicalOperator","RESERVED_KEYWORD","RESERVED_FUNCTION_NAME","RESERVED_PHRASE","formatKeyword","CASE","formatCaseStart","END","formatCaseEnd","Error","logicalOperatorNewline","formatMultilineBlockEnd","isTabularToken","toTabularFormat","indentStyle","keywordCase","equalizeWhitespace","raw","toLowerCase"],"sources":["../../src/formatter/ExpressionFormatter.ts"],"sourcesContent":["import { FormatOptions } from 'src/FormatOptions';\nimport { equalizeWhitespace } from 'src/utils';\n\nimport Params from 'src/formatter/Params';\nimport { isTabularStyle } from 'src/formatter/config';\nimport { TokenType } from 'src/lexer/token';\nimport {\n  AllColumnsAsteriskNode,\n  ArraySubscriptNode,\n  AstNode,\n  BetweenPredicateNode,\n  SetOperationNode,\n  ClauseNode,\n  FunctionCallNode,\n  LimitClauseNode,\n  NodeType,\n  ParenthesisNode,\n  LiteralNode,\n  IdentifierNode,\n  ParameterNode,\n  OperatorNode,\n  LineCommentNode,\n  BlockCommentNode,\n  CommaNode,\n  KeywordNode,\n} from 'src/parser/ast';\n\nimport InlineBlock from './InlineBlock';\nimport Layout, { WS } from './Layout';\nimport toTabularFormat, { isTabularToken } from './tabularStyle';\n\ninterface ExpressionFormatterParams {\n  cfg: FormatOptions;\n  params: Params;\n  layout: Layout;\n  inline?: boolean;\n}\n\n/** Formats a generic SQL expression */\nexport default class ExpressionFormatter {\n  private cfg: FormatOptions;\n  private inlineBlock: InlineBlock;\n  private params: Params;\n  private layout: Layout;\n\n  private inline = false;\n  private nodes: AstNode[] = [];\n  private index = -1;\n\n  constructor({ cfg, params, layout, inline = false }: ExpressionFormatterParams) {\n    this.cfg = cfg;\n    this.inline = inline;\n    this.inlineBlock = new InlineBlock(this.cfg.expressionWidth);\n    this.params = params;\n    this.layout = layout;\n  }\n\n  public format(nodes: AstNode[]): Layout {\n    this.nodes = nodes;\n\n    for (this.index = 0; this.index < this.nodes.length; this.index++) {\n      this.formatNode(this.nodes[this.index]);\n    }\n    return this.layout;\n  }\n\n  private formatNode(node: AstNode) {\n    switch (node.type) {\n      case NodeType.function_call:\n        return this.formatFunctionCall(node);\n      case NodeType.array_subscript:\n        return this.formatArraySubscript(node);\n      case NodeType.parenthesis:\n        return this.formatParenthesis(node);\n      case NodeType.between_predicate:\n        return this.formatBetweenPredicate(node);\n      case NodeType.clause:\n        return this.formatClause(node);\n      case NodeType.set_operation:\n        return this.formatSetOperation(node);\n      case NodeType.limit_clause:\n        return this.formatLimitClause(node);\n      case NodeType.all_columns_asterisk:\n        return this.formatAllColumnsAsterisk(node);\n      case NodeType.literal:\n        return this.formatLiteral(node);\n      case NodeType.identifier:\n        return this.formatIdentifier(node);\n      case NodeType.parameter:\n        return this.formatParameter(node);\n      case NodeType.operator:\n        return this.formatOperator(node);\n      case NodeType.comma:\n        return this.formatComma(node);\n      case NodeType.line_comment:\n        return this.formatLineComment(node);\n      case NodeType.block_comment:\n        return this.formatBlockComment(node);\n      case NodeType.keyword:\n        return this.formatKeywordNode(node);\n    }\n  }\n\n  private formatFunctionCall(node: FunctionCallNode) {\n    this.layout.add(this.showKw(node.name));\n    this.formatParenthesis(node.parenthesis);\n  }\n\n  private formatArraySubscript({ array, parenthesis }: ArraySubscriptNode) {\n    this.layout.add(array.type === NodeType.keyword ? this.showKw(array) : array.text);\n    this.formatParenthesis(parenthesis);\n  }\n\n  private formatParenthesis(node: ParenthesisNode) {\n    const inline = this.inlineBlock.isInlineBlock(node);\n\n    if (inline) {\n      this.layout.add(node.openParen);\n      this.layout = this.formatSubExpression(node.children, inline);\n      this.layout.add(WS.NO_SPACE, node.closeParen, WS.SPACE);\n    } else {\n      this.layout.add(node.openParen, WS.NEWLINE);\n\n      if (isTabularStyle(this.cfg)) {\n        this.layout.add(WS.INDENT);\n        this.layout = this.formatSubExpression(node.children, inline);\n      } else {\n        this.layout.indentation.increaseBlockLevel();\n        this.layout.add(WS.INDENT);\n        this.layout = this.formatSubExpression(node.children, inline);\n        this.layout.indentation.decreaseBlockLevel();\n      }\n\n      this.layout.add(WS.NEWLINE, WS.INDENT, node.closeParen, WS.SPACE);\n    }\n  }\n\n  private formatBetweenPredicate(node: BetweenPredicateNode) {\n    this.layout.add(this.showKw(node.between), WS.SPACE);\n    this.layout = this.formatSubExpression(node.expr1);\n    this.layout.add(WS.NO_SPACE, WS.SPACE, this.showNonTabularKw(node.and), WS.SPACE);\n    this.layout = this.formatSubExpression(node.expr2);\n    this.layout.add(WS.SPACE);\n  }\n\n  private formatClause(node: ClauseNode) {\n    if (isTabularStyle(this.cfg)) {\n      this.layout.add(WS.NEWLINE, WS.INDENT, this.showKw(node.name), WS.SPACE);\n    } else {\n      this.layout.add(WS.NEWLINE, WS.INDENT, this.showKw(node.name), WS.NEWLINE);\n    }\n    this.layout.indentation.increaseTopLevel();\n\n    if (!isTabularStyle(this.cfg)) {\n      this.layout.add(WS.INDENT);\n    }\n    this.layout = this.formatSubExpression(node.children);\n\n    this.layout.indentation.decreaseTopLevel();\n  }\n\n  private formatSetOperation(node: SetOperationNode) {\n    this.layout.add(WS.NEWLINE, WS.INDENT, this.showKw(node.name), WS.NEWLINE);\n\n    this.layout.add(WS.INDENT);\n    this.layout = this.formatSubExpression(node.children);\n  }\n\n  private formatLimitClause(node: LimitClauseNode) {\n    this.layout.add(WS.NEWLINE, WS.INDENT, this.showKw(node.name));\n    this.layout.indentation.increaseTopLevel();\n\n    if (isTabularStyle(this.cfg)) {\n      this.layout.add(WS.SPACE);\n    } else {\n      this.layout.add(WS.NEWLINE, WS.INDENT);\n    }\n\n    if (node.offset) {\n      this.layout = this.formatSubExpression(node.offset);\n      this.layout.add(WS.NO_SPACE, ',', WS.SPACE);\n      this.layout = this.formatSubExpression(node.count);\n    } else {\n      this.layout = this.formatSubExpression(node.count);\n    }\n    this.layout.indentation.decreaseTopLevel();\n  }\n\n  private formatAllColumnsAsterisk(_node: AllColumnsAsteriskNode) {\n    this.layout.add('*', WS.SPACE);\n  }\n\n  private formatLiteral(node: LiteralNode) {\n    this.layout.add(node.text, WS.SPACE);\n  }\n\n  private formatIdentifier(node: IdentifierNode) {\n    this.layout.add(node.text, WS.SPACE);\n  }\n\n  private formatParameter(node: ParameterNode) {\n    this.layout.add(this.params.get(node), WS.SPACE);\n  }\n\n  private formatOperator({ text }: OperatorNode) {\n    // special operator\n    if (text === ':') {\n      this.layout.add(WS.NO_SPACE, text, WS.SPACE);\n      return;\n    } else if (text === '.' || text === '::') {\n      this.layout.add(WS.NO_SPACE, text);\n      return;\n    }\n    // special case for PLSQL @ dblink syntax\n    else if (text === '@' && this.cfg.language === 'plsql') {\n      this.layout.add(WS.NO_SPACE, text);\n      return;\n    }\n\n    // other operators\n    if (this.cfg.denseOperators) {\n      this.layout.add(WS.NO_SPACE, text);\n    } else {\n      this.layout.add(text, WS.SPACE);\n    }\n  }\n\n  private formatComma(_node: CommaNode) {\n    if (!this.inline) {\n      this.layout.add(WS.NO_SPACE, ',', WS.NEWLINE, WS.INDENT);\n    } else {\n      this.layout.add(WS.NO_SPACE, ',', WS.SPACE);\n    }\n  }\n\n  private formatLineComment(node: LineCommentNode) {\n    if (/\\n/.test(node.precedingWhitespace || '')) {\n      this.layout.add(WS.NEWLINE, WS.INDENT, node.text, WS.MANDATORY_NEWLINE, WS.INDENT);\n    } else {\n      this.layout.add(WS.NO_NEWLINE, WS.SPACE, node.text, WS.MANDATORY_NEWLINE, WS.INDENT);\n    }\n  }\n\n  private formatBlockComment(node: BlockCommentNode) {\n    this.splitBlockComment(node.text).forEach(line => {\n      this.layout.add(WS.NEWLINE, WS.INDENT, line);\n    });\n    this.layout.add(WS.NEWLINE, WS.INDENT);\n  }\n\n  // Breaks up block comment to multiple lines.\n  // For example this comment (dots representing leading whitespace):\n  //\n  //   ..../**\n  //   .....* Some description here\n  //   .....* and here too\n  //   .....*/\n  //\n  // gets broken to this array (note the leading single spaces):\n  //\n  //   [ '/**',\n  //     '.* Some description here',\n  //     '.* and here too',\n  //     '.*/' ]\n  //\n  private splitBlockComment(comment: string): string[] {\n    return comment.split(/\\n/).map(line => {\n      if (/^\\s*\\*/.test(line)) {\n        return ' ' + line.replace(/^\\s*/, '');\n      } else {\n        return line.replace(/^\\s*/, '');\n      }\n    });\n  }\n\n  private formatSubExpression(nodes: AstNode[], inline = this.inline): Layout {\n    return new ExpressionFormatter({\n      cfg: this.cfg,\n      params: this.params,\n      layout: this.layout,\n      inline,\n    }).format(nodes);\n  }\n\n  private formatKeywordNode(node: KeywordNode): void {\n    switch (node.tokenType) {\n      case TokenType.RESERVED_JOIN:\n        return this.formatJoin(node);\n      case TokenType.RESERVED_DEPENDENT_CLAUSE:\n        return this.formatDependentClause(node);\n      case TokenType.AND:\n      case TokenType.OR:\n      case TokenType.XOR:\n        return this.formatLogicalOperator(node);\n      case TokenType.RESERVED_KEYWORD:\n      case TokenType.RESERVED_FUNCTION_NAME:\n      case TokenType.RESERVED_PHRASE:\n        return this.formatKeyword(node);\n      case TokenType.CASE:\n        return this.formatCaseStart(node);\n      case TokenType.END:\n        return this.formatCaseEnd(node);\n      default:\n        throw new Error(`Unexpected token type: ${node.tokenType}`);\n    }\n  }\n\n  private formatJoin(node: KeywordNode) {\n    if (isTabularStyle(this.cfg)) {\n      // in tabular style JOINs are at the same level as clauses\n      this.layout.indentation.decreaseTopLevel();\n      this.layout.add(WS.NEWLINE, WS.INDENT, this.showKw(node), WS.SPACE);\n      this.layout.indentation.increaseTopLevel();\n    } else {\n      this.layout.add(WS.NEWLINE, WS.INDENT, this.showKw(node), WS.SPACE);\n    }\n  }\n\n  private formatKeyword(node: KeywordNode) {\n    this.layout.add(this.showKw(node), WS.SPACE);\n  }\n\n  private formatDependentClause(node: KeywordNode) {\n    this.layout.add(WS.NEWLINE, WS.INDENT, this.showKw(node), WS.SPACE);\n  }\n\n  private formatLogicalOperator(node: KeywordNode) {\n    if (this.cfg.logicalOperatorNewline === 'before') {\n      if (isTabularStyle(this.cfg)) {\n        // In tabular style AND/OR is placed on the same level as clauses\n        this.layout.indentation.decreaseTopLevel();\n        this.layout.add(WS.NEWLINE, WS.INDENT, this.showKw(node), WS.SPACE);\n        this.layout.indentation.increaseTopLevel();\n      } else {\n        this.layout.add(WS.NEWLINE, WS.INDENT, this.showKw(node), WS.SPACE);\n      }\n    } else {\n      this.layout.add(this.showKw(node), WS.NEWLINE, WS.INDENT);\n    }\n  }\n\n  private formatCaseStart(node: KeywordNode) {\n    this.layout.indentation.increaseBlockLevel();\n    this.layout.add(this.showKw(node), WS.NEWLINE, WS.INDENT);\n  }\n\n  private formatCaseEnd(node: KeywordNode) {\n    this.formatMultilineBlockEnd(node);\n  }\n\n  private formatMultilineBlockEnd(node: KeywordNode) {\n    this.layout.indentation.decreaseBlockLevel();\n\n    this.layout.add(WS.NEWLINE, WS.INDENT, this.showKw(node), WS.SPACE);\n  }\n\n  private showKw(node: KeywordNode): string {\n    if (isTabularToken(node.tokenType)) {\n      return toTabularFormat(this.showNonTabularKw(node), this.cfg.indentStyle);\n    } else {\n      return this.showNonTabularKw(node);\n    }\n  }\n\n  // Like showKw(), but skips tabular formatting\n  private showNonTabularKw(node: KeywordNode): string {\n    switch (this.cfg.keywordCase) {\n      case 'preserve':\n        return equalizeWhitespace(node.raw);\n      case 'upper':\n        return node.text;\n      case 'lower':\n        return node.text.toLowerCase();\n    }\n  }\n}\n"],"mappings":"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"}