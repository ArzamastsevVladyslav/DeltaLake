{"version":3,"file":"InlineBlock.js","names":["InlineBlock","expressionWidth","parenthesis","inlineParenthesisWidth","inlineWidth","children","nodes","length","node","type","NodeType","function_call","nameToken","text","array_subscript","arrayToken","between_predicate","betweenWidth","clause","limit_clause","set_operation","Infinity","all_columns_asterisk","token","isForbiddenToken","betweenToken","expr1","andToken","expr2","isLogicalOperator","TokenType","LINE_COMMENT","BLOCK_COMMENT","CASE"],"sources":["../../src/formatter/InlineBlock.ts"],"sourcesContent":["import { type Token, TokenType, isLogicalOperator } from 'src/lexer/token';\nimport { AstNode, BetweenPredicate, NodeType, Parenthesis } from 'src/parser/ast';\n\n/**\n * Bookkeeper for inline blocks.\n *\n * Inline blocks are parenthesised expressions that are shorter than INLINE_MAX_LENGTH.\n * These blocks are formatted on a single line, unlike longer parenthesised\n * expressions where open-parenthesis causes newline and increase of indentation.\n */\nexport default class InlineBlock {\n  constructor(private expressionWidth: number) {}\n\n  /**\n   * Check if this should be an inline parentheses block\n   * Examples are \"NOW()\", \"COUNT(*)\", \"int(10)\", key(`somecolumn`), DECIMAL(7,2)\n   */\n  public isInlineBlock(parenthesis: Parenthesis): boolean {\n    return this.inlineParenthesisWidth(parenthesis) <= this.expressionWidth;\n  }\n\n  private inlineParenthesisWidth(parenthesis: Parenthesis): number {\n    // +2 for the two parenthesis\n    return this.inlineWidth(parenthesis.children) + 2;\n  }\n\n  private inlineWidth(nodes: AstNode[]): number {\n    let length = 0;\n\n    for (const node of nodes) {\n      switch (node.type) {\n        case NodeType.function_call:\n          length += node.nameToken.text.length + this.inlineParenthesisWidth(node.parenthesis);\n          break;\n        case NodeType.array_subscript:\n          length += node.arrayToken.text.length + this.inlineParenthesisWidth(node.parenthesis);\n          break;\n        case NodeType.parenthesis:\n          length += this.inlineParenthesisWidth(node);\n          break;\n        case NodeType.between_predicate:\n          length += this.betweenWidth(node);\n          break;\n        case NodeType.clause:\n        case NodeType.limit_clause:\n        case NodeType.set_operation:\n          return Infinity;\n        case NodeType.all_columns_asterisk:\n          length += 1;\n          break;\n        case NodeType.token:\n          length += node.token.text.length;\n          if (this.isForbiddenToken(node.token)) {\n            return Infinity;\n          }\n          break;\n      }\n\n      // Overran max length\n      if (length > this.expressionWidth) {\n        return length;\n      }\n    }\n    return length;\n  }\n\n  private betweenWidth(node: BetweenPredicate): number {\n    return (\n      node.betweenToken.text.length +\n      this.inlineWidth(node.expr1) +\n      node.andToken.text.length +\n      this.inlineWidth(node.expr2)\n    );\n  }\n\n  // Reserved words that cause newlines, comments and semicolons\n  // are not allowed inside inline parentheses block\n  private isForbiddenToken(token: Token) {\n    return (\n      isLogicalOperator(token) ||\n      token.type === TokenType.LINE_COMMENT ||\n      token.type === TokenType.BLOCK_COMMENT ||\n      token.type === TokenType.CASE // CASE cannot have inline blocks\n    );\n  }\n}\n"],"mappings":";;;;;;;AAAA;;AACA;;;;;;;;;;;;;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;IACqBA,W;EACnB,qBAAoBC,eAApB,EAA6C;IAAA;;IAAA,KAAzBA,eAAyB,GAAzBA,eAAyB;EAAE;EAE/C;AACF;AACA;AACA;;;;;WACE,uBAAqBC,WAArB,EAAwD;MACtD,OAAO,KAAKC,sBAAL,CAA4BD,WAA5B,KAA4C,KAAKD,eAAxD;IACD;;;WAED,gCAA+BC,WAA/B,EAAiE;MAC/D;MACA,OAAO,KAAKE,WAAL,CAAiBF,WAAW,CAACG,QAA7B,IAAyC,CAAhD;IACD;;;WAED,qBAAoBC,KAApB,EAA8C;MAC5C,IAAIC,MAAM,GAAG,CAAb;;MAD4C,2CAGzBD,KAHyB;MAAA;;MAAA;QAG5C,oDAA0B;UAAA,IAAfE,IAAe;;UACxB,QAAQA,IAAI,CAACC,IAAb;YACE,KAAKC,aAAA,CAASC,aAAd;cACEJ,MAAM,IAAIC,IAAI,CAACI,SAAL,CAAeC,IAAf,CAAoBN,MAApB,GAA6B,KAAKJ,sBAAL,CAA4BK,IAAI,CAACN,WAAjC,CAAvC;cACA;;YACF,KAAKQ,aAAA,CAASI,eAAd;cACEP,MAAM,IAAIC,IAAI,CAACO,UAAL,CAAgBF,IAAhB,CAAqBN,MAArB,GAA8B,KAAKJ,sBAAL,CAA4BK,IAAI,CAACN,WAAjC,CAAxC;cACA;;YACF,KAAKQ,aAAA,CAASR,WAAd;cACEK,MAAM,IAAI,KAAKJ,sBAAL,CAA4BK,IAA5B,CAAV;cACA;;YACF,KAAKE,aAAA,CAASM,iBAAd;cACET,MAAM,IAAI,KAAKU,YAAL,CAAkBT,IAAlB,CAAV;cACA;;YACF,KAAKE,aAAA,CAASQ,MAAd;YACA,KAAKR,aAAA,CAASS,YAAd;YACA,KAAKT,aAAA,CAASU,aAAd;cACE,OAAOC,QAAP;;YACF,KAAKX,aAAA,CAASY,oBAAd;cACEf,MAAM,IAAI,CAAV;cACA;;YACF,KAAKG,aAAA,CAASa,KAAd;cACEhB,MAAM,IAAIC,IAAI,CAACe,KAAL,CAAWV,IAAX,CAAgBN,MAA1B;;cACA,IAAI,KAAKiB,gBAAL,CAAsBhB,IAAI,CAACe,KAA3B,CAAJ,EAAuC;gBACrC,OAAOF,QAAP;cACD;;cACD;UAzBJ,CADwB,CA6BxB;;;UACA,IAAId,MAAM,GAAG,KAAKN,eAAlB,EAAmC;YACjC,OAAOM,MAAP;UACD;QACF;MApC2C;QAAA;MAAA;QAAA;MAAA;;MAqC5C,OAAOA,MAAP;IACD;;;WAED,sBAAqBC,IAArB,EAAqD;MACnD,OACEA,IAAI,CAACiB,YAAL,CAAkBZ,IAAlB,CAAuBN,MAAvB,GACA,KAAKH,WAAL,CAAiBI,IAAI,CAACkB,KAAtB,CADA,GAEAlB,IAAI,CAACmB,QAAL,CAAcd,IAAd,CAAmBN,MAFnB,GAGA,KAAKH,WAAL,CAAiBI,IAAI,CAACoB,KAAtB,CAJF;IAMD,C,CAED;IACA;;;;WACA,0BAAyBL,KAAzB,EAAuC;MACrC,OACE,IAAAM,wBAAA,EAAkBN,KAAlB,KACAA,KAAK,CAACd,IAAN,KAAeqB,gBAAA,CAAUC,YADzB,IAEAR,KAAK,CAACd,IAAN,KAAeqB,gBAAA,CAAUE,aAFzB,IAGAT,KAAK,CAACd,IAAN,KAAeqB,gBAAA,CAAUG,IAJ3B,CAIgC;MAJhC;IAMD"}