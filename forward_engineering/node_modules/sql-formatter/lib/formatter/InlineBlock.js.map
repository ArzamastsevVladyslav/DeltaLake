{"version":3,"file":"InlineBlock.js","names":["InlineBlock","expressionWidth","parenthesis","inlineParenthesisWidth","inlineWidth","children","nodes","length","node","type","NodeType","function_call","name","text","array_subscript","array","between_predicate","betweenWidth","clause","limit_clause","set_operation","line_comment","block_comment","Infinity","all_columns_asterisk","comma","literal","identifier","parameter","operator","keyword","isForbiddenKeyword","between","expr1","and","expr2","isLogicalOperator","tokenType","TokenType","CASE"],"sources":["../../src/formatter/InlineBlock.ts"],"sourcesContent":["import { TokenType, isLogicalOperator } from 'src/lexer/token';\nimport {\n  AstNode,\n  BetweenPredicateNode,\n  KeywordNode,\n  NodeType,\n  ParenthesisNode,\n} from 'src/parser/ast';\n\n/**\n * Bookkeeper for inline blocks.\n *\n * Inline blocks are parenthesised expressions that are shorter than INLINE_MAX_LENGTH.\n * These blocks are formatted on a single line, unlike longer parenthesised\n * expressions where open-parenthesis causes newline and increase of indentation.\n */\nexport default class InlineBlock {\n  constructor(private expressionWidth: number) {}\n\n  /**\n   * Check if this should be an inline parentheses block\n   * Examples are \"NOW()\", \"COUNT(*)\", \"int(10)\", key(`somecolumn`), DECIMAL(7,2)\n   */\n  public isInlineBlock(parenthesis: ParenthesisNode): boolean {\n    return this.inlineParenthesisWidth(parenthesis) <= this.expressionWidth;\n  }\n\n  private inlineParenthesisWidth(parenthesis: ParenthesisNode): number {\n    // +2 for the two parenthesis\n    return this.inlineWidth(parenthesis.children) + 2;\n  }\n\n  private inlineWidth(nodes: AstNode[]): number {\n    let length = 0;\n\n    for (const node of nodes) {\n      switch (node.type) {\n        case NodeType.function_call:\n          length += node.name.text.length + this.inlineParenthesisWidth(node.parenthesis);\n          break;\n        case NodeType.array_subscript:\n          length += node.array.text.length + this.inlineParenthesisWidth(node.parenthesis);\n          break;\n        case NodeType.parenthesis:\n          length += this.inlineParenthesisWidth(node);\n          break;\n        case NodeType.between_predicate:\n          length += this.betweenWidth(node);\n          break;\n        case NodeType.clause:\n        case NodeType.limit_clause:\n        case NodeType.set_operation:\n        case NodeType.line_comment:\n        case NodeType.block_comment:\n          return Infinity;\n        case NodeType.all_columns_asterisk:\n        case NodeType.comma:\n          length += 1;\n          break;\n        case NodeType.literal:\n        case NodeType.identifier:\n        case NodeType.parameter:\n        case NodeType.operator:\n          length += node.text.length;\n          break;\n        case NodeType.keyword:\n          length += node.text.length;\n          if (this.isForbiddenKeyword(node)) {\n            return Infinity;\n          }\n          break;\n      }\n\n      // Overran max length\n      if (length > this.expressionWidth) {\n        return length;\n      }\n    }\n    return length;\n  }\n\n  private betweenWidth(node: BetweenPredicateNode): number {\n    return (\n      node.between.text.length +\n      this.inlineWidth(node.expr1) +\n      node.and.text.length +\n      this.inlineWidth(node.expr2)\n    );\n  }\n\n  // Reserved words that cause newlines are not allowed inside inline parentheses block\n  private isForbiddenKeyword(node: KeywordNode) {\n    return isLogicalOperator(node.tokenType) || node.tokenType === TokenType.CASE;\n  }\n}\n"],"mappings":";;;;;;;AAAA;;AACA;;;;;;;;;;;;;;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;IACqBA,W;EACnB,qBAAoBC,eAApB,EAA6C;IAAA;;IAAA,KAAzBA,eAAyB,GAAzBA,eAAyB;EAAE;EAE/C;AACF;AACA;AACA;;;;;WACE,uBAAqBC,WAArB,EAA4D;MAC1D,OAAO,KAAKC,sBAAL,CAA4BD,WAA5B,KAA4C,KAAKD,eAAxD;IACD;;;WAED,gCAA+BC,WAA/B,EAAqE;MACnE;MACA,OAAO,KAAKE,WAAL,CAAiBF,WAAW,CAACG,QAA7B,IAAyC,CAAhD;IACD;;;WAED,qBAAoBC,KAApB,EAA8C;MAC5C,IAAIC,MAAM,GAAG,CAAb;;MAD4C,2CAGzBD,KAHyB;MAAA;;MAAA;QAG5C,oDAA0B;UAAA,IAAfE,IAAe;;UACxB,QAAQA,IAAI,CAACC,IAAb;YACE,KAAKC,aAAA,CAASC,aAAd;cACEJ,MAAM,IAAIC,IAAI,CAACI,IAAL,CAAUC,IAAV,CAAeN,MAAf,GAAwB,KAAKJ,sBAAL,CAA4BK,IAAI,CAACN,WAAjC,CAAlC;cACA;;YACF,KAAKQ,aAAA,CAASI,eAAd;cACEP,MAAM,IAAIC,IAAI,CAACO,KAAL,CAAWF,IAAX,CAAgBN,MAAhB,GAAyB,KAAKJ,sBAAL,CAA4BK,IAAI,CAACN,WAAjC,CAAnC;cACA;;YACF,KAAKQ,aAAA,CAASR,WAAd;cACEK,MAAM,IAAI,KAAKJ,sBAAL,CAA4BK,IAA5B,CAAV;cACA;;YACF,KAAKE,aAAA,CAASM,iBAAd;cACET,MAAM,IAAI,KAAKU,YAAL,CAAkBT,IAAlB,CAAV;cACA;;YACF,KAAKE,aAAA,CAASQ,MAAd;YACA,KAAKR,aAAA,CAASS,YAAd;YACA,KAAKT,aAAA,CAASU,aAAd;YACA,KAAKV,aAAA,CAASW,YAAd;YACA,KAAKX,aAAA,CAASY,aAAd;cACE,OAAOC,QAAP;;YACF,KAAKb,aAAA,CAASc,oBAAd;YACA,KAAKd,aAAA,CAASe,KAAd;cACElB,MAAM,IAAI,CAAV;cACA;;YACF,KAAKG,aAAA,CAASgB,OAAd;YACA,KAAKhB,aAAA,CAASiB,UAAd;YACA,KAAKjB,aAAA,CAASkB,SAAd;YACA,KAAKlB,aAAA,CAASmB,QAAd;cACEtB,MAAM,IAAIC,IAAI,CAACK,IAAL,CAAUN,MAApB;cACA;;YACF,KAAKG,aAAA,CAASoB,OAAd;cACEvB,MAAM,IAAIC,IAAI,CAACK,IAAL,CAAUN,MAApB;;cACA,IAAI,KAAKwB,kBAAL,CAAwBvB,IAAxB,CAAJ,EAAmC;gBACjC,OAAOe,QAAP;cACD;;cACD;UAlCJ,CADwB,CAsCxB;;;UACA,IAAIhB,MAAM,GAAG,KAAKN,eAAlB,EAAmC;YACjC,OAAOM,MAAP;UACD;QACF;MA7C2C;QAAA;MAAA;QAAA;MAAA;;MA8C5C,OAAOA,MAAP;IACD;;;WAED,sBAAqBC,IAArB,EAAyD;MACvD,OACEA,IAAI,CAACwB,OAAL,CAAanB,IAAb,CAAkBN,MAAlB,GACA,KAAKH,WAAL,CAAiBI,IAAI,CAACyB,KAAtB,CADA,GAEAzB,IAAI,CAAC0B,GAAL,CAASrB,IAAT,CAAcN,MAFd,GAGA,KAAKH,WAAL,CAAiBI,IAAI,CAAC2B,KAAtB,CAJF;IAMD,C,CAED;;;;WACA,4BAA2B3B,IAA3B,EAA8C;MAC5C,OAAO,IAAA4B,wBAAA,EAAkB5B,IAAI,CAAC6B,SAAvB,KAAqC7B,IAAI,CAAC6B,SAAL,KAAmBC,gBAAA,CAAUC,IAAzE;IACD"}