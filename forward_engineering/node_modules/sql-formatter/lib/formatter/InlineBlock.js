"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _token = require("../lexer/token");

var _ast = require("../parser/ast");

function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

/**
 * Bookkeeper for inline blocks.
 *
 * Inline blocks are parenthesised expressions that are shorter than INLINE_MAX_LENGTH.
 * These blocks are formatted on a single line, unlike longer parenthesised
 * expressions where open-parenthesis causes newline and increase of indentation.
 */
var InlineBlock = /*#__PURE__*/function () {
  function InlineBlock(expressionWidth) {
    _classCallCheck(this, InlineBlock);

    this.expressionWidth = expressionWidth;
  }
  /**
   * Check if this should be an inline parentheses block
   * Examples are "NOW()", "COUNT(*)", "int(10)", key(`somecolumn`), DECIMAL(7,2)
   */


  _createClass(InlineBlock, [{
    key: "isInlineBlock",
    value: function isInlineBlock(parenthesis) {
      return this.inlineParenthesisWidth(parenthesis) <= this.expressionWidth;
    }
  }, {
    key: "inlineParenthesisWidth",
    value: function inlineParenthesisWidth(parenthesis) {
      // +2 for the two parenthesis
      return this.inlineWidth(parenthesis.children) + 2;
    }
  }, {
    key: "inlineWidth",
    value: function inlineWidth(nodes) {
      var length = 0;

      var _iterator = _createForOfIteratorHelper(nodes),
          _step;

      try {
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          var node = _step.value;

          switch (node.type) {
            case _ast.NodeType.function_call:
              length += node.name.text.length + this.inlineParenthesisWidth(node.parenthesis);
              break;

            case _ast.NodeType.array_subscript:
              length += node.array.text.length + this.inlineParenthesisWidth(node.parenthesis);
              break;

            case _ast.NodeType.parenthesis:
              length += this.inlineParenthesisWidth(node);
              break;

            case _ast.NodeType.between_predicate:
              length += this.betweenWidth(node);
              break;

            case _ast.NodeType.clause:
            case _ast.NodeType.limit_clause:
            case _ast.NodeType.set_operation:
            case _ast.NodeType.line_comment:
            case _ast.NodeType.block_comment:
              return Infinity;

            case _ast.NodeType.all_columns_asterisk:
            case _ast.NodeType.comma:
              length += 1;
              break;

            case _ast.NodeType.literal:
            case _ast.NodeType.identifier:
            case _ast.NodeType.parameter:
            case _ast.NodeType.operator:
              length += node.text.length;
              break;

            case _ast.NodeType.keyword:
              length += node.text.length;

              if (this.isForbiddenKeyword(node)) {
                return Infinity;
              }

              break;
          } // Overran max length


          if (length > this.expressionWidth) {
            return length;
          }
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }

      return length;
    }
  }, {
    key: "betweenWidth",
    value: function betweenWidth(node) {
      return node.between.text.length + this.inlineWidth(node.expr1) + node.and.text.length + this.inlineWidth(node.expr2);
    } // Reserved words that cause newlines are not allowed inside inline parentheses block

  }, {
    key: "isForbiddenKeyword",
    value: function isForbiddenKeyword(node) {
      return (0, _token.isLogicalOperator)(node.tokenType) || node.tokenType === _token.TokenType.CASE;
    }
  }]);

  return InlineBlock;
}();

exports["default"] = InlineBlock;
module.exports = exports.default;
//# sourceMappingURL=InlineBlock.js.map