{"version":3,"file":"disambiguateTokens.js","names":["disambiguateTokens","tokens","map","token","i","type","TokenType","RESERVED_FUNCTION_NAME","nextToken","isOpenParen","RESERVED_KEYWORD","IDENTIFIER","isOpenBracket","ARRAY_IDENTIFIER","ARRAY_KEYWORD","t","OPEN_PAREN","text"],"sources":["../../src/lexer/disambiguateTokens.ts"],"sourcesContent":["import { Token, TokenType } from 'src/lexer/token';\n\n/**\n * Ensures that all RESERVED_FUNCTION_NAME tokens are followed by \"(\".\n * If they're not, converts the token to RESERVED_KEYWORD.\n *\n * When IDENTIFIER and RESERVED_KEYWORD token is followed by \"[\"\n * converts it to ARRAY_IDENTIFIER or ARRAY_KEYWORD accordingly.\n *\n * This is needed to avoid ambiguity in parser which expects function names\n * to always be followed by open-paren, and to distinguish between\n * array accessor `foo[1]` and array literal `[1, 2, 3]`.\n */\nexport function disambiguateTokens(tokens: Token[]): Token[] {\n  return tokens.map((token, i) => {\n    if (token.type === TokenType.RESERVED_FUNCTION_NAME) {\n      const nextToken = tokens[i + 1];\n      if (!nextToken || !isOpenParen(nextToken)) {\n        return { ...token, type: TokenType.RESERVED_KEYWORD };\n      }\n    }\n    if (token.type === TokenType.IDENTIFIER) {\n      const nextToken = tokens[i + 1];\n      if (nextToken && isOpenBracket(nextToken)) {\n        return { ...token, type: TokenType.ARRAY_IDENTIFIER };\n      }\n    }\n    if (token.type === TokenType.RESERVED_KEYWORD) {\n      const nextToken = tokens[i + 1];\n      if (nextToken && isOpenBracket(nextToken)) {\n        return { ...token, type: TokenType.ARRAY_KEYWORD };\n      }\n    }\n    return token;\n  });\n}\n\nconst isOpenParen = (t: Token): boolean => t.type === TokenType.OPEN_PAREN && t.text === '(';\n\nconst isOpenBracket = (t: Token): boolean => t.type === TokenType.OPEN_PAREN && t.text === '[';\n"],"mappings":";;;;;;;AAAA;;;;;;;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,SAASA,kBAAT,CAA4BC,MAA5B,EAAsD;EAC3D,OAAOA,MAAM,CAACC,GAAP,CAAW,UAACC,KAAD,EAAQC,CAAR,EAAc;IAC9B,IAAID,KAAK,CAACE,IAAN,KAAeC,gBAAA,CAAUC,sBAA7B,EAAqD;MACnD,IAAMC,SAAS,GAAGP,MAAM,CAACG,CAAC,GAAG,CAAL,CAAxB;;MACA,IAAI,CAACI,SAAD,IAAc,CAACC,WAAW,CAACD,SAAD,CAA9B,EAA2C;QACzC,uCAAYL,KAAZ;UAAmBE,IAAI,EAAEC,gBAAA,CAAUI;QAAnC;MACD;IACF;;IACD,IAAIP,KAAK,CAACE,IAAN,KAAeC,gBAAA,CAAUK,UAA7B,EAAyC;MACvC,IAAMH,UAAS,GAAGP,MAAM,CAACG,CAAC,GAAG,CAAL,CAAxB;;MACA,IAAII,UAAS,IAAII,aAAa,CAACJ,UAAD,CAA9B,EAA2C;QACzC,uCAAYL,KAAZ;UAAmBE,IAAI,EAAEC,gBAAA,CAAUO;QAAnC;MACD;IACF;;IACD,IAAIV,KAAK,CAACE,IAAN,KAAeC,gBAAA,CAAUI,gBAA7B,EAA+C;MAC7C,IAAMF,WAAS,GAAGP,MAAM,CAACG,CAAC,GAAG,CAAL,CAAxB;;MACA,IAAII,WAAS,IAAII,aAAa,CAACJ,WAAD,CAA9B,EAA2C;QACzC,uCAAYL,KAAZ;UAAmBE,IAAI,EAAEC,gBAAA,CAAUQ;QAAnC;MACD;IACF;;IACD,OAAOX,KAAP;EACD,CApBM,CAAP;AAqBD;;AAED,IAAMM,WAAW,GAAG,SAAdA,WAAc,CAACM,CAAD;EAAA,OAAuBA,CAAC,CAACV,IAAF,KAAWC,gBAAA,CAAUU,UAArB,IAAmCD,CAAC,CAACE,IAAF,KAAW,GAArE;AAAA,CAApB;;AAEA,IAAML,aAAa,GAAG,SAAhBA,aAAgB,CAACG,CAAD;EAAA,OAAuBA,CAAC,CAACV,IAAF,KAAWC,gBAAA,CAAUU,UAArB,IAAmCD,CAAC,CAACE,IAAF,KAAW,GAArE;AAAA,CAAtB"}