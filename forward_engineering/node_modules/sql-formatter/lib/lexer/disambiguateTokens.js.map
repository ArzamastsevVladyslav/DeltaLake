{"version":3,"file":"disambiguateTokens.js","names":["disambiguateTokens","tokens","map","dotKeywordToIdent","funcNameToKeyword","identToArrayIdent","keywordToArrayKeyword","token","i","isReserved","type","prevToken","text","TokenType","IDENTIFIER","raw","RESERVED_FUNCTION_NAME","nextToken","isOpenParen","RESERVED_KEYWORD","isOpenBracket","ARRAY_IDENTIFIER","ARRAY_KEYWORD","t","OPEN_PAREN"],"sources":["../../src/lexer/disambiguateTokens.ts"],"sourcesContent":["import { isReserved, Token, TokenType } from 'src/lexer/token';\n\n/**\n * Ensures that no keyword token (RESERVED_*) is preceded by dot (.).\n *\n * Ensures that all RESERVED_FUNCTION_NAME tokens are followed by \"(\".\n * If they're not, converts the token to RESERVED_KEYWORD.\n *\n * When IDENTIFIER and RESERVED_KEYWORD token is followed by \"[\"\n * converts it to ARRAY_IDENTIFIER or ARRAY_KEYWORD accordingly.\n *\n * This is needed to avoid ambiguity in parser which expects function names\n * to always be followed by open-paren, and to distinguish between\n * array accessor `foo[1]` and array literal `[1, 2, 3]`.\n */\nexport function disambiguateTokens(tokens: Token[]): Token[] {\n  return tokens\n    .map(dotKeywordToIdent)\n    .map(funcNameToKeyword)\n    .map(identToArrayIdent)\n    .map(keywordToArrayKeyword);\n}\n\nconst dotKeywordToIdent = (token: Token, i: number, tokens: Token[]): Token => {\n  if (isReserved(token.type)) {\n    const prevToken = tokens[i - 1];\n    if (prevToken && prevToken.text === '.') {\n      return { ...token, type: TokenType.IDENTIFIER, text: token.raw };\n    }\n  }\n  return token;\n};\n\nconst funcNameToKeyword = (token: Token, i: number, tokens: Token[]): Token => {\n  if (token.type === TokenType.RESERVED_FUNCTION_NAME) {\n    const nextToken = tokens[i + 1];\n    if (!nextToken || !isOpenParen(nextToken)) {\n      return { ...token, type: TokenType.RESERVED_KEYWORD };\n    }\n  }\n  return token;\n};\n\nconst identToArrayIdent = (token: Token, i: number, tokens: Token[]): Token => {\n  if (token.type === TokenType.IDENTIFIER) {\n    const nextToken = tokens[i + 1];\n    if (nextToken && isOpenBracket(nextToken)) {\n      return { ...token, type: TokenType.ARRAY_IDENTIFIER };\n    }\n  }\n  return token;\n};\n\nconst keywordToArrayKeyword = (token: Token, i: number, tokens: Token[]): Token => {\n  if (token.type === TokenType.RESERVED_KEYWORD) {\n    const nextToken = tokens[i + 1];\n    if (nextToken && isOpenBracket(nextToken)) {\n      return { ...token, type: TokenType.ARRAY_KEYWORD };\n    }\n  }\n  return token;\n};\n\nconst isOpenParen = (t: Token): boolean => t.type === TokenType.OPEN_PAREN && t.text === '(';\n\nconst isOpenBracket = (t: Token): boolean => t.type === TokenType.OPEN_PAREN && t.text === '[';\n"],"mappings":";;;;;;;AAAA;;;;;;;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,SAASA,kBAAT,CAA4BC,MAA5B,EAAsD;EAC3D,OAAOA,MAAM,CACVC,GADI,CACAC,iBADA,EAEJD,GAFI,CAEAE,iBAFA,EAGJF,GAHI,CAGAG,iBAHA,EAIJH,GAJI,CAIAI,qBAJA,CAAP;AAKD;;AAED,IAAMH,iBAAiB,GAAG,SAApBA,iBAAoB,CAACI,KAAD,EAAeC,CAAf,EAA0BP,MAA1B,EAAqD;EAC7E,IAAI,IAAAQ,iBAAA,EAAWF,KAAK,CAACG,IAAjB,CAAJ,EAA4B;IAC1B,IAAMC,SAAS,GAAGV,MAAM,CAACO,CAAC,GAAG,CAAL,CAAxB;;IACA,IAAIG,SAAS,IAAIA,SAAS,CAACC,IAAV,KAAmB,GAApC,EAAyC;MACvC,uCAAYL,KAAZ;QAAmBG,IAAI,EAAEG,gBAAA,CAAUC,UAAnC;QAA+CF,IAAI,EAAEL,KAAK,CAACQ;MAA3D;IACD;EACF;;EACD,OAAOR,KAAP;AACD,CARD;;AAUA,IAAMH,iBAAiB,GAAG,SAApBA,iBAAoB,CAACG,KAAD,EAAeC,CAAf,EAA0BP,MAA1B,EAAqD;EAC7E,IAAIM,KAAK,CAACG,IAAN,KAAeG,gBAAA,CAAUG,sBAA7B,EAAqD;IACnD,IAAMC,SAAS,GAAGhB,MAAM,CAACO,CAAC,GAAG,CAAL,CAAxB;;IACA,IAAI,CAACS,SAAD,IAAc,CAACC,WAAW,CAACD,SAAD,CAA9B,EAA2C;MACzC,uCAAYV,KAAZ;QAAmBG,IAAI,EAAEG,gBAAA,CAAUM;MAAnC;IACD;EACF;;EACD,OAAOZ,KAAP;AACD,CARD;;AAUA,IAAMF,iBAAiB,GAAG,SAApBA,iBAAoB,CAACE,KAAD,EAAeC,CAAf,EAA0BP,MAA1B,EAAqD;EAC7E,IAAIM,KAAK,CAACG,IAAN,KAAeG,gBAAA,CAAUC,UAA7B,EAAyC;IACvC,IAAMG,SAAS,GAAGhB,MAAM,CAACO,CAAC,GAAG,CAAL,CAAxB;;IACA,IAAIS,SAAS,IAAIG,aAAa,CAACH,SAAD,CAA9B,EAA2C;MACzC,uCAAYV,KAAZ;QAAmBG,IAAI,EAAEG,gBAAA,CAAUQ;MAAnC;IACD;EACF;;EACD,OAAOd,KAAP;AACD,CARD;;AAUA,IAAMD,qBAAqB,GAAG,SAAxBA,qBAAwB,CAACC,KAAD,EAAeC,CAAf,EAA0BP,MAA1B,EAAqD;EACjF,IAAIM,KAAK,CAACG,IAAN,KAAeG,gBAAA,CAAUM,gBAA7B,EAA+C;IAC7C,IAAMF,SAAS,GAAGhB,MAAM,CAACO,CAAC,GAAG,CAAL,CAAxB;;IACA,IAAIS,SAAS,IAAIG,aAAa,CAACH,SAAD,CAA9B,EAA2C;MACzC,uCAAYV,KAAZ;QAAmBG,IAAI,EAAEG,gBAAA,CAAUS;MAAnC;IACD;EACF;;EACD,OAAOf,KAAP;AACD,CARD;;AAUA,IAAMW,WAAW,GAAG,SAAdA,WAAc,CAACK,CAAD;EAAA,OAAuBA,CAAC,CAACb,IAAF,KAAWG,gBAAA,CAAUW,UAArB,IAAmCD,CAAC,CAACX,IAAF,KAAW,GAArE;AAAA,CAApB;;AAEA,IAAMQ,aAAa,GAAG,SAAhBA,aAAgB,CAACG,CAAD;EAAA,OAAuBA,CAAC,CAACb,IAAF,KAAWG,gBAAA,CAAUW,UAArB,IAAmCD,CAAC,CAACX,IAAF,KAAW,GAArE;AAAA,CAAtB"}