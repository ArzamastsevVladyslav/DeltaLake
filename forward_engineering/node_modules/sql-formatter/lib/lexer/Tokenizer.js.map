{"version":3,"file":"Tokenizer.js","names":["Tokenizer","cfg","dialectRules","buildDialectRules","input","paramTypesOverrides","rules","buildParamRules","tokens","TokenizerEngine","tokenize","postProcess","validRules","TokenType","BLOCK_COMMENT","regex","LINE_COMMENT","lineComment","lineCommentTypes","QUOTED_IDENTIFIER","string","identTypes","NUMBER","CASE","value","toCanonical","END","BETWEEN","LIMIT","reservedCommands","includes","undefined","RESERVED_COMMAND","reservedWord","identChars","RESERVED_SELECT","reservedSelect","RESERVED_SET_OPERATION","reservedSetOperations","RESERVED_DEPENDENT_CLAUSE","reservedDependentClauses","RESERVED_JOIN","reservedJoins","RESERVED_PHRASE","reservedPhrases","AND","OR","XOR","supportsXor","RESERVED_FUNCTION_NAME","reservedFunctionNames","RESERVED_KEYWORD","reservedKeywords","VARIABLE","variableTypes","variable","STRING","stringTypes","IDENTIFIER","identifier","DELIMITER","COMMA","OPEN_PAREN","parenthesis","extraParens","CLOSE_PAREN","OPERATOR","operator","operators","ASTERISK","paramTypes","named","quoted","numbered","positional","NAMED_PARAMETER","parameter","identifierPattern","paramChars","key","v","slice","QUOTED_PARAMETER","stringPattern","tokenKey","quoteChar","replace","RegExp","escapeRegExp","NUMBERED_PARAMETER","POSITIONAL_PARAMETER","Object","fromEntries","entries","filter","_","rule","equalizeWhitespace","toUpperCase"],"sources":["../../src/lexer/Tokenizer.ts"],"sourcesContent":["import { Token, TokenType } from 'src/lexer/token';\nimport * as regex from 'src/lexer/regexFactory';\nimport { ParamTypes, TokenizerOptions } from 'src/lexer/TokenizerOptions';\nimport TokenizerEngine, { type TokenRule } from 'src/lexer/TokenizerEngine';\nimport { escapeRegExp } from 'src/lexer/regexUtil';\nimport { equalizeWhitespace } from 'src/utils';\n\nexport default class Tokenizer {\n  private dialectRules: Partial<Record<TokenType, TokenRule>>;\n\n  constructor(private cfg: TokenizerOptions) {\n    this.dialectRules = this.buildDialectRules(cfg);\n  }\n\n  public tokenize(input: string, paramTypesOverrides: ParamTypes): Token[] {\n    const rules = {\n      ...this.dialectRules,\n      ...this.buildParamRules(this.cfg, paramTypesOverrides),\n    };\n    const tokens = new TokenizerEngine(rules).tokenize(input);\n    return this.cfg.postProcess ? this.cfg.postProcess(tokens) : tokens;\n  }\n\n  // These rules can be cached as they only depend on\n  // the Tokenizer config options specified for each SQL dialect\n  private buildDialectRules(cfg: TokenizerOptions): Partial<Record<TokenType, TokenRule>> {\n    return this.validRules({\n      [TokenType.BLOCK_COMMENT]: { regex: /(\\/\\*[^]*?(?:\\*\\/|$))/uy },\n      [TokenType.LINE_COMMENT]: {\n        regex: regex.lineComment(cfg.lineCommentTypes ?? ['--']),\n      },\n      [TokenType.QUOTED_IDENTIFIER]: { regex: regex.string(cfg.identTypes) },\n      [TokenType.NUMBER]: {\n        regex:\n          /(?:0x[0-9a-fA-F]+|0b[01]+|(?:-\\s*)?[0-9]+(?:\\.[0-9]*)?(?:[eE][-+]?[0-9]+(?:\\.[0-9]+)?)?)(?!\\w)/uy,\n      },\n      [TokenType.CASE]: {\n        regex: /CASE\\b/iuy,\n        value: toCanonical,\n      },\n      [TokenType.END]: {\n        regex: /END\\b/iuy,\n        value: toCanonical,\n      },\n      [TokenType.BETWEEN]: {\n        regex: /BETWEEN\\b/iuy,\n        value: toCanonical,\n      },\n      [TokenType.LIMIT]: {\n        regex: cfg.reservedCommands.includes('LIMIT') ? /LIMIT\\b/iuy : undefined,\n        value: toCanonical,\n      },\n      [TokenType.RESERVED_COMMAND]: {\n        regex: regex.reservedWord(cfg.reservedCommands, cfg.identChars),\n        value: toCanonical,\n      },\n      [TokenType.RESERVED_SELECT]: {\n        regex: regex.reservedWord(cfg.reservedSelect, cfg.identChars),\n        value: toCanonical,\n      },\n      [TokenType.RESERVED_SET_OPERATION]: {\n        regex: regex.reservedWord(cfg.reservedSetOperations, cfg.identChars),\n        value: toCanonical,\n      },\n      [TokenType.RESERVED_DEPENDENT_CLAUSE]: {\n        regex: regex.reservedWord(cfg.reservedDependentClauses, cfg.identChars),\n        value: toCanonical,\n      },\n      [TokenType.RESERVED_JOIN]: {\n        regex: regex.reservedWord(cfg.reservedJoins, cfg.identChars),\n        value: toCanonical,\n      },\n      [TokenType.RESERVED_PHRASE]: {\n        regex: regex.reservedWord(cfg.reservedPhrases ?? [], cfg.identChars),\n        value: toCanonical,\n      },\n      [TokenType.AND]: {\n        regex: /AND\\b/iuy,\n        value: toCanonical,\n      },\n      [TokenType.OR]: {\n        regex: /OR\\b/iuy,\n        value: toCanonical,\n      },\n      [TokenType.XOR]: {\n        regex: cfg.supportsXor ? /XOR\\b/iuy : undefined,\n        value: toCanonical,\n      },\n      [TokenType.RESERVED_FUNCTION_NAME]: {\n        regex: regex.reservedWord(cfg.reservedFunctionNames, cfg.identChars),\n        value: toCanonical,\n      },\n      [TokenType.RESERVED_KEYWORD]: {\n        regex: regex.reservedWord(cfg.reservedKeywords, cfg.identChars),\n        value: toCanonical,\n      },\n      [TokenType.VARIABLE]: {\n        regex: cfg.variableTypes ? regex.variable(cfg.variableTypes) : undefined,\n      },\n      [TokenType.STRING]: { regex: regex.string(cfg.stringTypes) },\n      [TokenType.IDENTIFIER]: {\n        regex: regex.identifier(cfg.identChars),\n      },\n      [TokenType.DELIMITER]: { regex: /[;]/uy },\n      [TokenType.COMMA]: { regex: /[,]/y },\n      [TokenType.OPEN_PAREN]: { regex: regex.parenthesis('open', cfg.extraParens) },\n      [TokenType.CLOSE_PAREN]: { regex: regex.parenthesis('close', cfg.extraParens) },\n      [TokenType.OPERATOR]: {\n        regex: regex.operator('+-/%&|^><=.:$@#?~!', [\n          '<>',\n          '<=',\n          '>=',\n          '!=',\n          ...(cfg.operators ?? []),\n        ]),\n      },\n      [TokenType.ASTERISK]: { regex: /[*]/uy },\n    });\n  }\n\n  // These rules can't be blindly cached as the paramTypesOverrides object\n  // can differ on each invocation of the format() function.\n  private buildParamRules(\n    cfg: TokenizerOptions,\n    paramTypesOverrides: ParamTypes\n  ): Partial<Record<TokenType, TokenRule>> {\n    // Each dialect has its own default parameter types (if any),\n    // but these can be overriden by the user of the library.\n    const paramTypes = {\n      named: paramTypesOverrides?.named || cfg.paramTypes?.named || [],\n      quoted: paramTypesOverrides?.quoted || cfg.paramTypes?.quoted || [],\n      numbered: paramTypesOverrides?.numbered || cfg.paramTypes?.numbered || [],\n      positional:\n        typeof paramTypesOverrides?.positional === 'boolean'\n          ? paramTypesOverrides.positional\n          : cfg.paramTypes?.positional,\n    };\n\n    return this.validRules({\n      [TokenType.NAMED_PARAMETER]: {\n        regex: regex.parameter(\n          paramTypes.named,\n          regex.identifierPattern(cfg.paramChars || cfg.identChars)\n        ),\n        key: v => v.slice(1),\n      },\n      [TokenType.QUOTED_PARAMETER]: {\n        regex: regex.parameter(paramTypes.quoted, regex.stringPattern(cfg.identTypes)),\n        key: v =>\n          (({ tokenKey, quoteChar }) =>\n            tokenKey.replace(new RegExp(escapeRegExp('\\\\' + quoteChar), 'gu'), quoteChar))({\n            tokenKey: v.slice(2, -1),\n            quoteChar: v.slice(-1),\n          }),\n      },\n      [TokenType.NUMBERED_PARAMETER]: {\n        regex: regex.parameter(paramTypes.numbered, '[0-9]+'),\n        key: v => v.slice(1),\n      },\n      [TokenType.POSITIONAL_PARAMETER]: {\n        regex: paramTypes.positional ? /[?]/y : undefined,\n      },\n    });\n  }\n\n  // filters out rules for token types whose regex is undefined\n  private validRules(\n    rules: Partial<Record<TokenType, TokenRule | { regex: undefined }>>\n  ): Partial<Record<TokenType, TokenRule>> {\n    return Object.fromEntries(Object.entries(rules).filter(([_, rule]) => rule.regex));\n  }\n}\n\n/**\n * Converts keywords (and keyword sequences) to canonical form:\n * - in uppercase\n * - single spaces between words\n */\nconst toCanonical = (v: string) => equalizeWhitespace(v.toUpperCase());\n"],"mappings":"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"}