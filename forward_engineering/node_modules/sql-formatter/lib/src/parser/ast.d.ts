import { Token } from "../lexer/token";
export declare enum NodeType {
    statement = "statement",
    clause = "clause",
    set_operation = "set_operation",
    function_call = "function_call",
    array_subscript = "array_subscript",
    parenthesis = "parenthesis",
    between_predicate = "between_predicate",
    limit_clause = "limit_clause",
    all_columns_asterisk = "all_columns_asterisk",
    token = "token"
}
export declare type Statement = {
    type: NodeType.statement;
    children: AstNode[];
    hasSemicolon: boolean;
};
export declare type Clause = {
    type: NodeType.clause;
    nameToken: Token;
    children: AstNode[];
};
export declare type SetOperation = {
    type: NodeType.set_operation;
    nameToken: Token;
    children: AstNode[];
};
export declare type TokenNode = {
    type: NodeType.token;
    token: Token;
};
export declare type FunctionCall = {
    type: NodeType.function_call;
    nameToken: Token;
    parenthesis: Parenthesis;
};
export declare type ArraySubscript = {
    type: NodeType.array_subscript;
    arrayToken: Token;
    parenthesis: Parenthesis;
};
export declare type Parenthesis = {
    type: NodeType.parenthesis;
    children: AstNode[];
    openParen: string;
    closeParen: string;
};
export declare type BetweenPredicate = {
    type: NodeType.between_predicate;
    betweenToken: Token;
    expr1: AstNode[];
    andToken: Token;
    expr2: AstNode[];
};
export declare type LimitClause = {
    type: NodeType.limit_clause;
    limitToken: Token;
    count: AstNode[];
    offset?: AstNode[];
};
export declare type AllColumnsAsterisk = {
    type: NodeType.all_columns_asterisk;
};
export declare type AstNode = Clause | SetOperation | FunctionCall | ArraySubscript | Parenthesis | BetweenPredicate | LimitClause | AllColumnsAsterisk | TokenNode;
export declare const isTokenNode: (node: AstNode) => node is TokenNode;
