import { TokenType } from "../lexer/token";
export declare enum NodeType {
    statement = "statement",
    clause = "clause",
    set_operation = "set_operation",
    function_call = "function_call",
    array_subscript = "array_subscript",
    parenthesis = "parenthesis",
    between_predicate = "between_predicate",
    limit_clause = "limit_clause",
    all_columns_asterisk = "all_columns_asterisk",
    literal = "literal",
    identifier = "identifier",
    keyword = "keyword",
    parameter = "parameter",
    operator = "operator",
    comma = "comma",
    line_comment = "line_comment",
    block_comment = "block_comment"
}
export declare type StatementNode = {
    type: NodeType.statement;
    children: AstNode[];
    hasSemicolon: boolean;
};
export declare type ClauseNode = {
    type: NodeType.clause;
    name: KeywordNode;
    children: AstNode[];
};
export declare type SetOperationNode = {
    type: NodeType.set_operation;
    name: KeywordNode;
    children: AstNode[];
};
export declare type FunctionCallNode = {
    type: NodeType.function_call;
    name: KeywordNode;
    parenthesis: ParenthesisNode;
};
export declare type ArraySubscriptNode = {
    type: NodeType.array_subscript;
    array: IdentifierNode | KeywordNode;
    parenthesis: ParenthesisNode;
};
export declare type ParenthesisNode = {
    type: NodeType.parenthesis;
    children: AstNode[];
    openParen: string;
    closeParen: string;
};
export declare type BetweenPredicateNode = {
    type: NodeType.between_predicate;
    between: KeywordNode;
    expr1: AstNode[];
    and: KeywordNode;
    expr2: AstNode[];
};
export declare type LimitClauseNode = {
    type: NodeType.limit_clause;
    name: KeywordNode;
    count: AstNode[];
    offset?: AstNode[];
};
export declare type AllColumnsAsteriskNode = {
    type: NodeType.all_columns_asterisk;
};
export declare type LiteralNode = {
    type: NodeType.literal;
    text: string;
};
export declare type IdentifierNode = {
    type: NodeType.identifier;
    text: string;
};
export declare type KeywordNode = {
    type: NodeType.keyword;
    tokenType: TokenType;
    text: string;
    raw: string;
};
export declare type ParameterNode = {
    type: NodeType.parameter;
    key?: string;
    text: string;
};
export declare type OperatorNode = {
    type: NodeType.operator;
    text: string;
};
export declare type CommaNode = {
    type: NodeType.comma;
};
export declare type LineCommentNode = {
    type: NodeType.line_comment;
    text: string;
    precedingWhitespace: string;
};
export declare type BlockCommentNode = {
    type: NodeType.block_comment;
    text: string;
};
export declare type AstNode = ClauseNode | SetOperationNode | FunctionCallNode | ArraySubscriptNode | ParenthesisNode | BetweenPredicateNode | LimitClauseNode | AllColumnsAsteriskNode | LiteralNode | IdentifierNode | KeywordNode | ParameterNode | OperatorNode | CommaNode | LineCommentNode | BlockCommentNode;
