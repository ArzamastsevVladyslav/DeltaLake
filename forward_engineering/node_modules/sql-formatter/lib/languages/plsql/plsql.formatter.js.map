{"version":3,"file":"plsql.formatter.js","names":["reservedSelect","expandPhrases","reservedCommands","reservedSetOperations","reservedJoins","reservedPhrases","PlSqlFormatter","Tokenizer","reservedDependentClauses","supportsXor","reservedKeywords","keywords","reservedFunctionNames","functions","stringTypes","quote","prefixes","identTypes","identChars","rest","variableTypes","regex","paramTypes","numbered","named","paramChars","operators","postProcess","Formatter","tokens","previousReservedToken","EOF_TOKEN","map","token","isToken","SET","BY","type","TokenType","RESERVED_KEYWORD","isReserved"],"sources":["../../../src/languages/plsql/plsql.formatter.ts"],"sourcesContent":["import { expandPhrases } from 'src/expandPhrases';\nimport Formatter from 'src/formatter/Formatter';\nimport Tokenizer from 'src/lexer/Tokenizer';\nimport { EOF_TOKEN, isReserved, isToken, type Token, TokenType } from 'src/lexer/token';\nimport { keywords } from './plsql.keywords';\nimport { functions } from './plsql.functions';\n\nconst reservedSelect = expandPhrases(['SELECT [ALL | DISTINCT | UNIQUE]']);\n\nconst reservedCommands = expandPhrases([\n  // queries\n  'WITH',\n  'FROM',\n  'WHERE',\n  'GROUP BY',\n  'HAVING',\n  'ORDER [SIBLINGS] BY',\n  'OFFSET',\n  'FETCH {FIRST | NEXT}',\n  // Data manipulation\n  // - insert:\n  'INSERT [INTO | ALL INTO]',\n  'VALUES',\n  // - update:\n  'UPDATE [ONLY]',\n  'SET',\n  // - delete:\n  'DELETE FROM [ONLY]',\n  // - truncate:\n  'TRUNCATE TABLE',\n  // - merge:\n  'MERGE [INTO]',\n  'WHEN [NOT] MATCHED [THEN]',\n  'UPDATE SET',\n  // Data definition\n  'CREATE [OR REPLACE] [NO FORCE | FORCE] [EDITIONING | EDITIONABLE | EDITIONABLE EDITIONING | NONEDITIONABLE] VIEW',\n  'CREATE MATERIALIZED VIEW',\n  'CREATE [GLOBAL TEMPORARY | PRIVATE TEMPORARY | SHARDED | DUPLICATED | IMMUTABLE BLOCKCHAIN | BLOCKCHAIN | IMMUTABLE] TABLE',\n  'DROP TABLE',\n  // - alter table:\n  'ALTER TABLE',\n  'ADD',\n  'DROP {COLUMN | UNUSED COLUMNS | COLUMNS CONTINUE}',\n  'MODIFY',\n  'RENAME TO',\n  'RENAME COLUMN',\n\n  // other\n  'BEGIN',\n  'CONNECT BY',\n  'DECLARE',\n  'EXCEPT',\n  'EXCEPTION',\n  'LOOP',\n  'RETURNING',\n  'START WITH',\n  'SET SCHEMA',\n]);\n\nconst reservedSetOperations = expandPhrases(['UNION [ALL]', 'EXCEPT', 'INTERSECT']);\n\nconst reservedJoins = expandPhrases([\n  'JOIN',\n  '{LEFT | RIGHT | FULL} [OUTER] JOIN',\n  '{INNER | CROSS} JOIN',\n  'NATURAL [INNER] JOIN',\n  'NATURAL {LEFT | RIGHT | FULL} [OUTER] JOIN',\n  // non-standard joins\n  '{CROSS | OUTER} APPLY',\n]);\n\nconst reservedPhrases = ['ON DELETE', 'ON UPDATE', 'ON COMMIT'];\n\nexport default class PlSqlFormatter extends Formatter {\n  static operators = [\n    '||',\n    '**',\n    ':=',\n    '~=',\n    '^=',\n    '>>',\n    '<<',\n    '=>',\n    //  '..' // breaks operator test, handled by .\n  ];\n\n  tokenizer() {\n    return new Tokenizer({\n      reservedCommands,\n      reservedSelect,\n      reservedSetOperations,\n      reservedJoins,\n      reservedDependentClauses: ['WHEN', 'ELSE'],\n      reservedPhrases,\n      supportsXor: true,\n      reservedKeywords: keywords,\n      reservedFunctionNames: functions,\n      stringTypes: [\n        { quote: \"''\", prefixes: ['N'] },\n        { quote: \"q''\", prefixes: ['N'] },\n      ],\n      identTypes: [`\"\"`],\n      identChars: { rest: '$#' },\n      variableTypes: [{ regex: '&{1,2}[A-Za-z][A-Za-z0-9_$#]*' }],\n      paramTypes: { numbered: [':'], named: [':'] },\n      paramChars: {}, // Empty object used on purpose to not allow $ and # chars as specified in identChars\n      operators: PlSqlFormatter.operators,\n      postProcess,\n    });\n  }\n}\n\nfunction postProcess(tokens: Token[]) {\n  let previousReservedToken: Token = EOF_TOKEN;\n\n  return tokens.map(token => {\n    // BY [SET]\n    if (isToken.SET(token) && isToken.BY(previousReservedToken)) {\n      return { ...token, type: TokenType.RESERVED_KEYWORD };\n    }\n\n    if (isReserved(token)) {\n      previousReservedToken = token;\n    }\n\n    return token;\n  });\n}\n"],"mappings":"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"}