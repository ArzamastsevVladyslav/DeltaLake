{"version":3,"file":"LexerAdapter.js","names":["LexerAdapter","tokenize","chunk","_info","index","tokens","token","text","name","TokenType"],"sources":["../../src/parser/LexerAdapter.ts"],"sourcesContent":["import { Token, TokenType } from 'src/lexer/token';\n\n// Nearly type definitions say that Token must have a value field,\n// which however is wrong.  Instead Nearley expects a text field.\ntype NearleyToken = Token & { value: string };\n\nexport default class LexerAdapter {\n  private index = 0;\n  private tokens: Token[] = [];\n\n  constructor(private tokenize: (chunk: string) => Token[]) {}\n\n  reset(chunk: string, _info: any) {\n    this.index = 0;\n    this.tokens = this.tokenize(chunk);\n  }\n\n  next(): NearleyToken | undefined {\n    return this.tokens[this.index++] as NearleyToken | undefined;\n  }\n\n  save(): any {}\n\n  formatError(token: NearleyToken) {\n    return `Parse error at token: ${token.text}`;\n  }\n\n  has(name: string): boolean {\n    return name in TokenType;\n  }\n}\n"],"mappings":";;;;;;;AAAA;;;;;;;;;;IAMqBA,Y;EAInB,sBAAoBC,QAApB,EAA0D;IAAA;;IAAA,KAAtCA,QAAsC,GAAtCA,QAAsC;;IAAA,+BAH1C,CAG0C;;IAAA,gCAFhC,EAEgC;EAAE;;;;WAE5D,eAAMC,KAAN,EAAqBC,KAArB,EAAiC;MAC/B,KAAKC,KAAL,GAAa,CAAb;MACA,KAAKC,MAAL,GAAc,KAAKJ,QAAL,CAAcC,KAAd,CAAd;IACD;;;WAED,gBAAiC;MAC/B,OAAO,KAAKG,MAAL,CAAY,KAAKD,KAAL,EAAZ,CAAP;IACD;;;WAED,gBAAY,CAAE;;;WAEd,qBAAYE,KAAZ,EAAiC;MAC/B,uCAAgCA,KAAK,CAACC,IAAtC;IACD;;;WAED,aAAIC,IAAJ,EAA2B;MACzB,OAAOA,IAAI,IAAIC,gBAAf;IACD"}