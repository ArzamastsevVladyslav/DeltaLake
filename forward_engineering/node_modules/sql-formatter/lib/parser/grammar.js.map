{"version":3,"file":"grammar.js","names":["id","d","lexer","LexerAdapter","chunk","unwrap","el","toKeywordNode","token","type","NodeType","keyword","tokenType","text","raw","grammar","Lexer","ParserRules","concat","statements","last","length","hasSemicolon","children","slice","has","DELIMITER","EOF","delimiter","statement","TokenType","expressions","clauses","COMMA","LIMIT","limitToken","exp1","optional","comma","exp2","limit_clause","name","offset","count","RESERVED_SELECT","nameToken","exp","clause","ASTERISK","all_columns_asterisk","RESERVED_COMMAND","RESERVED_SET_OPERATION","set_operation","ARRAY_IDENTIFIER","arrayToken","brackets","array_subscript","array","identifier","parenthesis","ARRAY_KEYWORD","RESERVED_FUNCTION_NAME","parens","function_call","open","close","openParen","closeParen","BETWEEN","AND","betweenToken","expr1","andToken","expr2","between_predicate","between","and","operator","OPERATOR","IDENTIFIER","QUOTED_IDENTIFIER","VARIABLE","NAMED_PARAMETER","QUOTED_PARAMETER","NUMBERED_PARAMETER","POSITIONAL_PARAMETER","parameter","key","NUMBER","STRING","literal","RESERVED_KEYWORD","RESERVED_PHRASE","RESERVED_DEPENDENT_CLAUSE","RESERVED_JOIN","CASE","END","OR","XOR","LINE_COMMENT","line_comment","precedingWhitespace","BLOCK_COMMENT","block_comment","ParserStart"],"sources":["../../src/parser/grammar.ts"],"sourcesContent":["// Generated automatically by nearley, version 2.20.1\n// http://github.com/Hardmath123/nearley\n// Bypasses TS6133. Allow declared but unused functions.\n// @ts-ignore\nfunction id(d: any[]): any { return d[0]; }\ndeclare var DELIMITER: any;\ndeclare var EOF: any;\ndeclare var LIMIT: any;\ndeclare var COMMA: any;\ndeclare var RESERVED_SELECT: any;\ndeclare var ASTERISK: any;\ndeclare var RESERVED_COMMAND: any;\ndeclare var RESERVED_SET_OPERATION: any;\ndeclare var ARRAY_IDENTIFIER: any;\ndeclare var ARRAY_KEYWORD: any;\ndeclare var RESERVED_FUNCTION_NAME: any;\ndeclare var BETWEEN: any;\ndeclare var AND: any;\ndeclare var OPERATOR: any;\ndeclare var IDENTIFIER: any;\ndeclare var QUOTED_IDENTIFIER: any;\ndeclare var VARIABLE: any;\ndeclare var NAMED_PARAMETER: any;\ndeclare var QUOTED_PARAMETER: any;\ndeclare var NUMBERED_PARAMETER: any;\ndeclare var POSITIONAL_PARAMETER: any;\ndeclare var NUMBER: any;\ndeclare var STRING: any;\ndeclare var RESERVED_KEYWORD: any;\ndeclare var RESERVED_PHRASE: any;\ndeclare var RESERVED_DEPENDENT_CLAUSE: any;\ndeclare var RESERVED_JOIN: any;\ndeclare var CASE: any;\ndeclare var END: any;\ndeclare var OR: any;\ndeclare var XOR: any;\ndeclare var LINE_COMMENT: any;\ndeclare var BLOCK_COMMENT: any;\n\nimport LexerAdapter from 'src/parser/LexerAdapter';\nimport { NodeType } from 'src/parser/ast';\nimport { Token, TokenType } from 'src/lexer/token';\n\n// The lexer here is only to provide the has() method,\n// that's used inside the generated grammar definition.\n// A proper lexer gets passed to Nearley Parser constructor.\nconst lexer = new LexerAdapter(chunk => []);\n\n// Used for unwrapping grammar rules like:\n//\n//   rule -> ( foo | bar | baz )\n//\n// which otherwise produce single element nested inside two arrays\nconst unwrap = <T>([[el]]: T[][]): T => el;\n\nconst toKeywordNode = (token: Token) => ({\n  type: NodeType.keyword,\n  tokenType: token.type,\n  text: token.text,\n  raw: token.raw,\n});\n\ninterface NearleyToken {\n  value: any;\n  [key: string]: any;\n};\n\ninterface NearleyLexer {\n  reset: (chunk: string, info: any) => void;\n  next: () => NearleyToken | undefined;\n  save: () => any;\n  formatError: (token: never) => string;\n  has: (tokenType: string) => boolean;\n};\n\ninterface NearleyRule {\n  name: string;\n  symbols: NearleySymbol[];\n  postprocess?: (d: any[], loc?: number, reject?: {}) => any;\n};\n\ntype NearleySymbol = string | { literal: any } | { test: (token: any) => boolean };\n\ninterface Grammar {\n  Lexer: NearleyLexer | undefined;\n  ParserRules: NearleyRule[];\n  ParserStart: string;\n};\n\nconst grammar: Grammar = {\n  Lexer: lexer,\n  ParserRules: [\n    {\"name\": \"main$ebnf$1\", \"symbols\": []},\n    {\"name\": \"main$ebnf$1\", \"symbols\": [\"main$ebnf$1\", \"statement\"], \"postprocess\": (d) => d[0].concat([d[1]])},\n    {\"name\": \"main\", \"symbols\": [\"main$ebnf$1\"], \"postprocess\": \n        ([statements]) => {\n          const last = statements[statements.length - 1];\n          if (last && !last.hasSemicolon) {\n            // we have fully parsed the whole file\n            // discard the last statement when it's empty\n            return last.children.length > 0 ? statements : statements.slice(0, -1);\n          } else {\n            // parsing still in progress, do nothing\n            return statements;\n          }\n        }\n        },\n    {\"name\": \"statement$subexpression$1\", \"symbols\": [(lexer.has(\"DELIMITER\") ? {type: \"DELIMITER\"} : DELIMITER)]},\n    {\"name\": \"statement$subexpression$1\", \"symbols\": [(lexer.has(\"EOF\") ? {type: \"EOF\"} : EOF)]},\n    {\"name\": \"statement\", \"symbols\": [\"expressions_or_clauses\", \"statement$subexpression$1\"], \"postprocess\": \n        ([children, [delimiter]]) => ({\n          type: NodeType.statement,\n          children,\n          hasSemicolon: delimiter.type === TokenType.DELIMITER,\n        })\n        },\n    {\"name\": \"expressions_or_clauses$ebnf$1\", \"symbols\": []},\n    {\"name\": \"expressions_or_clauses$ebnf$1\", \"symbols\": [\"expressions_or_clauses$ebnf$1\", \"expression\"], \"postprocess\": (d) => d[0].concat([d[1]])},\n    {\"name\": \"expressions_or_clauses$ebnf$2\", \"symbols\": []},\n    {\"name\": \"expressions_or_clauses$ebnf$2\", \"symbols\": [\"expressions_or_clauses$ebnf$2\", \"clause\"], \"postprocess\": (d) => d[0].concat([d[1]])},\n    {\"name\": \"expressions_or_clauses\", \"symbols\": [\"expressions_or_clauses$ebnf$1\", \"expressions_or_clauses$ebnf$2\"], \"postprocess\": \n        ([expressions, clauses]) => [...expressions, ...clauses]\n        },\n    {\"name\": \"clause$subexpression$1\", \"symbols\": [\"limit_clause\"]},\n    {\"name\": \"clause$subexpression$1\", \"symbols\": [\"select_clause\"]},\n    {\"name\": \"clause$subexpression$1\", \"symbols\": [\"other_clause\"]},\n    {\"name\": \"clause$subexpression$1\", \"symbols\": [\"set_operation\"]},\n    {\"name\": \"clause\", \"symbols\": [\"clause$subexpression$1\"], \"postprocess\": unwrap},\n    {\"name\": \"limit_clause$ebnf$1\", \"symbols\": [\"commaless_expression\"]},\n    {\"name\": \"limit_clause$ebnf$1\", \"symbols\": [\"limit_clause$ebnf$1\", \"commaless_expression\"], \"postprocess\": (d) => d[0].concat([d[1]])},\n    {\"name\": \"limit_clause$ebnf$2$subexpression$1$ebnf$1\", \"symbols\": [\"expression\"]},\n    {\"name\": \"limit_clause$ebnf$2$subexpression$1$ebnf$1\", \"symbols\": [\"limit_clause$ebnf$2$subexpression$1$ebnf$1\", \"expression\"], \"postprocess\": (d) => d[0].concat([d[1]])},\n    {\"name\": \"limit_clause$ebnf$2$subexpression$1\", \"symbols\": [(lexer.has(\"COMMA\") ? {type: \"COMMA\"} : COMMA), \"limit_clause$ebnf$2$subexpression$1$ebnf$1\"]},\n    {\"name\": \"limit_clause$ebnf$2\", \"symbols\": [\"limit_clause$ebnf$2$subexpression$1\"], \"postprocess\": id},\n    {\"name\": \"limit_clause$ebnf$2\", \"symbols\": [], \"postprocess\": () => null},\n    {\"name\": \"limit_clause\", \"symbols\": [(lexer.has(\"LIMIT\") ? {type: \"LIMIT\"} : LIMIT), \"limit_clause$ebnf$1\", \"limit_clause$ebnf$2\"], \"postprocess\": \n        ([limitToken, exp1, optional]) => {\n          if (optional) {\n            const [comma, exp2] = optional;\n            return {\n              type: NodeType.limit_clause,\n              name: toKeywordNode(limitToken),\n              offset: exp1,\n              count: exp2,\n            };\n          } else {\n            return {\n              type: NodeType.limit_clause,\n              name: toKeywordNode(limitToken),\n              count: exp1,\n            };\n          }\n        }\n        },\n    {\"name\": \"select_clause$subexpression$1$ebnf$1\", \"symbols\": []},\n    {\"name\": \"select_clause$subexpression$1$ebnf$1\", \"symbols\": [\"select_clause$subexpression$1$ebnf$1\", \"expression\"], \"postprocess\": (d) => d[0].concat([d[1]])},\n    {\"name\": \"select_clause$subexpression$1\", \"symbols\": [\"all_columns_asterisk\", \"select_clause$subexpression$1$ebnf$1\"]},\n    {\"name\": \"select_clause$subexpression$1$ebnf$2\", \"symbols\": []},\n    {\"name\": \"select_clause$subexpression$1$ebnf$2\", \"symbols\": [\"select_clause$subexpression$1$ebnf$2\", \"expression\"], \"postprocess\": (d) => d[0].concat([d[1]])},\n    {\"name\": \"select_clause$subexpression$1\", \"symbols\": [\"asteriskless_expression\", \"select_clause$subexpression$1$ebnf$2\"]},\n    {\"name\": \"select_clause\", \"symbols\": [(lexer.has(\"RESERVED_SELECT\") ? {type: \"RESERVED_SELECT\"} : RESERVED_SELECT), \"select_clause$subexpression$1\"], \"postprocess\": \n        ([nameToken, [exp, expressions]]) => ({\n          type: NodeType.clause,\n          name: toKeywordNode(nameToken),\n          children: [exp, ...expressions],\n        })\n        },\n    {\"name\": \"all_columns_asterisk\", \"symbols\": [(lexer.has(\"ASTERISK\") ? {type: \"ASTERISK\"} : ASTERISK)], \"postprocess\": \n        () => ({ type: NodeType.all_columns_asterisk })\n        },\n    {\"name\": \"other_clause$ebnf$1\", \"symbols\": []},\n    {\"name\": \"other_clause$ebnf$1\", \"symbols\": [\"other_clause$ebnf$1\", \"expression\"], \"postprocess\": (d) => d[0].concat([d[1]])},\n    {\"name\": \"other_clause\", \"symbols\": [(lexer.has(\"RESERVED_COMMAND\") ? {type: \"RESERVED_COMMAND\"} : RESERVED_COMMAND), \"other_clause$ebnf$1\"], \"postprocess\": \n        ([nameToken, children]) => ({\n          type: NodeType.clause,\n          name: toKeywordNode(nameToken),\n          children,\n        })\n        },\n    {\"name\": \"set_operation$ebnf$1\", \"symbols\": []},\n    {\"name\": \"set_operation$ebnf$1\", \"symbols\": [\"set_operation$ebnf$1\", \"expression\"], \"postprocess\": (d) => d[0].concat([d[1]])},\n    {\"name\": \"set_operation\", \"symbols\": [(lexer.has(\"RESERVED_SET_OPERATION\") ? {type: \"RESERVED_SET_OPERATION\"} : RESERVED_SET_OPERATION), \"set_operation$ebnf$1\"], \"postprocess\": \n        ([nameToken, children]) => ({\n          type: NodeType.set_operation,\n          name: toKeywordNode(nameToken),\n          children,\n        })\n        },\n    {\"name\": \"expression$subexpression$1\", \"symbols\": [\"simple_expression\"]},\n    {\"name\": \"expression$subexpression$1\", \"symbols\": [\"asterisk\"]},\n    {\"name\": \"expression$subexpression$1\", \"symbols\": [\"comma\"]},\n    {\"name\": \"expression\", \"symbols\": [\"expression$subexpression$1\"], \"postprocess\": unwrap},\n    {\"name\": \"asteriskless_expression$subexpression$1\", \"symbols\": [\"simple_expression\"]},\n    {\"name\": \"asteriskless_expression$subexpression$1\", \"symbols\": [\"comma\"]},\n    {\"name\": \"asteriskless_expression\", \"symbols\": [\"asteriskless_expression$subexpression$1\"], \"postprocess\": unwrap},\n    {\"name\": \"commaless_expression$subexpression$1\", \"symbols\": [\"simple_expression\"]},\n    {\"name\": \"commaless_expression$subexpression$1\", \"symbols\": [\"asterisk\"]},\n    {\"name\": \"commaless_expression\", \"symbols\": [\"commaless_expression$subexpression$1\"], \"postprocess\": unwrap},\n    {\"name\": \"simple_expression$subexpression$1\", \"symbols\": [\"array_subscript\"]},\n    {\"name\": \"simple_expression$subexpression$1\", \"symbols\": [\"function_call\"]},\n    {\"name\": \"simple_expression$subexpression$1\", \"symbols\": [\"parenthesis\"]},\n    {\"name\": \"simple_expression$subexpression$1\", \"symbols\": [\"curly_braces\"]},\n    {\"name\": \"simple_expression$subexpression$1\", \"symbols\": [\"square_brackets\"]},\n    {\"name\": \"simple_expression$subexpression$1\", \"symbols\": [\"between_predicate\"]},\n    {\"name\": \"simple_expression$subexpression$1\", \"symbols\": [\"expression_token\"]},\n    {\"name\": \"simple_expression\", \"symbols\": [\"simple_expression$subexpression$1\"], \"postprocess\": unwrap},\n    {\"name\": \"array_subscript\", \"symbols\": [(lexer.has(\"ARRAY_IDENTIFIER\") ? {type: \"ARRAY_IDENTIFIER\"} : ARRAY_IDENTIFIER), \"square_brackets\"], \"postprocess\": \n        ([arrayToken, brackets]) => ({\n          type: NodeType.array_subscript,\n          array: { type: NodeType.identifier, text: arrayToken.text },\n          parenthesis: brackets,\n        })\n        },\n    {\"name\": \"array_subscript\", \"symbols\": [(lexer.has(\"ARRAY_KEYWORD\") ? {type: \"ARRAY_KEYWORD\"} : ARRAY_KEYWORD), \"square_brackets\"], \"postprocess\": \n        ([arrayToken, brackets]) => ({\n          type: NodeType.array_subscript,\n          array: toKeywordNode(arrayToken),\n          parenthesis: brackets,\n        })\n        },\n    {\"name\": \"function_call\", \"symbols\": [(lexer.has(\"RESERVED_FUNCTION_NAME\") ? {type: \"RESERVED_FUNCTION_NAME\"} : RESERVED_FUNCTION_NAME), \"parenthesis\"], \"postprocess\": \n        ([nameToken, parens]) => ({\n          type: NodeType.function_call,\n          name: toKeywordNode(nameToken),\n          parenthesis: parens,\n        })\n        },\n    {\"name\": \"parenthesis\", \"symbols\": [{\"literal\":\"(\"}, \"expressions_or_clauses\", {\"literal\":\")\"}], \"postprocess\": \n        ([open, children, close]) => ({\n          type: NodeType.parenthesis,\n          children: children,\n          openParen: \"(\",\n          closeParen: \")\",\n        })\n        },\n    {\"name\": \"curly_braces$ebnf$1\", \"symbols\": []},\n    {\"name\": \"curly_braces$ebnf$1\", \"symbols\": [\"curly_braces$ebnf$1\", \"expression\"], \"postprocess\": (d) => d[0].concat([d[1]])},\n    {\"name\": \"curly_braces\", \"symbols\": [{\"literal\":\"{\"}, \"curly_braces$ebnf$1\", {\"literal\":\"}\"}], \"postprocess\": \n        ([open, children, close]) => ({\n          type: NodeType.parenthesis,\n          children: children,\n          openParen: \"{\",\n          closeParen: \"}\",\n        })\n        },\n    {\"name\": \"square_brackets$ebnf$1\", \"symbols\": []},\n    {\"name\": \"square_brackets$ebnf$1\", \"symbols\": [\"square_brackets$ebnf$1\", \"expression\"], \"postprocess\": (d) => d[0].concat([d[1]])},\n    {\"name\": \"square_brackets\", \"symbols\": [{\"literal\":\"[\"}, \"square_brackets$ebnf$1\", {\"literal\":\"]\"}], \"postprocess\": \n        ([open, children, close]) => ({\n          type: NodeType.parenthesis,\n          children: children,\n          openParen: \"[\",\n          closeParen: \"]\",\n        })\n        },\n    {\"name\": \"between_predicate\", \"symbols\": [(lexer.has(\"BETWEEN\") ? {type: \"BETWEEN\"} : BETWEEN), \"commaless_expression\", (lexer.has(\"AND\") ? {type: \"AND\"} : AND), \"commaless_expression\"], \"postprocess\": \n        ([betweenToken, expr1, andToken, expr2]) => ({\n          type: NodeType.between_predicate,\n          between: toKeywordNode(betweenToken),\n          expr1: [expr1],\n          and: toKeywordNode(andToken),\n          expr2: [expr2],\n        })\n        },\n    {\"name\": \"comma$subexpression$1\", \"symbols\": [(lexer.has(\"COMMA\") ? {type: \"COMMA\"} : COMMA)]},\n    {\"name\": \"comma\", \"symbols\": [\"comma$subexpression$1\"], \"postprocess\": ([[token]]) => ({ type: NodeType.comma })},\n    {\"name\": \"asterisk$subexpression$1\", \"symbols\": [(lexer.has(\"ASTERISK\") ? {type: \"ASTERISK\"} : ASTERISK)]},\n    {\"name\": \"asterisk\", \"symbols\": [\"asterisk$subexpression$1\"], \"postprocess\": ([[token]]) => ({ type: NodeType.operator, text: token.text })},\n    {\"name\": \"expression_token$subexpression$1\", \"symbols\": [\"operator\"]},\n    {\"name\": \"expression_token$subexpression$1\", \"symbols\": [\"identifier\"]},\n    {\"name\": \"expression_token$subexpression$1\", \"symbols\": [\"parameter\"]},\n    {\"name\": \"expression_token$subexpression$1\", \"symbols\": [\"literal\"]},\n    {\"name\": \"expression_token$subexpression$1\", \"symbols\": [\"keyword\"]},\n    {\"name\": \"expression_token$subexpression$1\", \"symbols\": [\"comment\"]},\n    {\"name\": \"expression_token\", \"symbols\": [\"expression_token$subexpression$1\"], \"postprocess\": unwrap},\n    {\"name\": \"operator$subexpression$1\", \"symbols\": [(lexer.has(\"OPERATOR\") ? {type: \"OPERATOR\"} : OPERATOR)]},\n    {\"name\": \"operator\", \"symbols\": [\"operator$subexpression$1\"], \"postprocess\": ([[token]]) => ({ type: NodeType.operator, text: token.text })},\n    {\"name\": \"identifier$subexpression$1\", \"symbols\": [(lexer.has(\"IDENTIFIER\") ? {type: \"IDENTIFIER\"} : IDENTIFIER)]},\n    {\"name\": \"identifier$subexpression$1\", \"symbols\": [(lexer.has(\"QUOTED_IDENTIFIER\") ? {type: \"QUOTED_IDENTIFIER\"} : QUOTED_IDENTIFIER)]},\n    {\"name\": \"identifier$subexpression$1\", \"symbols\": [(lexer.has(\"VARIABLE\") ? {type: \"VARIABLE\"} : VARIABLE)]},\n    {\"name\": \"identifier\", \"symbols\": [\"identifier$subexpression$1\"], \"postprocess\": ([[token]]) => ({ type: NodeType.identifier, text: token.text })},\n    {\"name\": \"parameter$subexpression$1\", \"symbols\": [(lexer.has(\"NAMED_PARAMETER\") ? {type: \"NAMED_PARAMETER\"} : NAMED_PARAMETER)]},\n    {\"name\": \"parameter$subexpression$1\", \"symbols\": [(lexer.has(\"QUOTED_PARAMETER\") ? {type: \"QUOTED_PARAMETER\"} : QUOTED_PARAMETER)]},\n    {\"name\": \"parameter$subexpression$1\", \"symbols\": [(lexer.has(\"NUMBERED_PARAMETER\") ? {type: \"NUMBERED_PARAMETER\"} : NUMBERED_PARAMETER)]},\n    {\"name\": \"parameter$subexpression$1\", \"symbols\": [(lexer.has(\"POSITIONAL_PARAMETER\") ? {type: \"POSITIONAL_PARAMETER\"} : POSITIONAL_PARAMETER)]},\n    {\"name\": \"parameter\", \"symbols\": [\"parameter$subexpression$1\"], \"postprocess\": ([[token]]) => ({ type: NodeType.parameter, key: token.key, text: token.text })},\n    {\"name\": \"literal$subexpression$1\", \"symbols\": [(lexer.has(\"NUMBER\") ? {type: \"NUMBER\"} : NUMBER)]},\n    {\"name\": \"literal$subexpression$1\", \"symbols\": [(lexer.has(\"STRING\") ? {type: \"STRING\"} : STRING)]},\n    {\"name\": \"literal\", \"symbols\": [\"literal$subexpression$1\"], \"postprocess\": ([[token]]) => ({ type: NodeType.literal, text: token.text })},\n    {\"name\": \"keyword$subexpression$1\", \"symbols\": [(lexer.has(\"RESERVED_KEYWORD\") ? {type: \"RESERVED_KEYWORD\"} : RESERVED_KEYWORD)]},\n    {\"name\": \"keyword$subexpression$1\", \"symbols\": [(lexer.has(\"RESERVED_PHRASE\") ? {type: \"RESERVED_PHRASE\"} : RESERVED_PHRASE)]},\n    {\"name\": \"keyword$subexpression$1\", \"symbols\": [(lexer.has(\"RESERVED_DEPENDENT_CLAUSE\") ? {type: \"RESERVED_DEPENDENT_CLAUSE\"} : RESERVED_DEPENDENT_CLAUSE)]},\n    {\"name\": \"keyword$subexpression$1\", \"symbols\": [(lexer.has(\"RESERVED_JOIN\") ? {type: \"RESERVED_JOIN\"} : RESERVED_JOIN)]},\n    {\"name\": \"keyword$subexpression$1\", \"symbols\": [(lexer.has(\"CASE\") ? {type: \"CASE\"} : CASE)]},\n    {\"name\": \"keyword$subexpression$1\", \"symbols\": [(lexer.has(\"END\") ? {type: \"END\"} : END)]},\n    {\"name\": \"keyword$subexpression$1\", \"symbols\": [(lexer.has(\"AND\") ? {type: \"AND\"} : AND)]},\n    {\"name\": \"keyword$subexpression$1\", \"symbols\": [(lexer.has(\"OR\") ? {type: \"OR\"} : OR)]},\n    {\"name\": \"keyword$subexpression$1\", \"symbols\": [(lexer.has(\"XOR\") ? {type: \"XOR\"} : XOR)]},\n    {\"name\": \"keyword\", \"symbols\": [\"keyword$subexpression$1\"], \"postprocess\": \n        ([[token]]) => toKeywordNode(token)\n        },\n    {\"name\": \"comment\", \"symbols\": [(lexer.has(\"LINE_COMMENT\") ? {type: \"LINE_COMMENT\"} : LINE_COMMENT)], \"postprocess\": \n        ([token]) => ({\n          type: NodeType.line_comment,\n          text: token.text,\n          precedingWhitespace: token.precedingWhitespace,\n        })\n        },\n    {\"name\": \"comment\", \"symbols\": [(lexer.has(\"BLOCK_COMMENT\") ? {type: \"BLOCK_COMMENT\"} : BLOCK_COMMENT)], \"postprocess\": \n        ([token]) => ({ type: NodeType.block_comment, text: token.text })\n        }\n  ],\n  ParserStart: \"main\",\n};\n\nexport default grammar;\n"],"mappings":"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"}